[{"uri":"/FolAutomReas/reference/folautomreas.html","title":"FolAutomReas","content":"Bdd \nCombining \nCompletion \nComplex \nCong \nCooper \nDP \nDecidable \nDefcnf \nEqelim \nEqual \nFol \nFolderived \nFormulas \nGeom \nGrobner \nHerbrand \nInterpolation \nIntro \nLcf \nLcffol \nLcfprop \nLimitations \nMeson \nOrder \nParamodulation \nPelletier \nProlog \nProp \nPropexamples \nQelim \nReal \nResolution \nRewrite \nSkolem \nSkolems \nStal \nTableaux \nTactics \nUnif"},{"uri":"/FolAutomReas/reference/folautomreas-lib.html","title":"FolAutomReas.Lib","content":"Fpf \nFunction \nLexer \nList \nNum \nParser \nPartition \nSearch \nSet \nSort \nString \nTime"},{"uri":"/FolAutomReas/reference/folautomreas-bdd.html","title":"Bdd","content":"Bdd \n\n Binary decision diagrams (BDDs) using complement edges.\n  \n\n In practice one would use hash tables, but we use abstract finite\n partial functions here. They might also look nicer imperatively.\n  \nBdd.bdd \nbdd \nBdd.bddnode \nbddnode \nBdd.print_bdd \nprint_bdd \nBdd.expand_node \nexpand_node \nBdd.lookup_unique \nlookup_unique \nBdd.mk_node \nmk_node \nBdd.mk_bdd \nmk_bdd \nBdd.order \norder \nBdd.thread \nthread \nBdd.bdd_and \nbdd_and \nBdd.bdd_or \nbdd_or \nBdd.bdd_imp \nbdd_imp \nBdd.bdd_iff \nbdd_iff \nBdd.mkbdd \nmkbdd \nBdd.bddtaut \nbddtaut \nBdd.dest_nimp \ndest_nimp \nBdd.dest_iffdef \ndest_iffdef \nBdd.restore_iffdef \nrestore_iffdef \nBdd.suitable_iffdef \nsuitable_iffdef \nBdd.sort_defs \nsort_defs \nBdd.mkbdde \nmkbdde \nBdd.mkbdds \nmkbdds \nBdd.ebddtaut \nebddtaut"},{"uri":"/FolAutomReas/reference/folautomreas-bdd.html#print_bdd","title":"Bdd.print_bdd","content":"Bdd.print_bdd \nprint_bdd \n"},{"uri":"/FolAutomReas/reference/folautomreas-bdd.html#expand_node","title":"Bdd.expand_node","content":"Bdd.expand_node \nexpand_node \n\n Returns the bddnode corresponding to the index \u0060n\u0060 of the bdd\n If a negative index is used the complement of the node is returned.\n"},{"uri":"/FolAutomReas/reference/folautomreas-bdd.html#lookup_unique","title":"Bdd.lookup_unique","content":"Bdd.lookup_unique \nlookup_unique \n\n Lookup or insertion if not there in unique table. \n"},{"uri":"/FolAutomReas/reference/folautomreas-bdd.html#mk_node","title":"Bdd.mk_node","content":"Bdd.mk_node \nmk_node \n\n Produce a BDD node (old or new).\n"},{"uri":"/FolAutomReas/reference/folautomreas-bdd.html#mk_bdd","title":"Bdd.mk_bdd","content":"Bdd.mk_bdd \nmk_bdd \n\n Create a new BDD with a given ordering. \n"},{"uri":"/FolAutomReas/reference/folautomreas-bdd.html#order","title":"Bdd.order","content":"Bdd.order \norder \n\n Extract the ordering field of a BDD. \n"},{"uri":"/FolAutomReas/reference/folautomreas-bdd.html#thread","title":"Bdd.thread","content":"Bdd.thread \nthread \n\n Threading state through.  \n"},{"uri":"/FolAutomReas/reference/folautomreas-bdd.html#bdd_and","title":"Bdd.bdd_and","content":"Bdd.bdd_and \nbdd_and \n\n Perform an AND operation on BDDs, maintaining canonicity.\n"},{"uri":"/FolAutomReas/reference/folautomreas-bdd.html#bdd_or","title":"Bdd.bdd_or","content":"Bdd.bdd_or \nbdd_or \n\n Perform an OR operation on BDDs, maintaining canonicity.\n"},{"uri":"/FolAutomReas/reference/folautomreas-bdd.html#bdd_imp","title":"Bdd.bdd_imp","content":"Bdd.bdd_imp \nbdd_imp \n\n Perform an IMP operation on BDDs, maintaining canonicity.\n"},{"uri":"/FolAutomReas/reference/folautomreas-bdd.html#bdd_iff","title":"Bdd.bdd_iff","content":"Bdd.bdd_iff \nbdd_iff \n\n Perform an IFF operation on BDDs, maintaining canonicity.\n"},{"uri":"/FolAutomReas/reference/folautomreas-bdd.html#mkbdd","title":"Bdd.mkbdd","content":"Bdd.mkbdd \nmkbdd \n\n Formula to BDD conversion.\n"},{"uri":"/FolAutomReas/reference/folautomreas-bdd.html#bddtaut","title":"Bdd.bddtaut","content":"Bdd.bddtaut \nbddtaut \n\n Tautology checking using BDDs.  \n"},{"uri":"/FolAutomReas/reference/folautomreas-bdd.html#dest_nimp","title":"Bdd.dest_nimp","content":"Bdd.dest_nimp \ndest_nimp \n"},{"uri":"/FolAutomReas/reference/folautomreas-bdd.html#dest_iffdef","title":"Bdd.dest_iffdef","content":"Bdd.dest_iffdef \ndest_iffdef \n"},{"uri":"/FolAutomReas/reference/folautomreas-bdd.html#restore_iffdef","title":"Bdd.restore_iffdef","content":"Bdd.restore_iffdef \nrestore_iffdef \n"},{"uri":"/FolAutomReas/reference/folautomreas-bdd.html#suitable_iffdef","title":"Bdd.suitable_iffdef","content":"Bdd.suitable_iffdef \nsuitable_iffdef \n"},{"uri":"/FolAutomReas/reference/folautomreas-bdd.html#sort_defs","title":"Bdd.sort_defs","content":"Bdd.sort_defs \nsort_defs \n"},{"uri":"/FolAutomReas/reference/folautomreas-bdd.html#mkbdde","title":"Bdd.mkbdde","content":"Bdd.mkbdde \nmkbdde \n\n Formula to BDD conversion with improved setup\n"},{"uri":"/FolAutomReas/reference/folautomreas-bdd.html#mkbdds","title":"Bdd.mkbdds","content":"Bdd.mkbdds \nmkbdds \n"},{"uri":"/FolAutomReas/reference/folautomreas-bdd.html#ebddtaut","title":"Bdd.ebddtaut","content":"Bdd.ebddtaut \nebddtaut \n\n Tautology checking using BDDs with an improved setup\n"},{"uri":"/FolAutomReas/reference/folautomreas-bdd-bdd.html","title":"bdd","content":"bdd \nThe type of Binary Decision Diagram. \nIt is composed by \n \u003Cul\u003E\n  \u003Cli\u003Ea unique table \u003Cc\u003Efunc\u0026lt;bddnode, int\u0026gt;\u003C/c\u003E: a finite partial function mapping a bddnode to an integer index;\u003C/li\u003E\n  \u003Cli\u003Ean expansion table \u003Cc\u003Efunc\u0026lt;int, bddnode\u0026gt;\u003C/c\u003E: a finite partial function mapping an integer index to a bddnode;\u003C/li\u003E\n  \u003Cli\u003Ean integer to store the smallest unused positive node index;\u003C/li\u003E\n  \u003Cli\u003Ea prop variable order \u003Cc\u003E(prop -\u0026gt; prop -\u0026gt; bool)\u003C/c\u003E;\u003C/li\u003E\n\u003C/ul\u003E \nbdd.Bdd \nBdd"},{"uri":"/FolAutomReas/reference/folautomreas-bdd-bdd.html#Bdd","title":"bdd.Bdd","content":"bdd.Bdd \nBdd \n"},{"uri":"/FolAutomReas/reference/folautomreas-bdd-bddnode.html","title":"bddnode","content":"bddnode \nThe type of binary decision diagram \n (\u003Ca href=\u0022/FolAutomReas/reference/folautomreas-bdd-bdd.html\u0022\u003Ebdd\u003C/a\u003E) node. \nIt is composed by a propositional variable, a left node and a \n right node. \nbddnode.Item1 \nItem1 \nbddnode.Item2 \nItem2 \nbddnode.Item3 \nItem3"},{"uri":"/FolAutomReas/reference/folautomreas-bdd-bddnode.html#Item1","title":"bddnode.Item1","content":"bddnode.Item1 \nItem1 \n"},{"uri":"/FolAutomReas/reference/folautomreas-bdd-bddnode.html#Item2","title":"bddnode.Item2","content":"bddnode.Item2 \nItem2 \n"},{"uri":"/FolAutomReas/reference/folautomreas-bdd-bddnode.html#Item3","title":"bddnode.Item3","content":"bddnode.Item3 \nItem3 \n"},{"uri":"/FolAutomReas/reference/folautomreas-combining.html","title":"Combining","content":"Combining \n \nCombining.real_lang \nreal_lang \nCombining.int_lang \nint_lang \nCombining.add_default \nadd_default \nCombining.chooselang \nchooselang \nCombining.listify \nlistify \nCombining.homot \nhomot \nCombining.homol \nhomol \nCombining.homo \nhomo \nCombining.homogenize \nhomogenize \nCombining.belongs \nbelongs \nCombining.langpartition \nlangpartition \nCombining.arreq \narreq \nCombining.arrangement \narrangement \nCombining.dest_def \ndest_def \nCombining.redeqs \nredeqs \nCombining.trydps \ntrydps \nCombining.allpartitions \nallpartitions \nCombining.nelop_refute001 \nnelop_refute001 \nCombining.nelop1001 \nnelop1001 \nCombining.nelop001 \nnelop001 \nCombining.findasubset \nfindasubset \nCombining.findsubset \nfindsubset \nCombining.nelop_refute \nnelop_refute \nCombining.nelop1 \nnelop1 \nCombining.nelop \nnelop"},{"uri":"/FolAutomReas/reference/folautomreas-combining.html#real_lang","title":"Combining.real_lang","content":"Combining.real_lang \nreal_lang \n"},{"uri":"/FolAutomReas/reference/folautomreas-combining.html#int_lang","title":"Combining.int_lang","content":"Combining.int_lang \nint_lang \n"},{"uri":"/FolAutomReas/reference/folautomreas-combining.html#add_default","title":"Combining.add_default","content":"Combining.add_default \nadd_default \n"},{"uri":"/FolAutomReas/reference/folautomreas-combining.html#chooselang","title":"Combining.chooselang","content":"Combining.chooselang \nchooselang \n"},{"uri":"/FolAutomReas/reference/folautomreas-combining.html#listify","title":"Combining.listify","content":"Combining.listify \nlistify \n"},{"uri":"/FolAutomReas/reference/folautomreas-combining.html#homot","title":"Combining.homot","content":"Combining.homot \nhomot \n"},{"uri":"/FolAutomReas/reference/folautomreas-combining.html#homol","title":"Combining.homol","content":"Combining.homol \nhomol \n"},{"uri":"/FolAutomReas/reference/folautomreas-combining.html#homo","title":"Combining.homo","content":"Combining.homo \nhomo \n"},{"uri":"/FolAutomReas/reference/folautomreas-combining.html#homogenize","title":"Combining.homogenize","content":"Combining.homogenize \nhomogenize \n"},{"uri":"/FolAutomReas/reference/folautomreas-combining.html#belongs","title":"Combining.belongs","content":"Combining.belongs \nbelongs \n"},{"uri":"/FolAutomReas/reference/folautomreas-combining.html#langpartition","title":"Combining.langpartition","content":"Combining.langpartition \nlangpartition \n"},{"uri":"/FolAutomReas/reference/folautomreas-combining.html#arreq","title":"Combining.arreq","content":"Combining.arreq \narreq \n"},{"uri":"/FolAutomReas/reference/folautomreas-combining.html#arrangement","title":"Combining.arrangement","content":"Combining.arrangement \narrangement \n"},{"uri":"/FolAutomReas/reference/folautomreas-combining.html#dest_def","title":"Combining.dest_def","content":"Combining.dest_def \ndest_def \n"},{"uri":"/FolAutomReas/reference/folautomreas-combining.html#redeqs","title":"Combining.redeqs","content":"Combining.redeqs \nredeqs \n"},{"uri":"/FolAutomReas/reference/folautomreas-combining.html#trydps","title":"Combining.trydps","content":"Combining.trydps \ntrydps \n"},{"uri":"/FolAutomReas/reference/folautomreas-combining.html#allpartitions","title":"Combining.allpartitions","content":"Combining.allpartitions \nallpartitions \n"},{"uri":"/FolAutomReas/reference/folautomreas-combining.html#nelop_refute001","title":"Combining.nelop_refute001","content":"Combining.nelop_refute001 \nnelop_refute001 \n"},{"uri":"/FolAutomReas/reference/folautomreas-combining.html#nelop1001","title":"Combining.nelop1001","content":"Combining.nelop1001 \nnelop1001 \n"},{"uri":"/FolAutomReas/reference/folautomreas-combining.html#nelop001","title":"Combining.nelop001","content":"Combining.nelop001 \nnelop001 \n"},{"uri":"/FolAutomReas/reference/folautomreas-combining.html#findasubset","title":"Combining.findasubset","content":"Combining.findasubset \nfindasubset \n"},{"uri":"/FolAutomReas/reference/folautomreas-combining.html#findsubset","title":"Combining.findsubset","content":"Combining.findsubset \nfindsubset \n"},{"uri":"/FolAutomReas/reference/folautomreas-combining.html#nelop_refute","title":"Combining.nelop_refute","content":"Combining.nelop_refute \nnelop_refute \n"},{"uri":"/FolAutomReas/reference/folautomreas-combining.html#nelop1","title":"Combining.nelop1","content":"Combining.nelop1 \nnelop1 \n"},{"uri":"/FolAutomReas/reference/folautomreas-combining.html#nelop","title":"Combining.nelop","content":"Combining.nelop \nnelop \n"},{"uri":"/FolAutomReas/reference/folautomreas-completion.html","title":"Completion","content":"Completion \n \nCompletion.renamepair \nrenamepair \nCompletion.listcases \nlistcases \nCompletion.overlaps \noverlaps \nCompletion.crit1 \ncrit1 \nCompletion.critical_pairs \ncritical_pairs \nCompletion.normalize_and_orient \nnormalize_and_orient \nCompletion.status \nstatus \nCompletion.complete \ncomplete \nCompletion.interreduce \ninterreduce \nCompletion.complete_and_simplify \ncomplete_and_simplify \nCompletion.eqs \neqs \nCompletion.wts \nwts \nCompletion.ord \nord \nCompletion.def \ndef \nCompletion.crits \ncrits \nCompletion.complete1 \ncomplete1"},{"uri":"/FolAutomReas/reference/folautomreas-completion.html#renamepair","title":"Completion.renamepair","content":"Completion.renamepair \nrenamepair \n"},{"uri":"/FolAutomReas/reference/folautomreas-completion.html#listcases","title":"Completion.listcases","content":"Completion.listcases \nlistcases \n"},{"uri":"/FolAutomReas/reference/folautomreas-completion.html#overlaps","title":"Completion.overlaps","content":"Completion.overlaps \noverlaps \n"},{"uri":"/FolAutomReas/reference/folautomreas-completion.html#crit1","title":"Completion.crit1","content":"Completion.crit1 \ncrit1 \n"},{"uri":"/FolAutomReas/reference/folautomreas-completion.html#critical_pairs","title":"Completion.critical_pairs","content":"Completion.critical_pairs \ncritical_pairs \n"},{"uri":"/FolAutomReas/reference/folautomreas-completion.html#normalize_and_orient","title":"Completion.normalize_and_orient","content":"Completion.normalize_and_orient \nnormalize_and_orient \n"},{"uri":"/FolAutomReas/reference/folautomreas-completion.html#status","title":"Completion.status","content":"Completion.status \nstatus \n"},{"uri":"/FolAutomReas/reference/folautomreas-completion.html#complete","title":"Completion.complete","content":"Completion.complete \ncomplete \n"},{"uri":"/FolAutomReas/reference/folautomreas-completion.html#interreduce","title":"Completion.interreduce","content":"Completion.interreduce \ninterreduce \n"},{"uri":"/FolAutomReas/reference/folautomreas-completion.html#complete_and_simplify","title":"Completion.complete_and_simplify","content":"Completion.complete_and_simplify \ncomplete_and_simplify \n"},{"uri":"/FolAutomReas/reference/folautomreas-completion.html#eqs","title":"Completion.eqs","content":"Completion.eqs \neqs \n"},{"uri":"/FolAutomReas/reference/folautomreas-completion.html#wts","title":"Completion.wts","content":"Completion.wts \nwts \n"},{"uri":"/FolAutomReas/reference/folautomreas-completion.html#ord","title":"Completion.ord","content":"Completion.ord \nord \n"},{"uri":"/FolAutomReas/reference/folautomreas-completion.html#def","title":"Completion.def","content":"Completion.def \ndef \n"},{"uri":"/FolAutomReas/reference/folautomreas-completion.html#crits","title":"Completion.crits","content":"Completion.crits \ncrits \n"},{"uri":"/FolAutomReas/reference/folautomreas-completion.html#complete1","title":"Completion.complete1","content":"Completion.complete1 \ncomplete1 \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html","title":"Complex","content":"Complex \n \nComplex.sign \nsign \nComplex.poly_add \npoly_add \nComplex.poly_ladd \npoly_ladd \nComplex.poly_neg \npoly_neg \nComplex.poly_sub \npoly_sub \nComplex.poly_mul \npoly_mul \nComplex.poly_lmul \npoly_lmul \nComplex.poly_pow \npoly_pow \nComplex.poly_div \npoly_div \nComplex.poly_var \npoly_var \nComplex.polynate \npolynate \nComplex.polyatom \npolyatom \nComplex.coefficients \ncoefficients \nComplex.degree \ndegree \nComplex.is_constant \nis_constant \nComplex.head \nhead \nComplex.behead \nbehead \nComplex.poly_cmul \npoly_cmul \nComplex.headconst \nheadconst \nComplex.monic \nmonic \nComplex.pdivide \npdivide \nComplex.swap \nswap \nComplex.findsign \nfindsign \nComplex.assertsign \nassertsign \nComplex.split_zero \nsplit_zero \nComplex.poly_nonzero \npoly_nonzero \nComplex.poly_nondiv \npoly_nondiv \nComplex.cqelim \ncqelim \nComplex.init_sgns \ninit_sgns \nComplex.basic_complex_qelim \nbasic_complex_qelim \nComplex.complex_qelim \ncomplex_qelim"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#poly_add","title":"Complex.poly_add","content":"Complex.poly_add \npoly_add \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#poly_ladd","title":"Complex.poly_ladd","content":"Complex.poly_ladd \npoly_ladd \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#poly_neg","title":"Complex.poly_neg","content":"Complex.poly_neg \npoly_neg \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#poly_sub","title":"Complex.poly_sub","content":"Complex.poly_sub \npoly_sub \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#poly_mul","title":"Complex.poly_mul","content":"Complex.poly_mul \npoly_mul \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#poly_lmul","title":"Complex.poly_lmul","content":"Complex.poly_lmul \npoly_lmul \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#poly_pow","title":"Complex.poly_pow","content":"Complex.poly_pow \npoly_pow \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#poly_div","title":"Complex.poly_div","content":"Complex.poly_div \npoly_div \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#poly_var","title":"Complex.poly_var","content":"Complex.poly_var \npoly_var \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#polynate","title":"Complex.polynate","content":"Complex.polynate \npolynate \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#polyatom","title":"Complex.polyatom","content":"Complex.polyatom \npolyatom \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#coefficients","title":"Complex.coefficients","content":"Complex.coefficients \ncoefficients \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#degree","title":"Complex.degree","content":"Complex.degree \ndegree \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#is_constant","title":"Complex.is_constant","content":"Complex.is_constant \nis_constant \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#head","title":"Complex.head","content":"Complex.head \nhead \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#behead","title":"Complex.behead","content":"Complex.behead \nbehead \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#poly_cmul","title":"Complex.poly_cmul","content":"Complex.poly_cmul \npoly_cmul \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#headconst","title":"Complex.headconst","content":"Complex.headconst \nheadconst \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#monic","title":"Complex.monic","content":"Complex.monic \nmonic \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#pdivide","title":"Complex.pdivide","content":"Complex.pdivide \npdivide \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#swap","title":"Complex.swap","content":"Complex.swap \nswap \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#findsign","title":"Complex.findsign","content":"Complex.findsign \nfindsign \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#assertsign","title":"Complex.assertsign","content":"Complex.assertsign \nassertsign \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#split_zero","title":"Complex.split_zero","content":"Complex.split_zero \nsplit_zero \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#poly_nonzero","title":"Complex.poly_nonzero","content":"Complex.poly_nonzero \npoly_nonzero \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#poly_nondiv","title":"Complex.poly_nondiv","content":"Complex.poly_nondiv \npoly_nondiv \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#cqelim","title":"Complex.cqelim","content":"Complex.cqelim \ncqelim \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#init_sgns","title":"Complex.init_sgns","content":"Complex.init_sgns \ninit_sgns \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#basic_complex_qelim","title":"Complex.basic_complex_qelim","content":"Complex.basic_complex_qelim \nbasic_complex_qelim \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex.html#complex_qelim","title":"Complex.complex_qelim","content":"Complex.complex_qelim \ncomplex_qelim \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex-sign.html","title":"sign","content":"sign \n \nsign.Zero \nZero \nsign.Nonzero \nNonzero \nsign.Positive \nPositive \nsign.Negative \nNegative"},{"uri":"/FolAutomReas/reference/folautomreas-complex-sign.html#Zero","title":"sign.Zero","content":"sign.Zero \nZero \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex-sign.html#Nonzero","title":"sign.Nonzero","content":"sign.Nonzero \nNonzero \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex-sign.html#Positive","title":"sign.Positive","content":"sign.Positive \nPositive \n"},{"uri":"/FolAutomReas/reference/folautomreas-complex-sign.html#Negative","title":"sign.Negative","content":"sign.Negative \nNegative \n"},{"uri":"/FolAutomReas/reference/folautomreas-cong.html","title":"Cong","content":"Cong \n \nCong.subterms \nsubterms \nCong.congruent \ncongruent \nCong.emerge \nemerge \nCong.predecessors \npredecessors \nCong.ccsatisfiable \nccsatisfiable \nCong.ccvalid \nccvalid"},{"uri":"/FolAutomReas/reference/folautomreas-cong.html#subterms","title":"Cong.subterms","content":"Cong.subterms \nsubterms \n"},{"uri":"/FolAutomReas/reference/folautomreas-cong.html#congruent","title":"Cong.congruent","content":"Cong.congruent \ncongruent \n"},{"uri":"/FolAutomReas/reference/folautomreas-cong.html#emerge","title":"Cong.emerge","content":"Cong.emerge \nemerge \n"},{"uri":"/FolAutomReas/reference/folautomreas-cong.html#predecessors","title":"Cong.predecessors","content":"Cong.predecessors \npredecessors \n"},{"uri":"/FolAutomReas/reference/folautomreas-cong.html#ccsatisfiable","title":"Cong.ccsatisfiable","content":"Cong.ccsatisfiable \nccsatisfiable \n"},{"uri":"/FolAutomReas/reference/folautomreas-cong.html#ccvalid","title":"Cong.ccvalid","content":"Cong.ccvalid \nccvalid \n"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html","title":"Cooper","content":"Cooper \n \nCooper.zero \nzero \nCooper.mk_numeral \nmk_numeral \nCooper.dest_numeral \ndest_numeral \nCooper.is_numeral \nis_numeral \nCooper.numeral1 \nnumeral1 \nCooper.numeral2 \nnumeral2 \nCooper.linear_cmul \nlinear_cmul \nCooper.linear_add \nlinear_add \nCooper.linear_neg \nlinear_neg \nCooper.linear_sub \nlinear_sub \nCooper.linear_mul \nlinear_mul \nCooper.lint \nlint \nCooper.mkatom \nmkatom \nCooper.linform \nlinform \nCooper.posineq \nposineq \nCooper.formlcm \nformlcm \nCooper.adjustcoeff \nadjustcoeff \nCooper.unitycoeff \nunitycoeff \nCooper.minusinf \nminusinf \nCooper.divlcm \ndivlcm \nCooper.bset \nbset \nCooper.linrep \nlinrep \nCooper.cooper \ncooper \nCooper.operations \noperations \nCooper.evalc \nevalc \nCooper.integer_qelim \ninteger_qelim \nCooper.relativize \nrelativize \nCooper.natural_qelim \nnatural_qelim"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html#zero","title":"Cooper.zero","content":"Cooper.zero \nzero \n"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html#mk_numeral","title":"Cooper.mk_numeral","content":"Cooper.mk_numeral \nmk_numeral \n"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html#dest_numeral","title":"Cooper.dest_numeral","content":"Cooper.dest_numeral \ndest_numeral \n"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html#is_numeral","title":"Cooper.is_numeral","content":"Cooper.is_numeral \nis_numeral \n"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html#numeral1","title":"Cooper.numeral1","content":"Cooper.numeral1 \nnumeral1 \n"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html#numeral2","title":"Cooper.numeral2","content":"Cooper.numeral2 \nnumeral2 \n"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html#linear_cmul","title":"Cooper.linear_cmul","content":"Cooper.linear_cmul \nlinear_cmul \n"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html#linear_add","title":"Cooper.linear_add","content":"Cooper.linear_add \nlinear_add \n"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html#linear_neg","title":"Cooper.linear_neg","content":"Cooper.linear_neg \nlinear_neg \n"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html#linear_sub","title":"Cooper.linear_sub","content":"Cooper.linear_sub \nlinear_sub \n"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html#linear_mul","title":"Cooper.linear_mul","content":"Cooper.linear_mul \nlinear_mul \n"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html#lint","title":"Cooper.lint","content":"Cooper.lint \nlint \n"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html#mkatom","title":"Cooper.mkatom","content":"Cooper.mkatom \nmkatom \n"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html#linform","title":"Cooper.linform","content":"Cooper.linform \nlinform \n"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html#posineq","title":"Cooper.posineq","content":"Cooper.posineq \nposineq \n"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html#formlcm","title":"Cooper.formlcm","content":"Cooper.formlcm \nformlcm \n"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html#adjustcoeff","title":"Cooper.adjustcoeff","content":"Cooper.adjustcoeff \nadjustcoeff \n"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html#unitycoeff","title":"Cooper.unitycoeff","content":"Cooper.unitycoeff \nunitycoeff \n"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html#minusinf","title":"Cooper.minusinf","content":"Cooper.minusinf \nminusinf \n"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html#divlcm","title":"Cooper.divlcm","content":"Cooper.divlcm \ndivlcm \n"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html#bset","title":"Cooper.bset","content":"Cooper.bset \nbset \n"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html#linrep","title":"Cooper.linrep","content":"Cooper.linrep \nlinrep \n"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html#cooper","title":"Cooper.cooper","content":"Cooper.cooper \ncooper \n"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html#operations","title":"Cooper.operations","content":"Cooper.operations \noperations \n"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html#evalc","title":"Cooper.evalc","content":"Cooper.evalc \nevalc \n"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html#integer_qelim","title":"Cooper.integer_qelim","content":"Cooper.integer_qelim \ninteger_qelim \n"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html#relativize","title":"Cooper.relativize","content":"Cooper.relativize \nrelativize \n"},{"uri":"/FolAutomReas/reference/folautomreas-cooper.html#natural_qelim","title":"Cooper.natural_qelim","content":"Cooper.natural_qelim \nnatural_qelim \n"},{"uri":"/FolAutomReas/reference/folautomreas-dp.html","title":"DP","content":"DP \n\n The Davis-Putnam and the Davis-Putnam-Loveland-Logemann procedures.\n  \nDP.trailmix \ntrailmix \nDP.containOneLitterals \ncontainOneLitterals \nDP.one_literal_rule \none_literal_rule \nDP.containPureLitterals \ncontainPureLitterals \nDP.affirmative_negative_rule \naffirmative_negative_rule \nDP.resolve_on \nresolve_on \nDP.resolution_blowup \nresolution_blowup \nDP.resolution_rule \nresolution_rule \nDP.dp \ndp \nDP.dpsat \ndpsat \nDP.dptaut \ndptaut \nDP.posneg_count \nposneg_count \nDP.dpll \ndpll \nDP.dpllsat \ndpllsat \nDP.dplltaut \ndplltaut \nDP.unassigned \nunassigned \nDP.unit_subpropagate \nunit_subpropagate \nDP.unit_propagate \nunit_propagate \nDP.backtrack \nbacktrack \nDP.dpli \ndpli \nDP.dplisat \ndplisat \nDP.dplitaut \ndplitaut \nDP.backjump \nbackjump \nDP.dplb \ndplb \nDP.dplbsat \ndplbsat \nDP.dplbtaut \ndplbtaut"},{"uri":"/FolAutomReas/reference/folautomreas-dp.html#containOneLitterals","title":"DP.containOneLitterals","content":"DP.containOneLitterals \ncontainOneLitterals \n\n Checks if \u003Ccode\u003Eclauses\u003C/code\u003E contain one litterals.\n "},{"uri":"/FolAutomReas/reference/folautomreas-dp.html#one_literal_rule","title":"DP.one_literal_rule","content":"DP.one_literal_rule \none_literal_rule \n"},{"uri":"/FolAutomReas/reference/folautomreas-dp.html#containPureLitterals","title":"DP.containPureLitterals","content":"DP.containPureLitterals \ncontainPureLitterals \n"},{"uri":"/FolAutomReas/reference/folautomreas-dp.html#affirmative_negative_rule","title":"DP.affirmative_negative_rule","content":"DP.affirmative_negative_rule \naffirmative_negative_rule \n"},{"uri":"/FolAutomReas/reference/folautomreas-dp.html#resolve_on","title":"DP.resolve_on","content":"DP.resolve_on \nresolve_on \n"},{"uri":"/FolAutomReas/reference/folautomreas-dp.html#resolution_blowup","title":"DP.resolution_blowup","content":"DP.resolution_blowup \nresolution_blowup \n"},{"uri":"/FolAutomReas/reference/folautomreas-dp.html#resolution_rule","title":"DP.resolution_rule","content":"DP.resolution_rule \nresolution_rule \n"},{"uri":"/FolAutomReas/reference/folautomreas-dp.html#dp","title":"DP.dp","content":"DP.dp \ndp \n"},{"uri":"/FolAutomReas/reference/folautomreas-dp.html#dpsat","title":"DP.dpsat","content":"DP.dpsat \ndpsat \n"},{"uri":"/FolAutomReas/reference/folautomreas-dp.html#dptaut","title":"DP.dptaut","content":"DP.dptaut \ndptaut \n"},{"uri":"/FolAutomReas/reference/folautomreas-dp.html#posneg_count","title":"DP.posneg_count","content":"DP.posneg_count \nposneg_count \n"},{"uri":"/FolAutomReas/reference/folautomreas-dp.html#dpll","title":"DP.dpll","content":"DP.dpll \ndpll \n"},{"uri":"/FolAutomReas/reference/folautomreas-dp.html#dpllsat","title":"DP.dpllsat","content":"DP.dpllsat \ndpllsat \n"},{"uri":"/FolAutomReas/reference/folautomreas-dp.html#dplltaut","title":"DP.dplltaut","content":"DP.dplltaut \ndplltaut \n"},{"uri":"/FolAutomReas/reference/folautomreas-dp.html#unassigned","title":"DP.unassigned","content":"DP.unassigned \nunassigned \n"},{"uri":"/FolAutomReas/reference/folautomreas-dp.html#unit_subpropagate","title":"DP.unit_subpropagate","content":"DP.unit_subpropagate \nunit_subpropagate \n"},{"uri":"/FolAutomReas/reference/folautomreas-dp.html#unit_propagate","title":"DP.unit_propagate","content":"DP.unit_propagate \nunit_propagate \n"},{"uri":"/FolAutomReas/reference/folautomreas-dp.html#backtrack","title":"DP.backtrack","content":"DP.backtrack \nbacktrack \n"},{"uri":"/FolAutomReas/reference/folautomreas-dp.html#dpli","title":"DP.dpli","content":"DP.dpli \ndpli \n"},{"uri":"/FolAutomReas/reference/folautomreas-dp.html#dplisat","title":"DP.dplisat","content":"DP.dplisat \ndplisat \n"},{"uri":"/FolAutomReas/reference/folautomreas-dp.html#dplitaut","title":"DP.dplitaut","content":"DP.dplitaut \ndplitaut \n"},{"uri":"/FolAutomReas/reference/folautomreas-dp.html#backjump","title":"DP.backjump","content":"DP.backjump \nbackjump \n"},{"uri":"/FolAutomReas/reference/folautomreas-dp.html#dplb","title":"DP.dplb","content":"DP.dplb \ndplb \n"},{"uri":"/FolAutomReas/reference/folautomreas-dp.html#dplbsat","title":"DP.dplbsat","content":"DP.dplbsat \ndplbsat \n"},{"uri":"/FolAutomReas/reference/folautomreas-dp.html#dplbtaut","title":"DP.dplbtaut","content":"DP.dplbtaut \ndplbtaut \n"},{"uri":"/FolAutomReas/reference/folautomreas-dp-trailmix.html","title":"trailmix","content":"trailmix \n \ntrailmix.Guessed \nGuessed \ntrailmix.Deduced \nDeduced"},{"uri":"/FolAutomReas/reference/folautomreas-dp-trailmix.html#Guessed","title":"trailmix.Guessed","content":"trailmix.Guessed \nGuessed \n"},{"uri":"/FolAutomReas/reference/folautomreas-dp-trailmix.html#Deduced","title":"trailmix.Deduced","content":"trailmix.Deduced \nDeduced \n"},{"uri":"/FolAutomReas/reference/folautomreas-decidable.html","title":"Decidable","content":"Decidable \n \nDecidable.aedecide \naedecide \nDecidable.separate \nseparate \nDecidable.pushquant \npushquant \nDecidable.miniscope \nminiscope \nDecidable.wang \nwang \nDecidable.atom \natom \nDecidable.premiss_A \npremiss_A \nDecidable.premiss_E \npremiss_E \nDecidable.premiss_I \npremiss_I \nDecidable.premiss_O \npremiss_O \nDecidable.anglicize_premiss \nanglicize_premiss \nDecidable.anglicize_syllogism \nanglicize_syllogism \nDecidable.all_possible_syllogisms \nall_possible_syllogisms \nDecidable.all_possible_syllogisms\u0027 \nall_possible_syllogisms\u0027 \nDecidable.alltuples \nalltuples \nDecidable.allmappings \nallmappings \nDecidable.alldepmappings \nalldepmappings \nDecidable.allfunctions \nallfunctions \nDecidable.allpredicates \nallpredicates \nDecidable.decide_finite \ndecide_finite \nDecidable.limmeson \nlimmeson \nDecidable.limited_meson \nlimited_meson \nDecidable.decide_fmp \ndecide_fmp \nDecidable.decide_monadic \ndecide_monadic"},{"uri":"/FolAutomReas/reference/folautomreas-decidable.html#aedecide","title":"Decidable.aedecide","content":"Decidable.aedecide \naedecide \n"},{"uri":"/FolAutomReas/reference/folautomreas-decidable.html#separate","title":"Decidable.separate","content":"Decidable.separate \nseparate \n"},{"uri":"/FolAutomReas/reference/folautomreas-decidable.html#pushquant","title":"Decidable.pushquant","content":"Decidable.pushquant \npushquant \n"},{"uri":"/FolAutomReas/reference/folautomreas-decidable.html#miniscope","title":"Decidable.miniscope","content":"Decidable.miniscope \nminiscope \n"},{"uri":"/FolAutomReas/reference/folautomreas-decidable.html#wang","title":"Decidable.wang","content":"Decidable.wang \nwang \n"},{"uri":"/FolAutomReas/reference/folautomreas-decidable.html#atom","title":"Decidable.atom","content":"Decidable.atom \natom \n"},{"uri":"/FolAutomReas/reference/folautomreas-decidable.html#premiss_A","title":"Decidable.premiss_A","content":"Decidable.premiss_A \npremiss_A \n"},{"uri":"/FolAutomReas/reference/folautomreas-decidable.html#premiss_E","title":"Decidable.premiss_E","content":"Decidable.premiss_E \npremiss_E \n"},{"uri":"/FolAutomReas/reference/folautomreas-decidable.html#premiss_I","title":"Decidable.premiss_I","content":"Decidable.premiss_I \npremiss_I \n"},{"uri":"/FolAutomReas/reference/folautomreas-decidable.html#premiss_O","title":"Decidable.premiss_O","content":"Decidable.premiss_O \npremiss_O \n"},{"uri":"/FolAutomReas/reference/folautomreas-decidable.html#anglicize_premiss","title":"Decidable.anglicize_premiss","content":"Decidable.anglicize_premiss \nanglicize_premiss \n"},{"uri":"/FolAutomReas/reference/folautomreas-decidable.html#anglicize_syllogism","title":"Decidable.anglicize_syllogism","content":"Decidable.anglicize_syllogism \nanglicize_syllogism \n"},{"uri":"/FolAutomReas/reference/folautomreas-decidable.html#all_possible_syllogisms","title":"Decidable.all_possible_syllogisms","content":"Decidable.all_possible_syllogisms \nall_possible_syllogisms \n"},{"uri":"/FolAutomReas/reference/folautomreas-decidable.html#all_possible_syllogisms\u0027","title":"Decidable.all_possible_syllogisms\u0027","content":"Decidable.all_possible_syllogisms\u0027 \nall_possible_syllogisms\u0027 \n"},{"uri":"/FolAutomReas/reference/folautomreas-decidable.html#alltuples","title":"Decidable.alltuples","content":"Decidable.alltuples \nalltuples \n"},{"uri":"/FolAutomReas/reference/folautomreas-decidable.html#allmappings","title":"Decidable.allmappings","content":"Decidable.allmappings \nallmappings \n"},{"uri":"/FolAutomReas/reference/folautomreas-decidable.html#alldepmappings","title":"Decidable.alldepmappings","content":"Decidable.alldepmappings \nalldepmappings \n"},{"uri":"/FolAutomReas/reference/folautomreas-decidable.html#allfunctions","title":"Decidable.allfunctions","content":"Decidable.allfunctions \nallfunctions \n"},{"uri":"/FolAutomReas/reference/folautomreas-decidable.html#allpredicates","title":"Decidable.allpredicates","content":"Decidable.allpredicates \nallpredicates \n"},{"uri":"/FolAutomReas/reference/folautomreas-decidable.html#decide_finite","title":"Decidable.decide_finite","content":"Decidable.decide_finite \ndecide_finite \n"},{"uri":"/FolAutomReas/reference/folautomreas-decidable.html#limmeson","title":"Decidable.limmeson","content":"Decidable.limmeson \nlimmeson \n"},{"uri":"/FolAutomReas/reference/folautomreas-decidable.html#limited_meson","title":"Decidable.limited_meson","content":"Decidable.limited_meson \nlimited_meson \n"},{"uri":"/FolAutomReas/reference/folautomreas-decidable.html#decide_fmp","title":"Decidable.decide_fmp","content":"Decidable.decide_fmp \ndecide_fmp \n"},{"uri":"/FolAutomReas/reference/folautomreas-decidable.html#decide_monadic","title":"Decidable.decide_monadic","content":"Decidable.decide_monadic \ndecide_monadic \n"},{"uri":"/FolAutomReas/reference/folautomreas-defcnf.html","title":"Defcnf","content":"Defcnf \nDefinite Conjunctive Normal Form \nDefcnf.mkprop \nmkprop \nDefcnf.maincnf \nmaincnf \nDefcnf.defstep \ndefstep \nDefcnf.max_varindex \nmax_varindex \nDefcnf.mk_defcnf \nmk_defcnf \nDefcnf.defcnfOrig \ndefcnfOrig \nDefcnf.subcnf \nsubcnf \nDefcnf.orcnf \norcnf \nDefcnf.andcnf \nandcnf \nDefcnf.defcnfs \ndefcnfs \nDefcnf.defcnf \ndefcnf \nDefcnf.andcnf3 \nandcnf3 \nDefcnf.defcnf3 \ndefcnf3"},{"uri":"/FolAutomReas/reference/folautomreas-defcnf.html#mkprop","title":"Defcnf.mkprop","content":"Defcnf.mkprop \nmkprop \n"},{"uri":"/FolAutomReas/reference/folautomreas-defcnf.html#maincnf","title":"Defcnf.maincnf","content":"Defcnf.maincnf \nmaincnf \n"},{"uri":"/FolAutomReas/reference/folautomreas-defcnf.html#defstep","title":"Defcnf.defstep","content":"Defcnf.defstep \ndefstep \n"},{"uri":"/FolAutomReas/reference/folautomreas-defcnf.html#max_varindex","title":"Defcnf.max_varindex","content":"Defcnf.max_varindex \nmax_varindex \n"},{"uri":"/FolAutomReas/reference/folautomreas-defcnf.html#mk_defcnf","title":"Defcnf.mk_defcnf","content":"Defcnf.mk_defcnf \nmk_defcnf \n"},{"uri":"/FolAutomReas/reference/folautomreas-defcnf.html#defcnfOrig","title":"Defcnf.defcnfOrig","content":"Defcnf.defcnfOrig \ndefcnfOrig \n"},{"uri":"/FolAutomReas/reference/folautomreas-defcnf.html#subcnf","title":"Defcnf.subcnf","content":"Defcnf.subcnf \nsubcnf \n"},{"uri":"/FolAutomReas/reference/folautomreas-defcnf.html#orcnf","title":"Defcnf.orcnf","content":"Defcnf.orcnf \norcnf \n"},{"uri":"/FolAutomReas/reference/folautomreas-defcnf.html#andcnf","title":"Defcnf.andcnf","content":"Defcnf.andcnf \nandcnf \n"},{"uri":"/FolAutomReas/reference/folautomreas-defcnf.html#defcnfs","title":"Defcnf.defcnfs","content":"Defcnf.defcnfs \ndefcnfs \n"},{"uri":"/FolAutomReas/reference/folautomreas-defcnf.html#defcnf","title":"Defcnf.defcnf","content":"Defcnf.defcnf \ndefcnf \n"},{"uri":"/FolAutomReas/reference/folautomreas-defcnf.html#andcnf3","title":"Defcnf.andcnf3","content":"Defcnf.andcnf3 \nandcnf3 \n"},{"uri":"/FolAutomReas/reference/folautomreas-defcnf.html#defcnf3","title":"Defcnf.defcnf3","content":"Defcnf.defcnf3 \ndefcnf3 \n"},{"uri":"/FolAutomReas/reference/folautomreas-eqelim.html","title":"Eqelim","content":"Eqelim \n \nEqelim.modify_S \nmodify_S \nEqelim.modify_T \nmodify_T \nEqelim.is_nonvar \nis_nonvar \nEqelim.find_nestnonvar \nfind_nestnonvar \nEqelim.find_nvsubterm \nfind_nvsubterm \nEqelim.replacet \nreplacet \nEqelim.replace \nreplace \nEqelim.emodify \nemodify \nEqelim.modify_E \nmodify_E \nEqelim.brand \nbrand \nEqelim.bpuremeson \nbpuremeson \nEqelim.bmeson \nbmeson \nEqelim.emeson \nemeson"},{"uri":"/FolAutomReas/reference/folautomreas-eqelim.html#modify_S","title":"Eqelim.modify_S","content":"Eqelim.modify_S \nmodify_S \n"},{"uri":"/FolAutomReas/reference/folautomreas-eqelim.html#modify_T","title":"Eqelim.modify_T","content":"Eqelim.modify_T \nmodify_T \n"},{"uri":"/FolAutomReas/reference/folautomreas-eqelim.html#is_nonvar","title":"Eqelim.is_nonvar","content":"Eqelim.is_nonvar \nis_nonvar \n"},{"uri":"/FolAutomReas/reference/folautomreas-eqelim.html#find_nestnonvar","title":"Eqelim.find_nestnonvar","content":"Eqelim.find_nestnonvar \nfind_nestnonvar \n"},{"uri":"/FolAutomReas/reference/folautomreas-eqelim.html#find_nvsubterm","title":"Eqelim.find_nvsubterm","content":"Eqelim.find_nvsubterm \nfind_nvsubterm \n"},{"uri":"/FolAutomReas/reference/folautomreas-eqelim.html#replacet","title":"Eqelim.replacet","content":"Eqelim.replacet \nreplacet \n"},{"uri":"/FolAutomReas/reference/folautomreas-eqelim.html#replace","title":"Eqelim.replace","content":"Eqelim.replace \nreplace \n"},{"uri":"/FolAutomReas/reference/folautomreas-eqelim.html#emodify","title":"Eqelim.emodify","content":"Eqelim.emodify \nemodify \n"},{"uri":"/FolAutomReas/reference/folautomreas-eqelim.html#modify_E","title":"Eqelim.modify_E","content":"Eqelim.modify_E \nmodify_E \n"},{"uri":"/FolAutomReas/reference/folautomreas-eqelim.html#brand","title":"Eqelim.brand","content":"Eqelim.brand \nbrand \n"},{"uri":"/FolAutomReas/reference/folautomreas-eqelim.html#bpuremeson","title":"Eqelim.bpuremeson","content":"Eqelim.bpuremeson \nbpuremeson \n"},{"uri":"/FolAutomReas/reference/folautomreas-eqelim.html#bmeson","title":"Eqelim.bmeson","content":"Eqelim.bmeson \nbmeson \n"},{"uri":"/FolAutomReas/reference/folautomreas-eqelim.html#emeson","title":"Eqelim.emeson","content":"Eqelim.emeson \nemeson \n"},{"uri":"/FolAutomReas/reference/folautomreas-equal.html","title":"Equal","content":"Equal \n \nEqual.is_eq \nis_eq \nEqual.mk_eq \nmk_eq \nEqual.dest_eq \ndest_eq \nEqual.lhs \nlhs \nEqual.rhs \nrhs \nEqual.predicates \npredicates \nEqual.function_congruence \nfunction_congruence \nEqual.predicate_congruence \npredicate_congruence \nEqual.equivalence_axioms \nequivalence_axioms \nEqual.equalitize \nequalitize"},{"uri":"/FolAutomReas/reference/folautomreas-equal.html#is_eq","title":"Equal.is_eq","content":"Equal.is_eq \nis_eq \n"},{"uri":"/FolAutomReas/reference/folautomreas-equal.html#mk_eq","title":"Equal.mk_eq","content":"Equal.mk_eq \nmk_eq \n"},{"uri":"/FolAutomReas/reference/folautomreas-equal.html#dest_eq","title":"Equal.dest_eq","content":"Equal.dest_eq \ndest_eq \n"},{"uri":"/FolAutomReas/reference/folautomreas-equal.html#lhs","title":"Equal.lhs","content":"Equal.lhs \nlhs \n"},{"uri":"/FolAutomReas/reference/folautomreas-equal.html#rhs","title":"Equal.rhs","content":"Equal.rhs \nrhs \n"},{"uri":"/FolAutomReas/reference/folautomreas-equal.html#predicates","title":"Equal.predicates","content":"Equal.predicates \npredicates \n"},{"uri":"/FolAutomReas/reference/folautomreas-equal.html#function_congruence","title":"Equal.function_congruence","content":"Equal.function_congruence \nfunction_congruence \n"},{"uri":"/FolAutomReas/reference/folautomreas-equal.html#predicate_congruence","title":"Equal.predicate_congruence","content":"Equal.predicate_congruence \npredicate_congruence \n"},{"uri":"/FolAutomReas/reference/folautomreas-equal.html#equivalence_axioms","title":"Equal.equivalence_axioms","content":"Equal.equivalence_axioms \nequivalence_axioms \n"},{"uri":"/FolAutomReas/reference/folautomreas-equal.html#equalitize","title":"Equal.equalitize","content":"Equal.equalitize \nequalitize \n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html","title":"Fol","content":"Fol \n\n Basic stuff for first order logic: datatype, parsing and printing, \n semantics, syntax operations and substitution.\n  \nFol.fol \nfol \nFol.term \nterm \nFol.onformula \nonformula \nFol.is_const_name \nis_const_name \nFol.parse_atomic_term \nparse_atomic_term \nFol.parse_term \nparse_term \nFol.parset \nparset \nFol.(!!!) \n(!!!) \nFol.parse_infix_atom \nparse_infix_atom \nFol.parse_atom \nparse_atom \nFol.parse \nparse \nFol.(!!) \n(!!) \nFol.fprint_term \nfprint_term \nFol.fprint_fargs \nfprint_fargs \nFol.fprint_infix_term \nfprint_infix_term \nFol.fprintert \nfprintert \nFol.print_term \nprint_term \nFol.sprint_term \nsprint_term \nFol.fprint_atom \nfprint_atom \nFol.print_atom \nprint_atom \nFol.sprint_atom \nsprint_atom \nFol.fprint_fol_formula \nfprint_fol_formula \nFol.print_fol_formula \nprint_fol_formula \nFol.sprint_fol_formula \nsprint_fol_formula \nFol.termval \ntermval \nFol.holds \nholds \nFol.bool_interp \nbool_interp \nFol.mod_interp \nmod_interp \nFol.fvt \nfvt \nFol.var \nvar \nFol.fv \nfv \nFol.generalize \ngeneralize \nFol.tsubst \ntsubst \nFol.variant \nvariant \nFol.subst \nsubst \nFol.substq \nsubstq"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#onformula","title":"Fol.onformula","content":"Fol.onformula \nonformula \n\n Applies a subfunction \u0060f\u0060 to the top *terms*.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#is_const_name","title":"Fol.is_const_name","content":"Fol.is_const_name \nis_const_name \n\n Checks if a string is a constant term. Only numerals and the empty list constant \u0022nil\u0022 are considered as constants.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#parse_atomic_term","title":"Fol.parse_atomic_term","content":"Fol.parse_atomic_term \nparse_atomic_term \n\n Parses an atomic term.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#parse_term","title":"Fol.parse_term","content":"Fol.parse_term \nparse_term \n\n Recursive descent parser of terms built up from an atomic term parser \n by cascading instances of parse infix in order of precedence, following the \n conventions with \u0027^\u0027 coming highest and \u0027::\u0027 lowest.\n \n It takes a list of string tokens \u0060inp\u0060 and returns a pair consisting of the \n parsed term tree together with any unparsed input. \n \n In order to check whether a name is within the scope of a quanti\uFB01er, it \n takes an additional argument \u0060vs\u0060 which is the set of bound variables in \n the current scope.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#parset","title":"Fol.parset","content":"Fol.parset \nparset \n\n Parses a string into a term.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#(!!!)","title":"Fol.(!!!)","content":"Fol.(!!!) \n(!!!) \n\n A convenient operator to call \u0060parset\u0060.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#parse_infix_atom","title":"Fol.parse_infix_atom","content":"Fol.parse_infix_atom \nparse_infix_atom \n\n A special recognizer for \u0027in\uFB01x\u0027 atomic formulas like s \u003C t.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#parse_atom","title":"Fol.parse_atom","content":"Fol.parse_atom \nparse_atom \n\n Parses atomic fol formulas.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#parse","title":"Fol.parse","content":"Fol.parse \nparse \n\n Parses a fol formula\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#(!!)","title":"Fol.(!!)","content":"Fol.(!!) \n(!!) \n\n A convenient operator to call \u0060parse\u0060.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#fprint_term","title":"Fol.fprint_term","content":"Fol.fprint_term \nfprint_term \n\n Prints terms.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#fprint_fargs","title":"Fol.fprint_fargs","content":"Fol.fprint_fargs \nfprint_fargs \n\n Prints a function and its arguments.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#fprint_infix_term","title":"Fol.fprint_infix_term","content":"Fol.fprint_infix_term \nfprint_infix_term \n\n Prints an infix operation.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#fprintert","title":"Fol.fprintert","content":"Fol.fprintert \nfprintert \n\n Term printer with TextWriter.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#print_term","title":"Fol.print_term","content":"Fol.print_term \nprint_term \n\n Term printer.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#sprint_term","title":"Fol.sprint_term","content":"Fol.sprint_term \nsprint_term \n\n Return the string of the concrete syntax representation of a term.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#fprint_atom","title":"Fol.fprint_atom","content":"Fol.fprint_atom \nfprint_atom \n\n Printer of atomic fol formulas with TextWriter.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#print_atom","title":"Fol.print_atom","content":"Fol.print_atom \nprint_atom \n\n Printer of atomic fol formulas.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#sprint_atom","title":"Fol.sprint_atom","content":"Fol.sprint_atom \nsprint_atom \n\n Returns the concrete syntax representation of an atom.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#fprint_fol_formula","title":"Fol.fprint_fol_formula","content":"Fol.fprint_fol_formula \nfprint_fol_formula \n\n Printer of fol formulas with TextWriter.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#print_fol_formula","title":"Fol.print_fol_formula","content":"Fol.print_fol_formula \nprint_fol_formula \n\n Printer of fol formulas.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#sprint_fol_formula","title":"Fol.sprint_fol_formula","content":"Fol.sprint_fol_formula \nsprint_fol_formula \n\n Returns the string of the concrete syntax representation of fol formulas.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#termval","title":"Fol.termval","content":"Fol.termval \ntermval \n\n Returns the value of a term \u0060tm\u0060 in a particular \n interpretation M (\u0060domain\u0060, \u0060func\u0060, \u0060pred\u0060) and valuation \u0060v\u0060.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#holds","title":"Fol.holds","content":"Fol.holds \nholds \n\n Evaluates a fol formula \u0060fm\u0060 in the interpretation specified\n by the triplet \u0060domain\u0060, \u0060func\u0060, \u0060pred\u0060 and the variables valuation \u0060v\u0060.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#bool_interp","title":"Fol.bool_interp","content":"Fol.bool_interp \nbool_interp \n\n An interpretation \u00E0 la Boole.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#mod_interp","title":"Fol.mod_interp","content":"Fol.mod_interp \nmod_interp \n\n An arithmetic modulo \u0060n\u0060 interpretation.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#fvt","title":"Fol.fvt","content":"Fol.fvt \nfvt \n\n Returns the free variables in the term \u0060tm\u0060.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#var","title":"Fol.var","content":"Fol.var \nvar \n\n Returns all the variables in the FOL formula \u0060fm\u0060.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#fv","title":"Fol.fv","content":"Fol.fv \nfv \n\n Returns the free variables in the FOL formula \u0060fm\u0060.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#generalize","title":"Fol.generalize","content":"Fol.generalize \ngeneralize \n\n Universal closure of a formula.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#tsubst","title":"Fol.tsubst","content":"Fol.tsubst \ntsubst \n\n Substitution within terms.                                                //\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#variant","title":"Fol.variant","content":"Fol.variant \nvariant \n\n Creates a \u2018variant\u2019 of a variable name by adding prime characters to it \n until it is distinct from some given list of variables to avoid.\n \n \u0060variant \u0022x\u0022 [\u0022x\u0022; \u0022y\u0022]\u0060 returns \u0060\u0022x\u0027\u0022\u0060.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#subst","title":"Fol.subst","content":"Fol.subst \nsubst \n\n Given a substitution function \u0060sbfn\u0060 applies it to the input formula \u0060fm\u0060.\n Bound variables will be renamed if necessary to avoid capture.\n \n \u0060subst (\u0022y\u0022 |=\u003E Var \u0022x\u0022) (\u0022forall x. x = y\u0022 |\u003E parse)\u0060 returns \n \u0060\u003C\u003Cforall x\u0027. x\u0027 = x\u003E\u003E\u0060.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule.html#substq","title":"Fol.substq","content":"Fol.substq \nsubstq \n\n Checks whether there would be variable capture if the bound variable \n \u0060x\u0060 is not renamed.\n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule-fol.html","title":"fol","content":"fol \n\n Type for atomic first order formulas.\n \nfol.R \nR"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule-fol.html#R","title":"fol.R","content":"fol.R \nR \n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule-term.html","title":"term","content":"term \n\n Type for first order terms.\n \nterm.Var \nVar \nterm.Fn \nFn"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule-term.html#Var","title":"term.Var","content":"term.Var \nVar \n"},{"uri":"/FolAutomReas/reference/folautomreas-folmodule-term.html#Fn","title":"term.Fn","content":"term.Fn \nFn \n"},{"uri":"/FolAutomReas/reference/folautomreas-folderived.html","title":"Folderived","content":"Folderived \n \nFolderived.eq_sym \neq_sym \nFolderived.eq_trans \neq_trans \nFolderived.icongruence \nicongruence \nFolderived.gen_right_th \ngen_right_th \nFolderived.genimp \ngenimp \nFolderived.gen_right \ngen_right \nFolderived.exists_left_th \nexists_left_th \nFolderived.exists_left \nexists_left \nFolderived.subspec \nsubspec \nFolderived.subalpha \nsubalpha \nFolderived.isubst \nisubst \nFolderived.alpha \nalpha \nFolderived.ispec \nispec \nFolderived.spec \nspec"},{"uri":"/FolAutomReas/reference/folautomreas-folderived.html#eq_sym","title":"Folderived.eq_sym","content":"Folderived.eq_sym \neq_sym \n"},{"uri":"/FolAutomReas/reference/folautomreas-folderived.html#eq_trans","title":"Folderived.eq_trans","content":"Folderived.eq_trans \neq_trans \n"},{"uri":"/FolAutomReas/reference/folautomreas-folderived.html#icongruence","title":"Folderived.icongruence","content":"Folderived.icongruence \nicongruence \n"},{"uri":"/FolAutomReas/reference/folautomreas-folderived.html#gen_right_th","title":"Folderived.gen_right_th","content":"Folderived.gen_right_th \ngen_right_th \n"},{"uri":"/FolAutomReas/reference/folautomreas-folderived.html#genimp","title":"Folderived.genimp","content":"Folderived.genimp \ngenimp \n"},{"uri":"/FolAutomReas/reference/folautomreas-folderived.html#gen_right","title":"Folderived.gen_right","content":"Folderived.gen_right \ngen_right \n"},{"uri":"/FolAutomReas/reference/folautomreas-folderived.html#exists_left_th","title":"Folderived.exists_left_th","content":"Folderived.exists_left_th \nexists_left_th \n"},{"uri":"/FolAutomReas/reference/folautomreas-folderived.html#exists_left","title":"Folderived.exists_left","content":"Folderived.exists_left \nexists_left \n"},{"uri":"/FolAutomReas/reference/folautomreas-folderived.html#subspec","title":"Folderived.subspec","content":"Folderived.subspec \nsubspec \n"},{"uri":"/FolAutomReas/reference/folautomreas-folderived.html#subalpha","title":"Folderived.subalpha","content":"Folderived.subalpha \nsubalpha \n"},{"uri":"/FolAutomReas/reference/folautomreas-folderived.html#isubst","title":"Folderived.isubst","content":"Folderived.isubst \nisubst \n"},{"uri":"/FolAutomReas/reference/folautomreas-folderived.html#alpha","title":"Folderived.alpha","content":"Folderived.alpha \nalpha \n"},{"uri":"/FolAutomReas/reference/folautomreas-folderived.html#ispec","title":"Folderived.ispec","content":"Folderived.ispec \nispec \n"},{"uri":"/FolAutomReas/reference/folautomreas-folderived.html#spec","title":"Folderived.spec","content":"Folderived.spec \nspec \n"},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html","title":"Formulas","content":"Formulas \n\n Polymorphic type of formulas with parser and printer. \n  \nFormulas.formula\u003C\u0027a\u003E \nformula\u003C\u0027a\u003E \nFormulas.parse_atomic_formula \nparse_atomic_formula \nFormulas.parse_quant \nparse_quant \nFormulas.parse_formula \nparse_formula \nFormulas.fbracket \nfbracket \nFormulas.strip_quant \nstrip_quant \nFormulas.fprint_formula \nfprint_formula \nFormulas.fprint_qformula \nfprint_qformula \nFormulas.print_formula \nprint_formula \nFormulas.sprint_formula \nsprint_formula \nFormulas.print_qformula \nprint_qformula \nFormulas.sprint_qformula \nsprint_qformula \nFormulas.mk_and \nmk_and \nFormulas.mk_or \nmk_or \nFormulas.mk_imp \nmk_imp \nFormulas.mk_iff \nmk_iff \nFormulas.mk_forall \nmk_forall \nFormulas.mk_exists \nmk_exists \nFormulas.dest_iff \ndest_iff \nFormulas.dest_and \ndest_and \nFormulas.conjuncts \nconjuncts \nFormulas.dest_or \ndest_or \nFormulas.disjuncts \ndisjuncts \nFormulas.dest_imp \ndest_imp \nFormulas.antecedent \nantecedent \nFormulas.consequent \nconsequent \nFormulas.onatoms \nonatoms \nFormulas.overatoms \noveratoms \nFormulas.atom_union \natom_union"},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html#parse_atomic_formula","title":"Formulas.parse_atomic_formula","content":"Formulas.parse_atomic_formula \nparse_atomic_formula \nParses atomic formulas. \n\n It attempts to parse an atomic formula as a term followed by an infix \n predicate symbol and only if that fails proceed to considering other \n kinds of formulas.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html#parse_quant","title":"Formulas.parse_quant","content":"Formulas.parse_quant \nparse_quant \n\n Parses quantified formulas.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html#parse_formula","title":"Formulas.parse_formula","content":"Formulas.parse_formula \nparse_formula \n\n Recursive descent parser of polymorphic formulas built up from an \n atomic formula parser by cascading instances of parse infix in order of \n precedence, following the conventions with \u003Ccode\u003E/\\\u003C/code\u003E coming highest and \n \u003Ccode\u003E\u0026lt;=\u0026gt;\u003C/code\u003E lowest.\n  \n\n It takes a list of string tokens \u003Ccode\u003Einp\u003C/code\u003E and in order to check \n whether a name is within the scope of a quantifier, it takes an \n additional argument \u003Ccode\u003Evs\u003C/code\u003E which is the set of bound variables in \n the current scope.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html#fbracket","title":"Formulas.fbracket","content":"Formulas.fbracket \nfbracket \n\n Modifies a basic printer to have a kind of boxing \u0027wrapped\u0027 around it.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html#strip_quant","title":"Formulas.strip_quant","content":"Formulas.strip_quant \nstrip_quant \n\n Formula destructor for quantified formulas.\n  \n\n It breaks apart a quantified formula \\(\\forall xy\\ldots z.\\ p\\) into \n a pair of the list of its quantified variables and body \n \\(([x,y,\\ldots,z], p)\\).\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html#fprint_formula","title":"Formulas.fprint_formula","content":"Formulas.fprint_formula \nfprint_formula \n\n Printing parametrized by a function \u003Ccode\u003Epfn\u003C/code\u003E to print atoms.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html#fprint_qformula","title":"Formulas.fprint_qformula","content":"Formulas.fprint_qformula \nfprint_qformula \n\n Main toplevel printer. It just adds the guillemot-style quotations \n round the formula so that it looks like the quoted formulas we parse.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html#print_formula","title":"Formulas.print_formula","content":"Formulas.print_formula \nprint_formula \n\n Prints a formula \u003Ccode\u003Efm\u003C/code\u003E using a function \u003Ccode\u003Epfn\u003C/code\u003E to print atoms.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html#sprint_formula","title":"Formulas.sprint_formula","content":"Formulas.sprint_formula \nsprint_formula \n\n Returns a string representation of a formula \u003Ccode\u003Efm\u003C/code\u003E using a function \n \u003Ccode\u003Epfn\u003C/code\u003E to print atoms.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html#print_qformula","title":"Formulas.print_qformula","content":"Formulas.print_qformula \nprint_qformula \n\n Prints a formula \u003Ccode\u003Efm\u003C/code\u003E using a function \u003Ccode\u003Epfn\u003C/code\u003E to print atoms.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html#sprint_qformula","title":"Formulas.sprint_qformula","content":"Formulas.sprint_qformula \nsprint_qformula \n\n Returns a string representation of a formula \u003Ccode\u003Efm\u003C/code\u003E using a function \n \u003Ccode\u003Epfn\u003C/code\u003E to print atoms.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html#mk_and","title":"Formulas.mk_and","content":"Formulas.mk_and \nmk_and \n\n Constructs a conjunction.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html#mk_or","title":"Formulas.mk_or","content":"Formulas.mk_or \nmk_or \n\n Constructs a disjunction.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html#mk_imp","title":"Formulas.mk_imp","content":"Formulas.mk_imp \nmk_imp \n\n Constructs an implication.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html#mk_iff","title":"Formulas.mk_iff","content":"Formulas.mk_iff \nmk_iff \n\n Constructs a logical equivalence.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html#mk_forall","title":"Formulas.mk_forall","content":"Formulas.mk_forall \nmk_forall \n\n Constructs a universal quantification.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html#mk_exists","title":"Formulas.mk_exists","content":"Formulas.mk_exists \nmk_exists \n\n Constructs an existential quantification.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html#dest_iff","title":"Formulas.dest_iff","content":"Formulas.dest_iff \ndest_iff \n\n Formula destructor for logical equivalences.\n  \n\n It breaks apart a logical equivalence \\(p \\Leftrightarrow q\\) into \n the pair of its members \\((p, q)\\).\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html#dest_and","title":"Formulas.dest_and","content":"Formulas.dest_and \ndest_and \n\n Formula destructor for conjunctions.\n  \n\n It breaks apart a conjunction \\(p \\land q\\) into \n the pair of its conjuncts \\((p, q)\\).\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html#conjuncts","title":"Formulas.conjuncts","content":"Formulas.conjuncts \nconjuncts \n\n Formula destructor for repeated conjunctions.\n  \n\n Recursively breaks apart repeated conjunctions \n \\(p \\land q \\land r \\cdots \\) into the list of all the conjuncts \n \\([p, q, r, \\ldots]\\).\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html#dest_or","title":"Formulas.dest_or","content":"Formulas.dest_or \ndest_or \n\n Formula destructor for disjunctions.\n  \n\n It breaks apart a disjunction \\(p \\lor q\\) into \n the pair of its conjuncts \\((p, q)\\).\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html#disjuncts","title":"Formulas.disjuncts","content":"Formulas.disjuncts \ndisjuncts \n\n Formula destructor for repeated disjunctions.\n  \n\n Recursively breaks apart repeated disjunctions \n \\(p \\lor q \\lor r \\cdots \\) into the list of all the disjuncts \n \\([p, q, r, \\ldots]\\).\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html#dest_imp","title":"Formulas.dest_imp","content":"Formulas.dest_imp \ndest_imp \n\n Formula destructor for implications.\n  \n\n It breaks apart an implications \\(p \\Rightarrow q\\) into \n the pair of its antecedent and consequent \\((p, q)\\). \n \n See also: \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-formulas.html\u0022\u003EFormulas.antecedent\u003C/a\u003E, \n \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-formulas.html\u0022\u003EFormulas.consequent\u003C/a\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html#antecedent","title":"Formulas.antecedent","content":"Formulas.antecedent \nantecedent \n\n Returns the antecedent of an implication.\n  \n\n See also: \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-formulas.html\u0022\u003EFormulas.dest_imp\u003C/a\u003E, \n \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-formulas.html\u0022\u003EFormulas.consequent\u003C/a\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html#consequent","title":"Formulas.consequent","content":"Formulas.consequent \nconsequent \n\n Returns the consequent of an implication.\n  \n\n See also: \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-formulas.html\u0022\u003EFormulas.dest_imp\u003C/a\u003E, \n \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-formulas.html\u0022\u003EFormulas.antecedent\u003C/a\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html#onatoms","title":"Formulas.onatoms","content":"Formulas.onatoms \nonatoms \n\n Applies a function \u003Ccode\u003Ef\u003C/code\u003E to all the attributes of the atoms in a \n formula \u003Ccode\u003Efm\u003C/code\u003E, but otherwise leaves the structure unchanged. It can \n be used, for example, to perform systematic replacement of one \n particular atomic proposition by another formula.\n  \n\n It is for \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-formulas-formula-1.html\u0022\u003Eformula\u003C/a\u003E what \n \u003Ca href=\u0022https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-listmodule#map\u0022\u003EListModule.map\u003C/a\u003E is \n for \u003Ca href=\u0022https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-list-1\u0022\u003Elist\u003C/a\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html#overatoms","title":"Formulas.overatoms","content":"Formulas.overatoms \noveratoms \nApplies a function to each attributes of formula\u0027s atoms, \n threading an accumulator argument through the computation. Take the \n third argument, and apply the function to it and the attribute of the \n first atom of the formula. Then feed this result into the function \n along with the second atom and so on. Return the final result. If the \n input function is \u003Ccode\u003Ef\u003C/code\u003E and the atoms are \u003Ccode\u003EAtom i0...Atom iN\u003C/code\u003E \n then computes \u003Ccode\u003Ef (... (f s i0) i1 ...) iN\u003C/code\u003E.\n  \n\n It is for \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-formulas-formula-1.html\u0022\u003Eformula\u003C/a\u003E what \n \u003Ca href=\u0022https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-listmodule#fold\u0022\u003EListModule.fold\u003C/a\u003E is \n for \u003Ca href=\u0022https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-list-1\u0022\u003Elist\u003C/a\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas.html#atom_union","title":"Formulas.atom_union","content":"Formulas.atom_union \natom_union \n\n For each attributes of the formula\u0027s atoms, applies the given function. \n Concatenates all the results and converts them to a set to remove \n duplicates.\n  \n\n Except for the final removing of duplicates, it is for \n \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-formulas-formula-1.html\u0022\u003Eformula\u003C/a\u003E what \n \u003Ca href=\u0022https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-listmodule#collect\u0022\u003EListModule.collect\u003C/a\u003E is \n for \u003Ca href=\u0022https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-list-1\u0022\u003Elist\u003C/a\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas-formula-1.html","title":"formula\u003C\u0027a\u003E","content":"formula\u003C\u0027a\u003E \n\n Abstract syntax tree of polymorphic type of formulas.\n  \nformula\u003C\u0027a\u003E.False \nFalse \nformula\u003C\u0027a\u003E.True \nTrue \nformula\u003C\u0027a\u003E.Atom \nAtom \nformula\u003C\u0027a\u003E.Not \nNot \nformula\u003C\u0027a\u003E.And \nAnd \nformula\u003C\u0027a\u003E.Or \nOr \nformula\u003C\u0027a\u003E.Imp \nImp \nformula\u003C\u0027a\u003E.Iff \nIff \nformula\u003C\u0027a\u003E.Forall \nForall \nformula\u003C\u0027a\u003E.Exists \nExists"},{"uri":"/FolAutomReas/reference/folautomreas-formulas-formula-1.html#False","title":"formula\u003C\u0027a\u003E.False","content":"formula\u003C\u0027a\u003E.False \nFalse \n\n Constant formula \u003Ccode\u003EFalse\u003C/code\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas-formula-1.html#True","title":"formula\u003C\u0027a\u003E.True","content":"formula\u003C\u0027a\u003E.True \nTrue \n\n Constant formula \u003Ccode\u003ETrue\u003C/code\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas-formula-1.html#Atom","title":"formula\u003C\u0027a\u003E.Atom","content":"formula\u003C\u0027a\u003E.Atom \nAtom \n\n Atomic formula.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas-formula-1.html#Not","title":"formula\u003C\u0027a\u003E.Not","content":"formula\u003C\u0027a\u003E.Not \nNot \n\n Negation.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas-formula-1.html#And","title":"formula\u003C\u0027a\u003E.And","content":"formula\u003C\u0027a\u003E.And \nAnd \n\n Conjunction.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas-formula-1.html#Or","title":"formula\u003C\u0027a\u003E.Or","content":"formula\u003C\u0027a\u003E.Or \nOr \n\n Disjunction.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas-formula-1.html#Imp","title":"formula\u003C\u0027a\u003E.Imp","content":"formula\u003C\u0027a\u003E.Imp \nImp \n\n Implication.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas-formula-1.html#Iff","title":"formula\u003C\u0027a\u003E.Iff","content":"formula\u003C\u0027a\u003E.Iff \nIff \n\n Logical Equivalence.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas-formula-1.html#Forall","title":"formula\u003C\u0027a\u003E.Forall","content":"formula\u003C\u0027a\u003E.Forall \nForall \n\n Universally quantified formula.\n "},{"uri":"/FolAutomReas/reference/folautomreas-formulas-formula-1.html#Exists","title":"formula\u003C\u0027a\u003E.Exists","content":"formula\u003C\u0027a\u003E.Exists \nExists \n\n Existentially quantified formula.\n "},{"uri":"/FolAutomReas/reference/folautomreas-geom.html","title":"Geom","content":"Geom \n \nGeom.coordinations \ncoordinations \nGeom.coordinate \ncoordinate \nGeom.invariant \ninvariant \nGeom.invariant_under_translation \ninvariant_under_translation \nGeom.invariant_under_rotation \ninvariant_under_rotation \nGeom.originate \noriginate \nGeom.invariant_under_scaling \ninvariant_under_scaling \nGeom.invariant_under_shearing \ninvariant_under_shearing \nGeom.pprove \npprove \nGeom.triangulate \ntriangulate \nGeom.wu \nwu"},{"uri":"/FolAutomReas/reference/folautomreas-geom.html#coordinations","title":"Geom.coordinations","content":"Geom.coordinations \ncoordinations \n"},{"uri":"/FolAutomReas/reference/folautomreas-geom.html#coordinate","title":"Geom.coordinate","content":"Geom.coordinate \ncoordinate \n"},{"uri":"/FolAutomReas/reference/folautomreas-geom.html#invariant","title":"Geom.invariant","content":"Geom.invariant \ninvariant \n"},{"uri":"/FolAutomReas/reference/folautomreas-geom.html#invariant_under_translation","title":"Geom.invariant_under_translation","content":"Geom.invariant_under_translation \ninvariant_under_translation \n"},{"uri":"/FolAutomReas/reference/folautomreas-geom.html#invariant_under_rotation","title":"Geom.invariant_under_rotation","content":"Geom.invariant_under_rotation \ninvariant_under_rotation \n"},{"uri":"/FolAutomReas/reference/folautomreas-geom.html#originate","title":"Geom.originate","content":"Geom.originate \noriginate \n"},{"uri":"/FolAutomReas/reference/folautomreas-geom.html#invariant_under_scaling","title":"Geom.invariant_under_scaling","content":"Geom.invariant_under_scaling \ninvariant_under_scaling \n"},{"uri":"/FolAutomReas/reference/folautomreas-geom.html#invariant_under_shearing","title":"Geom.invariant_under_shearing","content":"Geom.invariant_under_shearing \ninvariant_under_shearing \n"},{"uri":"/FolAutomReas/reference/folautomreas-geom.html#pprove","title":"Geom.pprove","content":"Geom.pprove \npprove \n"},{"uri":"/FolAutomReas/reference/folautomreas-geom.html#triangulate","title":"Geom.triangulate","content":"Geom.triangulate \ntriangulate \n"},{"uri":"/FolAutomReas/reference/folautomreas-geom.html#wu","title":"Geom.wu","content":"Geom.wu \nwu \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html","title":"Grobner","content":"Grobner \n \nGrobner.mmul \nmmul \nGrobner.mdiv \nmdiv \nGrobner.mlcm \nmlcm \nGrobner.morder_lt \nmorder_lt \nGrobner.mpoly_mmul \nmpoly_mmul \nGrobner.mpoly_neg \nmpoly_neg \nGrobner.mpoly_const \nmpoly_const \nGrobner.mpoly_var \nmpoly_var \nGrobner.mpoly_add \nmpoly_add \nGrobner.mpoly_sub \nmpoly_sub \nGrobner.mpoly_mul \nmpoly_mul \nGrobner.mpoly_pow \nmpoly_pow \nGrobner.mpoly_inv \nmpoly_inv \nGrobner.mpoly_div \nmpoly_div \nGrobner.mpolynate \nmpolynate \nGrobner.mpolyatom \nmpolyatom \nGrobner.reduce1 \nreduce1 \nGrobner.reduceb \nreduceb \nGrobner.reduce \nreduce \nGrobner.spoly \nspoly \nGrobner.grobner \ngrobner \nGrobner.groebner \ngroebner \nGrobner.rabinowitsch \nrabinowitsch \nGrobner.grobner_trivial \ngrobner_trivial \nGrobner.grobner_decide \ngrobner_decide \nGrobner.term_of_varpow \nterm_of_varpow \nGrobner.term_of_varpows \nterm_of_varpows \nGrobner.term_of_monomial \nterm_of_monomial \nGrobner.term_of_poly \nterm_of_poly \nGrobner.grobner_basis \ngrobner_basis"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#mmul","title":"Grobner.mmul","content":"Grobner.mmul \nmmul \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#mdiv","title":"Grobner.mdiv","content":"Grobner.mdiv \nmdiv \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#mlcm","title":"Grobner.mlcm","content":"Grobner.mlcm \nmlcm \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#morder_lt","title":"Grobner.morder_lt","content":"Grobner.morder_lt \nmorder_lt \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#mpoly_mmul","title":"Grobner.mpoly_mmul","content":"Grobner.mpoly_mmul \nmpoly_mmul \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#mpoly_neg","title":"Grobner.mpoly_neg","content":"Grobner.mpoly_neg \nmpoly_neg \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#mpoly_const","title":"Grobner.mpoly_const","content":"Grobner.mpoly_const \nmpoly_const \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#mpoly_var","title":"Grobner.mpoly_var","content":"Grobner.mpoly_var \nmpoly_var \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#mpoly_add","title":"Grobner.mpoly_add","content":"Grobner.mpoly_add \nmpoly_add \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#mpoly_sub","title":"Grobner.mpoly_sub","content":"Grobner.mpoly_sub \nmpoly_sub \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#mpoly_mul","title":"Grobner.mpoly_mul","content":"Grobner.mpoly_mul \nmpoly_mul \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#mpoly_pow","title":"Grobner.mpoly_pow","content":"Grobner.mpoly_pow \nmpoly_pow \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#mpoly_inv","title":"Grobner.mpoly_inv","content":"Grobner.mpoly_inv \nmpoly_inv \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#mpoly_div","title":"Grobner.mpoly_div","content":"Grobner.mpoly_div \nmpoly_div \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#mpolynate","title":"Grobner.mpolynate","content":"Grobner.mpolynate \nmpolynate \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#mpolyatom","title":"Grobner.mpolyatom","content":"Grobner.mpolyatom \nmpolyatom \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#reduce1","title":"Grobner.reduce1","content":"Grobner.reduce1 \nreduce1 \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#reduceb","title":"Grobner.reduceb","content":"Grobner.reduceb \nreduceb \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#reduce","title":"Grobner.reduce","content":"Grobner.reduce \nreduce \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#spoly","title":"Grobner.spoly","content":"Grobner.spoly \nspoly \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#grobner","title":"Grobner.grobner","content":"Grobner.grobner \ngrobner \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#groebner","title":"Grobner.groebner","content":"Grobner.groebner \ngroebner \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#rabinowitsch","title":"Grobner.rabinowitsch","content":"Grobner.rabinowitsch \nrabinowitsch \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#grobner_trivial","title":"Grobner.grobner_trivial","content":"Grobner.grobner_trivial \ngrobner_trivial \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#grobner_decide","title":"Grobner.grobner_decide","content":"Grobner.grobner_decide \ngrobner_decide \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#term_of_varpow","title":"Grobner.term_of_varpow","content":"Grobner.term_of_varpow \nterm_of_varpow \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#term_of_varpows","title":"Grobner.term_of_varpows","content":"Grobner.term_of_varpows \nterm_of_varpows \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#term_of_monomial","title":"Grobner.term_of_monomial","content":"Grobner.term_of_monomial \nterm_of_monomial \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#term_of_poly","title":"Grobner.term_of_poly","content":"Grobner.term_of_poly \nterm_of_poly \n"},{"uri":"/FolAutomReas/reference/folautomreas-grobner.html#grobner_basis","title":"Grobner.grobner_basis","content":"Grobner.grobner_basis \ngrobner_basis \n"},{"uri":"/FolAutomReas/reference/folautomreas-herbrand.html","title":"Herbrand","content":"Herbrand \n\n Relation between FOL and propositional logic; Herbrand theorem.\n  \nHerbrand.pholds \npholds \nHerbrand.herbfuns \nherbfuns \nHerbrand.groundterms \ngroundterms \nHerbrand.groundtuples \ngroundtuples \nHerbrand.herbloop \nherbloop \nHerbrand.gilmore_loop \ngilmore_loop \nHerbrand.gilmore \ngilmore \nHerbrand.dp_mfn \ndp_mfn \nHerbrand.dp_loop \ndp_loop \nHerbrand.davisputnam \ndavisputnam \nHerbrand.dp_refine \ndp_refine \nHerbrand.dp_refine_loop \ndp_refine_loop \nHerbrand.davisputnam002 \ndavisputnam002"},{"uri":"/FolAutomReas/reference/folautomreas-herbrand.html#pholds","title":"Herbrand.pholds","content":"Herbrand.pholds \npholds \n\n A variant of the notion of propositional evaluation \u0060eval\u0060 where the \n input propositional valuation \u0060d\u0060 maps atomic formulas themselves to \n truth values.\n \n It determines if the input formula \u0060fm\u0060 holds in the sense of propositional \n logic for this notion of valuation.\n \n \u0060pholds (function Atom (R (\u0022P\u0022, [Var \u0022x\u0022])) -\u003E true) (parse \u0022P(x)\u0022)\u0060\n returns \u0060true\u0060\n"},{"uri":"/FolAutomReas/reference/folautomreas-herbrand.html#herbfuns","title":"Herbrand.herbfuns","content":"Herbrand.herbfuns \nherbfuns \n\n Gets the constants for Herbrand base, adding nullary one if necessary. \n"},{"uri":"/FolAutomReas/reference/folautomreas-herbrand.html#groundterms","title":"Herbrand.groundterms","content":"Herbrand.groundterms \ngroundterms \n\n Enumerates all ground terms involving \u0060n\u0060 functions.\n \n If \u0060n\u0060 = 0, it returns the constant terms, otherwise tries all possible \n functions.\n \n \u0060groundterms [0;1] [(f,1);(g,2)] 0\u0060 returns \u0060[0,1]\u0060.\n \n \u0060groundterms [0;1] [(f,1);(g,2)] 1\u0060 returns \u0060[f(0);f(1);g(0,0);g(0,1);g...]\u0060\n \n \u0060groundterms [0;1] [(f,1);(g,1)] 2\u0060 returns \u0060[f(f(0));...;f(g(0,0));...]\u0060\n"},{"uri":"/FolAutomReas/reference/folautomreas-herbrand.html#groundtuples","title":"Herbrand.groundtuples","content":"Herbrand.groundtuples \ngroundtuples \n\n generates all \u0060m\u0060-tuples of ground terms involving (in total) \u0060n\u0060 functions.\n \n \u0060groundtuples [0] [(f,1)] 1 1\u0060 returns \u0060[[f(0)]]\u0060\n \n \u0060groundtuples [0] [(f,1)] 1 2\u0060 returns \u0060[[0;f(0)]; [f(0);0]]\u0060\n"},{"uri":"/FolAutomReas/reference/folautomreas-herbrand.html#herbloop","title":"Herbrand.herbloop","content":"Herbrand.herbloop \nherbloop \n\n A generic function to be used with different \u0027herbrand procedures\u0027.\n \n It tests larger and larger conjunctions of ground instances for \n unsatisfiability, iterating modifier \u0060mfn\u0060 over ground terms \n till \u0060tfn\u0060 fails. \n "},{"uri":"/FolAutomReas/reference/folautomreas-herbrand.html#gilmore_loop","title":"Herbrand.gilmore_loop","content":"Herbrand.gilmore_loop \ngilmore_loop \n\n In the specific case of the gilmore procedure, the generic herbrand loop \n \u0060herbloop\u0060 is called with the initial formula \u0060fl0\u0060 and the ground \n instances so far \u0060fl\u0060 are maintained in a DNF list representation and the \n modification function applies the instantiation to the starting formula \n and combines the DNFs by distribution.\n"},{"uri":"/FolAutomReas/reference/folautomreas-herbrand.html#gilmore","title":"Herbrand.gilmore","content":"Herbrand.gilmore \ngilmore \n\n Tests an input fol formula \u0060fm\u0060 for validity based on a gilmore-like \n procedure.\n \n The initial formula is generalized, negated and Skolemized, then the \n specific herbrand loop for the gilmore procedure is called to test for \n the unsatisfiability of the transformed formula.\n \n If the test terminates, it reports how many ground instances where tried.\n"},{"uri":"/FolAutomReas/reference/folautomreas-herbrand.html#dp_mfn","title":"Herbrand.dp_mfn","content":"Herbrand.dp_mfn \ndp_mfn \n\n The modification function (specific to the Davis-Putnam procedure), that \n augments the ground instances with a new one.\n "},{"uri":"/FolAutomReas/reference/folautomreas-herbrand.html#dp_loop","title":"Herbrand.dp_loop","content":"Herbrand.dp_loop \ndp_loop \n\n In the specific case of the davis-putnam procedure, the generic \n herbrand loop \u0060herbloop\u0060 is called with the initial formula \u0060fl0\u0060 \n and the ground instances so far \u0060fl\u0060 are maintained in a CNF list \n representation and each time we incorporate a new instance, we check for \n unsatisfiability using \u0060dpll\u0060.\n"},{"uri":"/FolAutomReas/reference/folautomreas-herbrand.html#davisputnam","title":"Herbrand.davisputnam","content":"Herbrand.davisputnam \ndavisputnam \n\n Tests an input fol formula \u0060fm\u0060 for validity based on the Davis-Putnam \n procedure.\n \n The initial formula is generalized, negated and Skolemized, then the \n specific herbrand loop for the davis-putnam procedure is called to test for \n the unsatisfiability of the transformed formula.\n \n If the test terminates, it reports how many ground instances where tried.\n"},{"uri":"/FolAutomReas/reference/folautomreas-herbrand.html#dp_refine","title":"Herbrand.dp_refine","content":"Herbrand.dp_refine \ndp_refine \n\n Auxiliary function to redefine the Davis-Putnam procedure to run through \n the list of possibly-needed instances \u0060dunno\u0060, putting them onto the list \n of needed ones \u0060need\u0060 only if the other instances are satisfiable.\n"},{"uri":"/FolAutomReas/reference/folautomreas-herbrand.html#dp_refine_loop","title":"Herbrand.dp_refine_loop","content":"Herbrand.dp_refine_loop \ndp_refine_loop \n"},{"uri":"/FolAutomReas/reference/folautomreas-herbrand.html#davisputnam002","title":"Herbrand.davisputnam002","content":"Herbrand.davisputnam002 \ndavisputnam002 \n\n Tests an input fol formula \u0060fm\u0060 for validity based on the Davis-Putnam \n procedure redefined to run through the list of possibly-needed \n instances, putting them onto the list of needed ones only if \n the other instances are satisfiable.\n"},{"uri":"/FolAutomReas/reference/folautomreas-interpolation.html","title":"Interpolation","content":"Interpolation \n \nInterpolation.pinterpolate \npinterpolate \nInterpolation.urinterpolate \nurinterpolate \nInterpolation.toptermt \ntoptermt \nInterpolation.topterms \ntopterms \nInterpolation.uinterpolate \nuinterpolate \nInterpolation.cinterpolate \ncinterpolate \nInterpolation.interpolate \ninterpolate \nInterpolation.einterpolate \neinterpolate"},{"uri":"/FolAutomReas/reference/folautomreas-interpolation.html#pinterpolate","title":"Interpolation.pinterpolate","content":"Interpolation.pinterpolate \npinterpolate \n"},{"uri":"/FolAutomReas/reference/folautomreas-interpolation.html#urinterpolate","title":"Interpolation.urinterpolate","content":"Interpolation.urinterpolate \nurinterpolate \n"},{"uri":"/FolAutomReas/reference/folautomreas-interpolation.html#toptermt","title":"Interpolation.toptermt","content":"Interpolation.toptermt \ntoptermt \n"},{"uri":"/FolAutomReas/reference/folautomreas-interpolation.html#topterms","title":"Interpolation.topterms","content":"Interpolation.topterms \ntopterms \n"},{"uri":"/FolAutomReas/reference/folautomreas-interpolation.html#uinterpolate","title":"Interpolation.uinterpolate","content":"Interpolation.uinterpolate \nuinterpolate \n"},{"uri":"/FolAutomReas/reference/folautomreas-interpolation.html#cinterpolate","title":"Interpolation.cinterpolate","content":"Interpolation.cinterpolate \ncinterpolate \n"},{"uri":"/FolAutomReas/reference/folautomreas-interpolation.html#interpolate","title":"Interpolation.interpolate","content":"Interpolation.interpolate \ninterpolate \n"},{"uri":"/FolAutomReas/reference/folautomreas-interpolation.html#einterpolate","title":"Interpolation.einterpolate","content":"Interpolation.einterpolate \neinterpolate \n"},{"uri":"/FolAutomReas/reference/folautomreas-intro.html","title":"Intro","content":"Intro \nA simple algebraic expressions example to demonstrate the basic \n concepts of abstract syntax tree, symbolic computation, parsing and \n prettyprinting.\n  \nIntro.expression \nexpression \nIntro.simplify1 \nsimplify1 \nIntro.simplify \nsimplify \nIntro.parse_atom \nparse_atom \nIntro.parse_product \nparse_product \nIntro.parse_expression \nparse_expression \nIntro.parse_exp \nparse_exp \nIntro.string_of_exp_naive \nstring_of_exp_naive \nIntro.string_of_exp \nstring_of_exp \nIntro.print_exp \nprint_exp \nIntro.sprint_exp \nsprint_exp"},{"uri":"/FolAutomReas/reference/folautomreas-intro.html#simplify1","title":"Intro.simplify1","content":"Intro.simplify1 \nsimplify1 \n\n Simplifies an algebraic expression at the first level.\n  \n\n This is an example of symbolic computation.\n \n It applies the following transformation rules\n \u003Cul\u003E\n  \u003Cli\u003E\n    \u003Cc\u003EConst 0 * Var x\u003C/c\u003E, \u003Cc\u003EVar x * Const 0\u003C/c\u003E \\(\\longrightarrow\\)\n \u003Cc\u003EConst 0\u003C/c\u003E\u003C/li\u003E\n  \u003Cli\u003E\n    \u003Cc\u003EConst 0 \u002B Var x\u003C/c\u003E, \u003Cc\u003EVar x \u002B Const 0\u003C/c\u003E, \u003Cc\u003EConst 1 * Var x\u003C/c\u003E, \n \u003Cc\u003EVar x * Const 1\u003C/c\u003E \\(\\longrightarrow\\) \u003Cc\u003E Var x\u003C/c\u003E\u003C/li\u003E\n  \u003Cli\u003E\n    \u003Cc\u003EConst m \u002B Const n\u003C/c\u003E \\(\\longrightarrow\\) \u003Cc\u003EConst (m\u002Bn)\u003C/c\u003E\u003C/li\u003E\n  \u003Cli\u003E\n    \u003Cc\u003EConst m * Const n\u003C/c\u003E \\(\\longrightarrow\\) \u003Cc\u003EConst (m*n)\u003C/c\u003E\u003C/li\u003E\n\u003C/ul\u003E\n \n This function applies the rules only if they are applicable directly at \n the first level of the expression\u0027s structure. It is an auxiliary \n function used to define the complete function \n \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-intro.html#simplify\u0022\u003EIntro.simplify\u003C/a\u003E that applies the rules at \n every level of the expression.\n "},{"uri":"/FolAutomReas/reference/folautomreas-intro.html#simplify","title":"Intro.simplify","content":"Intro.simplify \nsimplify \n\n Simplifies an algebraic expression completely.\n  \n\n Completes the work of \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-intro.html#simplify1\u0022\u003EIntro.simplify1\u003C/a\u003E.\n \n Recursively simplifies any immediate sub-expressions as much as \n possible, then applies \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-intro.html#simplify1\u0022\u003EIntro.simplify1\u003C/a\u003E \n to the result.\n "},{"uri":"/FolAutomReas/reference/folautomreas-intro.html#parse_atom","title":"Intro.parse_atom","content":"Intro.parse_atom \nparse_atom \n\n Parses an atomic expression.\n  \n\n Implements the atoms part of the expression\u0027s recursive \n descent parsing:\n \n \\begin{eqnarray*} \n  atoms \u0026 \\longrightarrow \u0026 (expression) \\\\\n        \u0026 |               \u0026 constant \\\\\n        \u0026 |               \u0026 variable \n \\end{eqnarray*}\n \n An atomic expression is either a constant, a variable or an arbitrary \n expression enclosed in brackets.\n \n See also: \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-intro.html#parse_expression\u0022\u003EIntro.parse_expression\u003C/a\u003E; \n \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-intro.html#parse_product\u0022\u003EIntro.parse_product\u003C/a\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-intro.html#parse_product","title":"Intro.parse_product","content":"Intro.parse_product \nparse_product \n\n Parses a product expression.\n  \n\n Implements the products part of the expression\u0027s recursive \n descent parsing:\n \n \\begin{eqnarray*} \n  product \u0026 \\longrightarrow \u0026 atom \\\\\n          \u0026 |               \u0026 atom * product \\\\\n \\end{eqnarray*}\n \n A product expression is a sequence of \u0027atomic expressions\u0027 (see \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-intro.html#parse_atom\u0022\u003EIntro.parse_atom\u003C/a\u003E) separated by \u003Ccode\u003E*\u003C/code\u003E.\n \n See also: \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-intro.html#parse_expression\u0022\u003EIntro.parse_expression\u003C/a\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-intro.html#parse_expression","title":"Intro.parse_expression","content":"Intro.parse_expression \nparse_expression \n\n Parses an expression.\n  \n\n Implements the addition part of the expression\u0027s recursive \n descent parsing:\n \n \\begin{eqnarray*} \n  expression \u0026 \\longrightarrow \u0026 product \\\\\n             \u0026 |               \u0026 product \u002B expression \\\\\n \\end{eqnarray*}\n \n An expression is a sequence of \u0027product expressions\u0027 (see \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-intro.html#parse_product\u0022\u003EIntro.parse_product\u003C/a\u003E) separated by \u003Ccode\u003E\u002B\u003C/code\u003E.\n \n See also: \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-intro.html#parse_atom\u0022\u003EIntro.parse_atom\u003C/a\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-intro.html#parse_exp","title":"Intro.parse_exp","content":"Intro.parse_exp \nparse_exp \n\n Parses a string into an expression.\n  \n\n See also: \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-intro.html#parse_atom\u0022\u003EIntro.parse_atom\u003C/a\u003E; \n \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-intro.html#parse_product\u0022\u003EIntro.parse_product\u003C/a\u003E; \n \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-intro.html#parse_expression\u0022\u003EIntro.parse_expression\u003C/a\u003E"},{"uri":"/FolAutomReas/reference/folautomreas-intro.html#string_of_exp_naive","title":"Intro.string_of_exp_naive","content":"Intro.string_of_exp_naive \nstring_of_exp_naive \n\n Returns a naive concrete syntax representation of an expression.\n  \n\n Reverses transformation, from abstract to concrete syntax keeping \n brackets. \n \n This is a naive version that puts brackets uniformly round each \n instance of a binary operator, which is perfectly correct but sometimes \n looks cumbersome to a human.\n \n Seealso: \n \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-intro.html#sprint_exp\u0022\u003EIntro.sprint_exp\u003C/a\u003E; \n \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-intro.html#print_exp\u0022\u003EIntro.print_exp\u003C/a\u003E;\n for clever versions.\n "},{"uri":"/FolAutomReas/reference/folautomreas-intro.html#string_of_exp","title":"Intro.string_of_exp","content":"Intro.string_of_exp \nstring_of_exp \n\n Returns a concrete syntax representation of an expression considering \n the precedence level of the operator of which the expression is an \n immediate sub-expression.\n  \n\n It is an auxiliary function used to define \n \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-intro.html#sprint_exp\u0022\u003EIntro.sprint_exp\u003C/a\u003E and \n \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-intro.html#print_exp\u0022\u003EIntro.print_exp\u003C/a\u003E.\n and to calculate whether or not additional brackets can be omitted.\n \n \u003Cp\u003E\n The allocated precedences are as follows:\n \u003C/p\u003E\u003Cul\u003E\n  \u003Cli\u003E2 to addition;\u003C/li\u003E\n  \u003Cli\u003E4 to multiplication;\u003C/li\u003E\n  \u003Cli\u003E0 at the outermost level.\u003C/li\u003E\n\u003C/ul\u003E"},{"uri":"/FolAutomReas/reference/folautomreas-intro.html#print_exp","title":"Intro.print_exp","content":"Intro.print_exp \nprint_exp \n\n Prints to the \u003Ccode\u003Estdout\u003C/code\u003E the concrete syntax representation of an \n expression.\n  \n\n Calculates the concrete syntax of an expression \u003Ccode\u003Ee\u003C/code\u003E \n removing unnecessary brackets and writes it to the \u003Ccode\u003Estdout\u003C/code\u003E. \n \n It omits the outermost brackets, and those that are implicit in rules \n for precedence or associativity.\n \n Seealso: \n \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-intro.html#string_of_exp\u0022\u003EIntro.string_of_exp\u003C/a\u003E;\n \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-intro.html#sprint_exp\u0022\u003EIntro.sprint_exp\u003C/a\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-intro.html#sprint_exp","title":"Intro.sprint_exp","content":"Intro.sprint_exp \nsprint_exp \n\n Returns the concrete syntax representation of an expression.\n  \n\n Returns a string of the concrete syntax of an expression \u003Ccode\u003Ee\u003C/code\u003E \n removing unnecessary brackets. It omits the outermost brackets, and \n those that are implicit in rules for precedence or associativity.\n \n Seealso: \n \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-intro.html#string_of_exp\u0022\u003EIntro.string_of_exp\u003C/a\u003E;\n \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-intro.html#print_exp\u0022\u003EIntro.print_exp\u003C/a\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-intro-expression.html","title":"expression","content":"expression \n\n Abstract syntax tree of algebraic expressions.\n  \nexpression.Var \nVar \nexpression.Const \nConst \nexpression.Add \nAdd \nexpression.Mul \nMul"},{"uri":"/FolAutomReas/reference/folautomreas-intro-expression.html#Var","title":"expression.Var","content":"expression.Var \nVar \n\n Variable expression.\n "},{"uri":"/FolAutomReas/reference/folautomreas-intro-expression.html#Const","title":"expression.Const","content":"expression.Const \nConst \n\n Constant expression.\n "},{"uri":"/FolAutomReas/reference/folautomreas-intro-expression.html#Add","title":"expression.Add","content":"expression.Add \nAdd \n\n Addition expression.\n "},{"uri":"/FolAutomReas/reference/folautomreas-intro-expression.html#Mul","title":"expression.Mul","content":"expression.Mul \nMul \n\n Product expression.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lcf.html","title":"Lcf","content":"Lcf \n\n Basic first order deductive system.\n                                                                     \n This is based on Tarski\u0027s trick for avoiding use of a substitution  \n primitive. It seems about the simplest possible system we could use.\n \nLcf.ProofSystem \nProofSystem \nLcf.occurs_in \noccurs_in \nLcf.free_in \nfree_in \nLcf.fprint_thm \nfprint_thm \nLcf.print_thm \nprint_thm \nLcf.sprint_thm \nsprint_thm"},{"uri":"/FolAutomReas/reference/folautomreas-lcf.html#occurs_in","title":"Lcf.occurs_in","content":"Lcf.occurs_in \noccurs_in \n\n checks whether a term s occurs as a sub-term of another term t\n"},{"uri":"/FolAutomReas/reference/folautomreas-lcf.html#free_in","title":"Lcf.free_in","content":"Lcf.free_in \nfree_in \n\n checks whether a term t occurs free in a formula fm\n"},{"uri":"/FolAutomReas/reference/folautomreas-lcf.html#fprint_thm","title":"Lcf.fprint_thm","content":"Lcf.fprint_thm \nfprint_thm \n\n Prints a theorem using a TextWriter.\n"},{"uri":"/FolAutomReas/reference/folautomreas-lcf.html#print_thm","title":"Lcf.print_thm","content":"Lcf.print_thm \nprint_thm \n\n A printer for theorems\n"},{"uri":"/FolAutomReas/reference/folautomreas-lcf.html#sprint_thm","title":"Lcf.sprint_thm","content":"Lcf.sprint_thm \nsprint_thm \n\n Theorem to string\n"},{"uri":"/FolAutomReas/reference/folautomreas-lcf-proofsystem.html","title":"ProofSystem","content":"ProofSystem \n\n The Core LCF proof system\n \n The core proof system is the minimum set of inference rules and/or axioms \n sound and complete with respect to the defined semantics.\n \nProofSystem.thm \nthm \nProofSystem.modusponens \nmodusponens \nProofSystem.gen \ngen \nProofSystem.axiom_addimp \naxiom_addimp \nProofSystem.axiom_distribimp \naxiom_distribimp \nProofSystem.axiom_doubleneg \naxiom_doubleneg \nProofSystem.axiom_allimp \naxiom_allimp \nProofSystem.axiom_impall \naxiom_impall \nProofSystem.axiom_existseq \naxiom_existseq \nProofSystem.axiom_eqrefl \naxiom_eqrefl \nProofSystem.axiom_funcong \naxiom_funcong \nProofSystem.axiom_predcong \naxiom_predcong \nProofSystem.axiom_iffimp1 \naxiom_iffimp1 \nProofSystem.axiom_iffimp2 \naxiom_iffimp2 \nProofSystem.axiom_impiff \naxiom_impiff \nProofSystem.axiom_true \naxiom_true \nProofSystem.axiom_not \naxiom_not \nProofSystem.axiom_and \naxiom_and \nProofSystem.axiom_or \naxiom_or \nProofSystem.axiom_exists \naxiom_exists \nProofSystem.concl \nconcl"},{"uri":"/FolAutomReas/reference/folautomreas-lcf-proofsystem.html#modusponens","title":"ProofSystem.modusponens","content":"ProofSystem.modusponens \nmodusponens \n\n modusponens (proper inference rule)\n \n |- p -\u003E q |- p ==\u003E |- q\n"},{"uri":"/FolAutomReas/reference/folautomreas-lcf-proofsystem.html#gen","title":"ProofSystem.gen","content":"ProofSystem.gen \ngen \n\n generalization (proper inference rule)\n \n |- p ==\u003E !x. p\n"},{"uri":"/FolAutomReas/reference/folautomreas-lcf-proofsystem.html#axiom_addimp","title":"ProofSystem.axiom_addimp","content":"ProofSystem.axiom_addimp \naxiom_addimp \n\n |- p -\u003E (q -\u003E p)\n"},{"uri":"/FolAutomReas/reference/folautomreas-lcf-proofsystem.html#axiom_distribimp","title":"ProofSystem.axiom_distribimp","content":"ProofSystem.axiom_distribimp \naxiom_distribimp \n\n |- (p -\u003E q -\u003E r) -\u003E (p -\u003E q) -\u003E (p -\u003E r)\n"},{"uri":"/FolAutomReas/reference/folautomreas-lcf-proofsystem.html#axiom_doubleneg","title":"ProofSystem.axiom_doubleneg","content":"ProofSystem.axiom_doubleneg \naxiom_doubleneg \n\n |- ((p -\u003E \u22A5) -\u003E \u22A5) -\u003E p\n"},{"uri":"/FolAutomReas/reference/folautomreas-lcf-proofsystem.html#axiom_allimp","title":"ProofSystem.axiom_allimp","content":"ProofSystem.axiom_allimp \naxiom_allimp \n\n |- (!x. p -\u003E q) -\u003E (!x. p) -\u003E (!x. q)\n"},{"uri":"/FolAutomReas/reference/folautomreas-lcf-proofsystem.html#axiom_impall","title":"ProofSystem.axiom_impall","content":"ProofSystem.axiom_impall \naxiom_impall \n\n |- p -\u003E !x. p [provided x not in FV(p)]\n"},{"uri":"/FolAutomReas/reference/folautomreas-lcf-proofsystem.html#axiom_existseq","title":"ProofSystem.axiom_existseq","content":"ProofSystem.axiom_existseq \naxiom_existseq \n\n |- (?x. x = t) [provided x not in FVT(t)]\n"},{"uri":"/FolAutomReas/reference/folautomreas-lcf-proofsystem.html#axiom_eqrefl","title":"ProofSystem.axiom_eqrefl","content":"ProofSystem.axiom_eqrefl \naxiom_eqrefl \n\n |- t = t\n"},{"uri":"/FolAutomReas/reference/folautomreas-lcf-proofsystem.html#axiom_funcong","title":"ProofSystem.axiom_funcong","content":"ProofSystem.axiom_funcong \naxiom_funcong \n\n |- s1 = t1 -\u003E ... -\u003E sn = tn -\u003E f(s1, ..., sn) = f(t1, ..., tn)\n"},{"uri":"/FolAutomReas/reference/folautomreas-lcf-proofsystem.html#axiom_predcong","title":"ProofSystem.axiom_predcong","content":"ProofSystem.axiom_predcong \naxiom_predcong \n\n |- s1 = t1 -\u003E ... -\u003E sn = tn -\u003E f(s1, ..., sn) = f(t1, ..., tn)\n"},{"uri":"/FolAutomReas/reference/folautomreas-lcf-proofsystem.html#axiom_iffimp1","title":"ProofSystem.axiom_iffimp1","content":"ProofSystem.axiom_iffimp1 \naxiom_iffimp1 \n\n |- (p \u003C-\u003E q) -\u003E p -\u003E q\n"},{"uri":"/FolAutomReas/reference/folautomreas-lcf-proofsystem.html#axiom_iffimp2","title":"ProofSystem.axiom_iffimp2","content":"ProofSystem.axiom_iffimp2 \naxiom_iffimp2 \n\n |- (p \u003C-\u003E q) -\u003E q -\u003E p\n"},{"uri":"/FolAutomReas/reference/folautomreas-lcf-proofsystem.html#axiom_impiff","title":"ProofSystem.axiom_impiff","content":"ProofSystem.axiom_impiff \naxiom_impiff \n\n |- (p -\u003E q) -\u003E (q -\u003E p) -\u003E (p \u003C-\u003E q)\n"},{"uri":"/FolAutomReas/reference/folautomreas-lcf-proofsystem.html#axiom_true","title":"ProofSystem.axiom_true","content":"ProofSystem.axiom_true \naxiom_true \n\n |- \u22A4 \u003C-\u003E (\u22A5 -\u003E \u22A5)\n"},{"uri":"/FolAutomReas/reference/folautomreas-lcf-proofsystem.html#axiom_not","title":"ProofSystem.axiom_not","content":"ProofSystem.axiom_not \naxiom_not \n\n |- ~p \u003C-\u003E (p -\u003E \u22A5)\n"},{"uri":"/FolAutomReas/reference/folautomreas-lcf-proofsystem.html#axiom_and","title":"ProofSystem.axiom_and","content":"ProofSystem.axiom_and \naxiom_and \n\n |- p /\\ q \u003C-\u003E (p -\u003E q -\u003E \u22A5) -\u003E \u22A5\n"},{"uri":"/FolAutomReas/reference/folautomreas-lcf-proofsystem.html#axiom_or","title":"ProofSystem.axiom_or","content":"ProofSystem.axiom_or \naxiom_or \n\n |- p \\/ q \u003C-\u003E ~(~p /\\ ~q)\n"},{"uri":"/FolAutomReas/reference/folautomreas-lcf-proofsystem.html#axiom_exists","title":"ProofSystem.axiom_exists","content":"ProofSystem.axiom_exists \naxiom_exists \n\n (?x. p) \u003C-\u003E ~(!x. ~p)\n"},{"uri":"/FolAutomReas/reference/folautomreas-lcf-proofsystem.html#concl","title":"ProofSystem.concl","content":"ProofSystem.concl \nconcl \n\n maps a theorem back to the formula that it proves\n"},{"uri":"/FolAutomReas/reference/folautomreas-lcf-proofsystem-thm.html","title":"thm","content":"thm \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcffol.html","title":"Lcffol","content":"Lcffol \n \nLcffol.unify_complementsf \nunify_complementsf \nLcffol.use_laterimp \nuse_laterimp \nLcffol.imp_false_rule\u0027 \nimp_false_rule\u0027 \nLcffol.imp_true_rule\u0027 \nimp_true_rule\u0027 \nLcffol.imp_front\u0027 \nimp_front\u0027 \nLcffol.add_assum\u0027 \nadd_assum\u0027 \nLcffol.eliminate_connective\u0027 \neliminate_connective\u0027 \nLcffol.spec\u0027 \nspec\u0027 \nLcffol.ex_falso\u0027 \nex_falso\u0027 \nLcffol.complits\u0027 \ncomplits\u0027 \nLcffol.deskol\u0027 \ndeskol\u0027 \nLcffol.lcftab \nlcftab \nLcffol.quantforms \nquantforms \nLcffol.skolemfuns \nskolemfuns \nLcffol.form_match \nform_match \nLcffol.lcfrefute \nlcfrefute \nLcffol.mk_skol \nmk_skol \nLcffol.simpcont \nsimpcont \nLcffol.elim_skolemvar \nelim_skolemvar \nLcffol.deskolcont \ndeskolcont \nLcffol.lcffol \nlcffol"},{"uri":"/FolAutomReas/reference/folautomreas-lcffol.html#unify_complementsf","title":"Lcffol.unify_complementsf","content":"Lcffol.unify_complementsf \nunify_complementsf \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcffol.html#use_laterimp","title":"Lcffol.use_laterimp","content":"Lcffol.use_laterimp \nuse_laterimp \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcffol.html#imp_false_rule\u0027","title":"Lcffol.imp_false_rule\u0027","content":"Lcffol.imp_false_rule\u0027 \nimp_false_rule\u0027 \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcffol.html#imp_true_rule\u0027","title":"Lcffol.imp_true_rule\u0027","content":"Lcffol.imp_true_rule\u0027 \nimp_true_rule\u0027 \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcffol.html#imp_front\u0027","title":"Lcffol.imp_front\u0027","content":"Lcffol.imp_front\u0027 \nimp_front\u0027 \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcffol.html#add_assum\u0027","title":"Lcffol.add_assum\u0027","content":"Lcffol.add_assum\u0027 \nadd_assum\u0027 \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcffol.html#eliminate_connective\u0027","title":"Lcffol.eliminate_connective\u0027","content":"Lcffol.eliminate_connective\u0027 \neliminate_connective\u0027 \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcffol.html#spec\u0027","title":"Lcffol.spec\u0027","content":"Lcffol.spec\u0027 \nspec\u0027 \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcffol.html#ex_falso\u0027","title":"Lcffol.ex_falso\u0027","content":"Lcffol.ex_falso\u0027 \nex_falso\u0027 \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcffol.html#complits\u0027","title":"Lcffol.complits\u0027","content":"Lcffol.complits\u0027 \ncomplits\u0027 \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcffol.html#deskol\u0027","title":"Lcffol.deskol\u0027","content":"Lcffol.deskol\u0027 \ndeskol\u0027 \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcffol.html#lcftab","title":"Lcffol.lcftab","content":"Lcffol.lcftab \nlcftab \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcffol.html#quantforms","title":"Lcffol.quantforms","content":"Lcffol.quantforms \nquantforms \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcffol.html#skolemfuns","title":"Lcffol.skolemfuns","content":"Lcffol.skolemfuns \nskolemfuns \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcffol.html#form_match","title":"Lcffol.form_match","content":"Lcffol.form_match \nform_match \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcffol.html#lcfrefute","title":"Lcffol.lcfrefute","content":"Lcffol.lcfrefute \nlcfrefute \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcffol.html#mk_skol","title":"Lcffol.mk_skol","content":"Lcffol.mk_skol \nmk_skol \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcffol.html#simpcont","title":"Lcffol.simpcont","content":"Lcffol.simpcont \nsimpcont \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcffol.html#elim_skolemvar","title":"Lcffol.elim_skolemvar","content":"Lcffol.elim_skolemvar \nelim_skolemvar \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcffol.html#deskolcont","title":"Lcffol.deskolcont","content":"Lcffol.deskolcont \ndeskolcont \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcffol.html#lcffol","title":"Lcffol.lcffol","content":"Lcffol.lcffol \nlcffol \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html","title":"Lcfprop","content":"Lcfprop \n \nLcfprop.imp_refl \nimp_refl \nLcfprop.imp_unduplicate \nimp_unduplicate \nLcfprop.negatef \nnegatef \nLcfprop.negativef \nnegativef \nLcfprop.add_assum \nadd_assum \nLcfprop.imp_add_assum \nimp_add_assum \nLcfprop.imp_trans \nimp_trans \nLcfprop.imp_insert \nimp_insert \nLcfprop.imp_swap \nimp_swap \nLcfprop.imp_trans_th \nimp_trans_th \nLcfprop.imp_add_concl \nimp_add_concl \nLcfprop.imp_swap_th \nimp_swap_th \nLcfprop.imp_swap2 \nimp_swap2 \nLcfprop.right_mp \nright_mp \nLcfprop.iff_imp1 \niff_imp1 \nLcfprop.iff_imp2 \niff_imp2 \nLcfprop.imp_antisym \nimp_antisym \nLcfprop.right_doubleneg \nright_doubleneg \nLcfprop.ex_falso \nex_falso \nLcfprop.imp_trans2 \nimp_trans2 \nLcfprop.imp_trans_chain \nimp_trans_chain \nLcfprop.imp_truefalse \nimp_truefalse \nLcfprop.imp_mono_th \nimp_mono_th \nLcfprop.truth \ntruth \nLcfprop.contrapos \ncontrapos \nLcfprop.and_left \nand_left \nLcfprop.and_right \nand_right \nLcfprop.conjths \nconjths \nLcfprop.and_pair \nand_pair \nLcfprop.shunt \nshunt \nLcfprop.unshunt \nunshunt \nLcfprop.iff_def \niff_def \nLcfprop.expand_connective \nexpand_connective \nLcfprop.eliminate_connective \neliminate_connective \nLcfprop.imp_false_conseqs \nimp_false_conseqs \nLcfprop.imp_false_rule \nimp_false_rule \nLcfprop.imp_true_rule \nimp_true_rule \nLcfprop.imp_contr \nimp_contr \nLcfprop.imp_front_th \nimp_front_th \nLcfprop.imp_front \nimp_front \nLcfprop.lcfptab \nlcfptab \nLcfprop.lcftaut \nlcftaut"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#imp_refl","title":"Lcfprop.imp_refl","content":"Lcfprop.imp_refl \nimp_refl \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#imp_unduplicate","title":"Lcfprop.imp_unduplicate","content":"Lcfprop.imp_unduplicate \nimp_unduplicate \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#negatef","title":"Lcfprop.negatef","content":"Lcfprop.negatef \nnegatef \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#negativef","title":"Lcfprop.negativef","content":"Lcfprop.negativef \nnegativef \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#add_assum","title":"Lcfprop.add_assum","content":"Lcfprop.add_assum \nadd_assum \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#imp_add_assum","title":"Lcfprop.imp_add_assum","content":"Lcfprop.imp_add_assum \nimp_add_assum \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#imp_trans","title":"Lcfprop.imp_trans","content":"Lcfprop.imp_trans \nimp_trans \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#imp_insert","title":"Lcfprop.imp_insert","content":"Lcfprop.imp_insert \nimp_insert \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#imp_swap","title":"Lcfprop.imp_swap","content":"Lcfprop.imp_swap \nimp_swap \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#imp_trans_th","title":"Lcfprop.imp_trans_th","content":"Lcfprop.imp_trans_th \nimp_trans_th \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#imp_add_concl","title":"Lcfprop.imp_add_concl","content":"Lcfprop.imp_add_concl \nimp_add_concl \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#imp_swap_th","title":"Lcfprop.imp_swap_th","content":"Lcfprop.imp_swap_th \nimp_swap_th \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#imp_swap2","title":"Lcfprop.imp_swap2","content":"Lcfprop.imp_swap2 \nimp_swap2 \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#right_mp","title":"Lcfprop.right_mp","content":"Lcfprop.right_mp \nright_mp \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#iff_imp1","title":"Lcfprop.iff_imp1","content":"Lcfprop.iff_imp1 \niff_imp1 \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#iff_imp2","title":"Lcfprop.iff_imp2","content":"Lcfprop.iff_imp2 \niff_imp2 \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#imp_antisym","title":"Lcfprop.imp_antisym","content":"Lcfprop.imp_antisym \nimp_antisym \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#right_doubleneg","title":"Lcfprop.right_doubleneg","content":"Lcfprop.right_doubleneg \nright_doubleneg \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#ex_falso","title":"Lcfprop.ex_falso","content":"Lcfprop.ex_falso \nex_falso \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#imp_trans2","title":"Lcfprop.imp_trans2","content":"Lcfprop.imp_trans2 \nimp_trans2 \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#imp_trans_chain","title":"Lcfprop.imp_trans_chain","content":"Lcfprop.imp_trans_chain \nimp_trans_chain \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#imp_truefalse","title":"Lcfprop.imp_truefalse","content":"Lcfprop.imp_truefalse \nimp_truefalse \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#imp_mono_th","title":"Lcfprop.imp_mono_th","content":"Lcfprop.imp_mono_th \nimp_mono_th \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#truth","title":"Lcfprop.truth","content":"Lcfprop.truth \ntruth \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#contrapos","title":"Lcfprop.contrapos","content":"Lcfprop.contrapos \ncontrapos \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#and_left","title":"Lcfprop.and_left","content":"Lcfprop.and_left \nand_left \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#and_right","title":"Lcfprop.and_right","content":"Lcfprop.and_right \nand_right \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#conjths","title":"Lcfprop.conjths","content":"Lcfprop.conjths \nconjths \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#and_pair","title":"Lcfprop.and_pair","content":"Lcfprop.and_pair \nand_pair \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#shunt","title":"Lcfprop.shunt","content":"Lcfprop.shunt \nshunt \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#unshunt","title":"Lcfprop.unshunt","content":"Lcfprop.unshunt \nunshunt \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#iff_def","title":"Lcfprop.iff_def","content":"Lcfprop.iff_def \niff_def \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#expand_connective","title":"Lcfprop.expand_connective","content":"Lcfprop.expand_connective \nexpand_connective \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#eliminate_connective","title":"Lcfprop.eliminate_connective","content":"Lcfprop.eliminate_connective \neliminate_connective \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#imp_false_conseqs","title":"Lcfprop.imp_false_conseqs","content":"Lcfprop.imp_false_conseqs \nimp_false_conseqs \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#imp_false_rule","title":"Lcfprop.imp_false_rule","content":"Lcfprop.imp_false_rule \nimp_false_rule \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#imp_true_rule","title":"Lcfprop.imp_true_rule","content":"Lcfprop.imp_true_rule \nimp_true_rule \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#imp_contr","title":"Lcfprop.imp_contr","content":"Lcfprop.imp_contr \nimp_contr \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#imp_front_th","title":"Lcfprop.imp_front_th","content":"Lcfprop.imp_front_th \nimp_front_th \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#imp_front","title":"Lcfprop.imp_front","content":"Lcfprop.imp_front \nimp_front \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#lcfptab","title":"Lcfprop.lcfptab","content":"Lcfprop.lcfptab \nlcfptab \n"},{"uri":"/FolAutomReas/reference/folautomreas-lcfprop.html#lcftaut","title":"Lcfprop.lcftaut","content":"Lcfprop.lcftaut \nlcftaut \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html","title":"Limitations","content":"Limitations \n \nLimitations.config \nconfig \nLimitations.direction \ndirection \nLimitations.formulaclass \nformulaclass \nLimitations.symbol \nsymbol \nLimitations.tape \ntape \nLimitations.numeral \nnumeral \nLimitations.number \nnumber \nLimitations.pair \npair \nLimitations.gterm \ngterm \nLimitations.gform \ngform \nLimitations.gnumeral \ngnumeral \nLimitations.diag001 \ndiag001 \nLimitations.phi001 \nphi001 \nLimitations.qdiag001 \nqdiag001 \nLimitations.phi002 \nphi002 \nLimitations.diag002 \ndiag002 \nLimitations.qdiag002 \nqdiag002 \nLimitations.dtermval \ndtermval \nLimitations.dholds \ndholds \nLimitations.dhquant \ndhquant \nLimitations.opp \nopp \nLimitations.classify \nclassify \nLimitations.veref \nveref \nLimitations.verefboundquant \nverefboundquant \nLimitations.sholds \nsholds \nLimitations.sigma_bound \nsigma_bound \nLimitations.look \nlook \nLimitations.write \nwrite \nLimitations.move \nmove \nLimitations.run \nrun \nLimitations.input_tape \ninput_tape \nLimitations.output_tape \noutput_tape \nLimitations.exec \nexec \nLimitations.robinson \nrobinson \nLimitations.suc_inj \nsuc_inj \nLimitations.num_cases \nnum_cases \nLimitations.mul_suc \nmul_suc \nLimitations.mul_0 \nmul_0 \nLimitations.lt_def \nlt_def \nLimitations.le_def \nle_def \nLimitations.add_suc \nadd_suc \nLimitations.add_0 \nadd_0 \nLimitations.right_spec \nright_spec \nLimitations.right_mp \nright_mp \nLimitations.right_imp_trans \nright_imp_trans \nLimitations.right_sym \nright_sym \nLimitations.right_trans \nright_trans \nLimitations.robop \nrobop \nLimitations.robeval \nrobeval \nLimitations.robinson_consequences \nrobinson_consequences \nLimitations.robinson_thm \nrobinson_thm \nLimitations.suc_inj_false \nsuc_inj_false \nLimitations.suc_0_r \nsuc_0_r \nLimitations.suc_0_l \nsuc_0_l \nLimitations.num_lecases \nnum_lecases \nLimitations.lt_suc \nlt_suc \nLimitations.lt_0 \nlt_0 \nLimitations.le_suc \nle_suc \nLimitations.le_0 \nle_0 \nLimitations.expand_nlt \nexpand_nlt \nLimitations.expand_nle \nexpand_nle \nLimitations.expand_lt \nexpand_lt \nLimitations.expand_le \nexpand_le \nLimitations.rob_eq \nrob_eq \nLimitations.rob_nen \nrob_nen \nLimitations.rob_ne \nrob_ne \nLimitations.introduce_connective \nintroduce_connective \nLimitations.elim_bex \nelim_bex \nLimitations.sigma_elim \nsigma_elim \nLimitations.boundquant_step \nboundquant_step \nLimitations.sigma_prove \nsigma_prove \nLimitations.bounded_prove \nbounded_prove \nLimitations.boundednum_prove \nboundednum_prove"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#numeral","title":"Limitations.numeral","content":"Limitations.numeral \nnumeral \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#number","title":"Limitations.number","content":"Limitations.number \nnumber \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#pair","title":"Limitations.pair","content":"Limitations.pair \npair \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#gterm","title":"Limitations.gterm","content":"Limitations.gterm \ngterm \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#gform","title":"Limitations.gform","content":"Limitations.gform \ngform \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#gnumeral","title":"Limitations.gnumeral","content":"Limitations.gnumeral \ngnumeral \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#diag001","title":"Limitations.diag001","content":"Limitations.diag001 \ndiag001 \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#phi001","title":"Limitations.phi001","content":"Limitations.phi001 \nphi001 \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#qdiag001","title":"Limitations.qdiag001","content":"Limitations.qdiag001 \nqdiag001 \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#phi002","title":"Limitations.phi002","content":"Limitations.phi002 \nphi002 \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#diag002","title":"Limitations.diag002","content":"Limitations.diag002 \ndiag002 \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#qdiag002","title":"Limitations.qdiag002","content":"Limitations.qdiag002 \nqdiag002 \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#dtermval","title":"Limitations.dtermval","content":"Limitations.dtermval \ndtermval \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#dholds","title":"Limitations.dholds","content":"Limitations.dholds \ndholds \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#dhquant","title":"Limitations.dhquant","content":"Limitations.dhquant \ndhquant \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#opp","title":"Limitations.opp","content":"Limitations.opp \nopp \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#classify","title":"Limitations.classify","content":"Limitations.classify \nclassify \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#veref","title":"Limitations.veref","content":"Limitations.veref \nveref \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#verefboundquant","title":"Limitations.verefboundquant","content":"Limitations.verefboundquant \nverefboundquant \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#sholds","title":"Limitations.sholds","content":"Limitations.sholds \nsholds \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#sigma_bound","title":"Limitations.sigma_bound","content":"Limitations.sigma_bound \nsigma_bound \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#look","title":"Limitations.look","content":"Limitations.look \nlook \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#write","title":"Limitations.write","content":"Limitations.write \nwrite \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#move","title":"Limitations.move","content":"Limitations.move \nmove \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#run","title":"Limitations.run","content":"Limitations.run \nrun \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#input_tape","title":"Limitations.input_tape","content":"Limitations.input_tape \ninput_tape \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#output_tape","title":"Limitations.output_tape","content":"Limitations.output_tape \noutput_tape \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#exec","title":"Limitations.exec","content":"Limitations.exec \nexec \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#robinson","title":"Limitations.robinson","content":"Limitations.robinson \nrobinson \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#suc_inj","title":"Limitations.suc_inj","content":"Limitations.suc_inj \nsuc_inj \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#num_cases","title":"Limitations.num_cases","content":"Limitations.num_cases \nnum_cases \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#mul_suc","title":"Limitations.mul_suc","content":"Limitations.mul_suc \nmul_suc \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#mul_0","title":"Limitations.mul_0","content":"Limitations.mul_0 \nmul_0 \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#lt_def","title":"Limitations.lt_def","content":"Limitations.lt_def \nlt_def \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#le_def","title":"Limitations.le_def","content":"Limitations.le_def \nle_def \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#add_suc","title":"Limitations.add_suc","content":"Limitations.add_suc \nadd_suc \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#add_0","title":"Limitations.add_0","content":"Limitations.add_0 \nadd_0 \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#right_spec","title":"Limitations.right_spec","content":"Limitations.right_spec \nright_spec \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#right_mp","title":"Limitations.right_mp","content":"Limitations.right_mp \nright_mp \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#right_imp_trans","title":"Limitations.right_imp_trans","content":"Limitations.right_imp_trans \nright_imp_trans \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#right_sym","title":"Limitations.right_sym","content":"Limitations.right_sym \nright_sym \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#right_trans","title":"Limitations.right_trans","content":"Limitations.right_trans \nright_trans \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#robop","title":"Limitations.robop","content":"Limitations.robop \nrobop \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#robeval","title":"Limitations.robeval","content":"Limitations.robeval \nrobeval \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#robinson_consequences","title":"Limitations.robinson_consequences","content":"Limitations.robinson_consequences \nrobinson_consequences \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#robinson_thm","title":"Limitations.robinson_thm","content":"Limitations.robinson_thm \nrobinson_thm \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#suc_inj_false","title":"Limitations.suc_inj_false","content":"Limitations.suc_inj_false \nsuc_inj_false \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#suc_0_r","title":"Limitations.suc_0_r","content":"Limitations.suc_0_r \nsuc_0_r \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#suc_0_l","title":"Limitations.suc_0_l","content":"Limitations.suc_0_l \nsuc_0_l \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#num_lecases","title":"Limitations.num_lecases","content":"Limitations.num_lecases \nnum_lecases \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#lt_suc","title":"Limitations.lt_suc","content":"Limitations.lt_suc \nlt_suc \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#lt_0","title":"Limitations.lt_0","content":"Limitations.lt_0 \nlt_0 \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#le_suc","title":"Limitations.le_suc","content":"Limitations.le_suc \nle_suc \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#le_0","title":"Limitations.le_0","content":"Limitations.le_0 \nle_0 \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#expand_nlt","title":"Limitations.expand_nlt","content":"Limitations.expand_nlt \nexpand_nlt \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#expand_nle","title":"Limitations.expand_nle","content":"Limitations.expand_nle \nexpand_nle \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#expand_lt","title":"Limitations.expand_lt","content":"Limitations.expand_lt \nexpand_lt \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#expand_le","title":"Limitations.expand_le","content":"Limitations.expand_le \nexpand_le \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#rob_eq","title":"Limitations.rob_eq","content":"Limitations.rob_eq \nrob_eq \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#rob_nen","title":"Limitations.rob_nen","content":"Limitations.rob_nen \nrob_nen \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#rob_ne","title":"Limitations.rob_ne","content":"Limitations.rob_ne \nrob_ne \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#introduce_connective","title":"Limitations.introduce_connective","content":"Limitations.introduce_connective \nintroduce_connective \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#elim_bex","title":"Limitations.elim_bex","content":"Limitations.elim_bex \nelim_bex \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#sigma_elim","title":"Limitations.sigma_elim","content":"Limitations.sigma_elim \nsigma_elim \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#boundquant_step","title":"Limitations.boundquant_step","content":"Limitations.boundquant_step \nboundquant_step \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#sigma_prove","title":"Limitations.sigma_prove","content":"Limitations.sigma_prove \nsigma_prove \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#bounded_prove","title":"Limitations.bounded_prove","content":"Limitations.bounded_prove \nbounded_prove \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations.html#boundednum_prove","title":"Limitations.boundednum_prove","content":"Limitations.boundednum_prove \nboundednum_prove \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations-config.html","title":"config","content":"config \n \nconfig.Config \nConfig"},{"uri":"/FolAutomReas/reference/folautomreas-limitations-config.html#Config","title":"config.Config","content":"config.Config \nConfig \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations-direction.html","title":"direction","content":"direction \n \ndirection.Left \nLeft \ndirection.Right \nRight \ndirection.Stay \nStay"},{"uri":"/FolAutomReas/reference/folautomreas-limitations-direction.html#Left","title":"direction.Left","content":"direction.Left \nLeft \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations-direction.html#Right","title":"direction.Right","content":"direction.Right \nRight \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations-direction.html#Stay","title":"direction.Stay","content":"direction.Stay \nStay \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations-formulaclass.html","title":"formulaclass","content":"formulaclass \n \nformulaclass.Sigma \nSigma \nformulaclass.Pi \nPi \nformulaclass.Delta \nDelta"},{"uri":"/FolAutomReas/reference/folautomreas-limitations-formulaclass.html#Sigma","title":"formulaclass.Sigma","content":"formulaclass.Sigma \nSigma \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations-formulaclass.html#Pi","title":"formulaclass.Pi","content":"formulaclass.Pi \nPi \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations-formulaclass.html#Delta","title":"formulaclass.Delta","content":"formulaclass.Delta \nDelta \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations-symbol.html","title":"symbol","content":"symbol \n \nsymbol.Blank \nBlank \nsymbol.One \nOne"},{"uri":"/FolAutomReas/reference/folautomreas-limitations-symbol.html#Blank","title":"symbol.Blank","content":"symbol.Blank \nBlank \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations-symbol.html#One","title":"symbol.One","content":"symbol.One \nOne \n"},{"uri":"/FolAutomReas/reference/folautomreas-limitations-tape.html","title":"tape","content":"tape \n \ntape.Tape \nTape"},{"uri":"/FolAutomReas/reference/folautomreas-limitations-tape.html#Tape","title":"tape.Tape","content":"tape.Tape \nTape \n"},{"uri":"/FolAutomReas/reference/folautomreas-meson.html","title":"Meson","content":"Meson \n\n Model Elimination.\n  \nMeson.contrapositives \ncontrapositives \nMeson.mexpand001 \nmexpand001 \nMeson.puremeson001 \npuremeson001 \nMeson.meson001 \nmeson001 \nMeson.equal \nequal \nMeson.expand2 \nexpand2 \nMeson.mexpand002 \nmexpand002 \nMeson.puremeson002 \npuremeson002 \nMeson.meson002 \nmeson002"},{"uri":"/FolAutomReas/reference/folautomreas-meson.html#contrapositives","title":"Meson.contrapositives","content":"Meson.contrapositives \ncontrapositives \n"},{"uri":"/FolAutomReas/reference/folautomreas-meson.html#mexpand001","title":"Meson.mexpand001","content":"Meson.mexpand001 \nmexpand001 \n"},{"uri":"/FolAutomReas/reference/folautomreas-meson.html#puremeson001","title":"Meson.puremeson001","content":"Meson.puremeson001 \npuremeson001 \n"},{"uri":"/FolAutomReas/reference/folautomreas-meson.html#meson001","title":"Meson.meson001","content":"Meson.meson001 \nmeson001 \n"},{"uri":"/FolAutomReas/reference/folautomreas-meson.html#equal","title":"Meson.equal","content":"Meson.equal \nequal \n"},{"uri":"/FolAutomReas/reference/folautomreas-meson.html#expand2","title":"Meson.expand2","content":"Meson.expand2 \nexpand2 \n"},{"uri":"/FolAutomReas/reference/folautomreas-meson.html#mexpand002","title":"Meson.mexpand002","content":"Meson.mexpand002 \nmexpand002 \n"},{"uri":"/FolAutomReas/reference/folautomreas-meson.html#puremeson002","title":"Meson.puremeson002","content":"Meson.puremeson002 \npuremeson002 \n"},{"uri":"/FolAutomReas/reference/folautomreas-meson.html#meson002","title":"Meson.meson002","content":"Meson.meson002 \nmeson002 \n"},{"uri":"/FolAutomReas/reference/folautomreas-order.html","title":"Order","content":"Order \n \nOrder.termsize \ntermsize \nOrder.lexord \nlexord \nOrder.lpo_gt \nlpo_gt \nOrder.lpo_ge \nlpo_ge \nOrder.weight \nweight"},{"uri":"/FolAutomReas/reference/folautomreas-order.html#termsize","title":"Order.termsize","content":"Order.termsize \ntermsize \n"},{"uri":"/FolAutomReas/reference/folautomreas-order.html#lexord","title":"Order.lexord","content":"Order.lexord \nlexord \n"},{"uri":"/FolAutomReas/reference/folautomreas-order.html#lpo_gt","title":"Order.lpo_gt","content":"Order.lpo_gt \nlpo_gt \n"},{"uri":"/FolAutomReas/reference/folautomreas-order.html#lpo_ge","title":"Order.lpo_ge","content":"Order.lpo_ge \nlpo_ge \n"},{"uri":"/FolAutomReas/reference/folautomreas-order.html#weight","title":"Order.weight","content":"Order.weight \nweight \n"},{"uri":"/FolAutomReas/reference/folautomreas-paramodulation.html","title":"Paramodulation","content":"Paramodulation \n \nParamodulation.overlapl \noverlapl \nParamodulation.overlapc \noverlapc \nParamodulation.paramodulate \nparamodulate \nParamodulation.para_clauses \npara_clauses \nParamodulation.paraloop \nparaloop \nParamodulation.pure_paramodulation \npure_paramodulation \nParamodulation.paramodulation \nparamodulation"},{"uri":"/FolAutomReas/reference/folautomreas-paramodulation.html#overlapl","title":"Paramodulation.overlapl","content":"Paramodulation.overlapl \noverlapl \n"},{"uri":"/FolAutomReas/reference/folautomreas-paramodulation.html#overlapc","title":"Paramodulation.overlapc","content":"Paramodulation.overlapc \noverlapc \n"},{"uri":"/FolAutomReas/reference/folautomreas-paramodulation.html#paramodulate","title":"Paramodulation.paramodulate","content":"Paramodulation.paramodulate \nparamodulate \n"},{"uri":"/FolAutomReas/reference/folautomreas-paramodulation.html#para_clauses","title":"Paramodulation.para_clauses","content":"Paramodulation.para_clauses \npara_clauses \n"},{"uri":"/FolAutomReas/reference/folautomreas-paramodulation.html#paraloop","title":"Paramodulation.paraloop","content":"Paramodulation.paraloop \nparaloop \n"},{"uri":"/FolAutomReas/reference/folautomreas-paramodulation.html#pure_paramodulation","title":"Paramodulation.pure_paramodulation","content":"Paramodulation.pure_paramodulation \npure_paramodulation \n"},{"uri":"/FolAutomReas/reference/folautomreas-paramodulation.html#paramodulation","title":"Paramodulation.paramodulation","content":"Paramodulation.paramodulation \nparamodulation \n"},{"uri":"/FolAutomReas/reference/folautomreas-pelletier.html","title":"Pelletier","content":"Pelletier \n\n Some Pelletier problems to compare proof procedures.\n  \nPelletier.p19 \np19 \nPelletier.p20 \np20 \nPelletier.p24 \np24 \nPelletier.p36 \np36 \nPelletier.p38 \np38 \nPelletier.p39 \np39 \nPelletier.p42 \np42 \nPelletier.p43 \np43 \nPelletier.p44 \np44 \nPelletier.p45 \np45 \nPelletier.p59 \np59 \nPelletier.p60 \np60"},{"uri":"/FolAutomReas/reference/folautomreas-pelletier.html#p19","title":"Pelletier.p19","content":"Pelletier.p19 \np19 \n\n \u00AC\u00AC(\u2203x. \u2200y z. (P(y) \u27F6 Q(z)) \u27F6 (P(x) \u27F6 Q(x)))\n"},{"uri":"/FolAutomReas/reference/folautomreas-pelletier.html#p20","title":"Pelletier.p20","content":"Pelletier.p20 \np20 \n\n (\u2200x y. \u2203z. \u2200w. (P(x) \u2227 Q(y) \u27F6 R(z) \u2227 S(w))) \u27F6 (\u2203x y. P(x) \u2227 Q(y)) \u27F6 (\u2203z. R(z))\n"},{"uri":"/FolAutomReas/reference/folautomreas-pelletier.html#p24","title":"Pelletier.p24","content":"Pelletier.p24 \np24 \n\n ~(\u2203 x. U(x) \u2227 Q(x)) \u2227 (\u2200 x. P(x) \u27F6 Q(x) \\/ R(x)) \u2227 \n ~(\u2203 x. P(x) \u27F6 (\u2203 x. Q(x))) \u2227 (\u2200 x. Q(x) \u2227 R(x) \u27F6 U(x)) \n \u27F6 (\u2203 x. P(x) \u2227 R(x))\n"},{"uri":"/FolAutomReas/reference/folautomreas-pelletier.html#p36","title":"Pelletier.p36","content":"Pelletier.p36 \np36 \n\n (\u2200x. \u2203y. J(x,y)) \u2227 (\u2200x. \u2203y. G(x,y)) \u2227 \n (\u2200x y. J(x,y) \u2228 G(x,y) \u27F6 (\u2200z. J(y,z) \u2228 G(y,z) \u27F6 H(x,z))) \u27F6 (\u2200x. \u2203y. H(x,y))\n"},{"uri":"/FolAutomReas/reference/folautomreas-pelletier.html#p38","title":"Pelletier.p38","content":"Pelletier.p38 \np38 \n"},{"uri":"/FolAutomReas/reference/folautomreas-pelletier.html#p39","title":"Pelletier.p39","content":"Pelletier.p39 \np39 \n\n \u00AC (\u2203x. \u2200y. P(y,x) \u27F7 (\u00ACP(y,y))\n"},{"uri":"/FolAutomReas/reference/folautomreas-pelletier.html#p42","title":"Pelletier.p42","content":"Pelletier.p42 \np42 \n\n \u00AC (\u2203y. \u2200x. P(x,y) \u27F7 (\u2203z. P(x,z) \u2227 P(z,y))\n"},{"uri":"/FolAutomReas/reference/folautomreas-pelletier.html#p43","title":"Pelletier.p43","content":"Pelletier.p43 \np43 \n\n (\u2200x y. Q(x,y) \u27F7 \u2200z. P(z,x) \u27F7 P(z,y)) \u27F6 \u2200x y. Q(x,y) \u27F7 Q(y,x)\n"},{"uri":"/FolAutomReas/reference/folautomreas-pelletier.html#p44","title":"Pelletier.p44","content":"Pelletier.p44 \np44 \n\n (\u2200x. P(x) \u27F6 (\u2203y. G(y) \u2227 H(x,y) \u2227 \n (\u2203y. G(y) \u2227 ~ H(x,y)))) \u2227 \n (\u2203x. J(x) \u2227 (\u2200y. G(y) \u27F6 H(x,y))) \n \u27F6 (\u2203x. j(x) \u2227 \u00ACf(x))\n"},{"uri":"/FolAutomReas/reference/folautomreas-pelletier.html#p45","title":"Pelletier.p45","content":"Pelletier.p45 \np45 \n\n (\u2200 x. P(x) \u2227 (\u2200 y. G(y) \u2227 H(x,y) \u27F6 J(x,y)) \u27F6 (\u2200 y. G(y) \u2227 H(x,y) \u27F6 R(y))) \u2227 \n ~(\u2203 y. L(y) \u2227 R(y)) \u2227 (\u2203 x. P(x) \u2227 (\u2200 y. H(x,y) \u27F6 L(y)) \u2227 \n (\u2200 y. G(y) \u2227 H(x,y) \u27F6 J(x,y))) \u27F6 (\u2203 x. P(x) \u2227 ~(\u2203 y. G(y) \u2227 H(x,y)))\n"},{"uri":"/FolAutomReas/reference/folautomreas-pelletier.html#p59","title":"Pelletier.p59","content":"Pelletier.p59 \np59 \n\n (\u2200 x. P(x) \u27F7 ~P(f(x))) \u27F6 (\u2203 x. P(x) \u2227 ~P(f(x)))\n"},{"uri":"/FolAutomReas/reference/folautomreas-pelletier.html#p60","title":"Pelletier.p60","content":"Pelletier.p60 \np60 \n\n \u2200x. P(x,f(x)) \u27F7 (\u2203y. (\u2200z. P(z,y) \u27F6 P (z,f(x))) \u2227 P(x,y))\n"},{"uri":"/FolAutomReas/reference/folautomreas-prolog.html","title":"Prolog","content":"Prolog \n\n Prolog.\n  \nProlog.renamerule \nrenamerule \nProlog.backchain \nbackchain \nProlog.hornify \nhornify \nProlog.hornprove \nhornprove \nProlog.parserule \nparserule \nProlog.simpleprolog \nsimpleprolog \nProlog.prolog \nprolog"},{"uri":"/FolAutomReas/reference/folautomreas-prolog.html#renamerule","title":"Prolog.renamerule","content":"Prolog.renamerule \nrenamerule \n"},{"uri":"/FolAutomReas/reference/folautomreas-prolog.html#backchain","title":"Prolog.backchain","content":"Prolog.backchain \nbackchain \n"},{"uri":"/FolAutomReas/reference/folautomreas-prolog.html#hornify","title":"Prolog.hornify","content":"Prolog.hornify \nhornify \n"},{"uri":"/FolAutomReas/reference/folautomreas-prolog.html#hornprove","title":"Prolog.hornprove","content":"Prolog.hornprove \nhornprove \n"},{"uri":"/FolAutomReas/reference/folautomreas-prolog.html#parserule","title":"Prolog.parserule","content":"Prolog.parserule \nparserule \n"},{"uri":"/FolAutomReas/reference/folautomreas-prolog.html#simpleprolog","title":"Prolog.simpleprolog","content":"Prolog.simpleprolog \nsimpleprolog \n"},{"uri":"/FolAutomReas/reference/folautomreas-prolog.html#prolog","title":"Prolog.prolog","content":"Prolog.prolog \nprolog \n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html","title":"Prop","content":"Prop \n\n Basic stuff for propositional logic: datatype, parsing and printing. \n  \nProp.prop \nprop \nProp.pname \npname \nProp.parse_propvar \nparse_propvar \nProp.parse_prop_formula \nparse_prop_formula \nProp.fprint_propvar \nfprint_propvar \nProp.print_propvar \nprint_propvar \nProp.sprint_propvar \nsprint_propvar \nProp.fprint_prop_formula \nfprint_prop_formula \nProp.print_prop_formula \nprint_prop_formula \nProp.sprint_prop_formula \nsprint_prop_formula \nProp.eval \neval \nProp.atoms \natoms \nProp.onallvaluations \nonallvaluations \nProp.fprint_truthtable \nfprint_truthtable \nProp.print_truthtable \nprint_truthtable \nProp.sprint_truthtable \nsprint_truthtable \nProp.tautology \ntautology \nProp.unsatisfiable \nunsatisfiable \nProp.satisfiable \nsatisfiable \nProp.psubst \npsubst \nProp.dual \ndual \nProp.psimplify1 \npsimplify1 \nProp.psimplify \npsimplify \nProp.negative \nnegative \nProp.positive \npositive \nProp.negate \nnegate \nProp.nnf_naive \nnnf_naive \nProp.nnf \nnnf \nProp.nenf_naive \nnenf_naive \nProp.nenf \nnenf \nProp.list_conj \nlist_conj \nProp.list_disj \nlist_disj \nProp.mk_lits \nmk_lits \nProp.allsatvaluations \nallsatvaluations \nProp.dnf_by_truth_tables \ndnf_by_truth_tables \nProp.distrib_naive \ndistrib_naive \nProp.rawdnf \nrawdnf \nProp.distrib \ndistrib \nProp.purednf \npurednf \nProp.trivial \ntrivial \nProp.simpdnf \nsimpdnf \nProp.dnf \ndnf \nProp.purecnf \npurecnf \nProp.simpcnf \nsimpcnf \nProp.cnf \ncnf"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#pname","title":"Prop.pname","content":"Prop.pname \npname \n\n Returns constant or variable name of a propositional formula.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#parse_propvar","title":"Prop.parse_propvar","content":"Prop.parse_propvar \nparse_propvar \n\n Parses atomic propositions.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#parse_prop_formula","title":"Prop.parse_prop_formula","content":"Prop.parse_prop_formula \nparse_prop_formula \n\n Parses a string in a propositional formula.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#fprint_propvar","title":"Prop.fprint_propvar","content":"Prop.fprint_propvar \nfprint_propvar \n\n Prints a prop variable using a TextWriter.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#print_propvar","title":"Prop.print_propvar","content":"Prop.print_propvar \nprint_propvar \n\n Prints a prop variable\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#sprint_propvar","title":"Prop.sprint_propvar","content":"Prop.sprint_propvar \nsprint_propvar \n\n Returns a string representation of a prop variable.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#fprint_prop_formula","title":"Prop.fprint_prop_formula","content":"Prop.fprint_prop_formula \nfprint_prop_formula \n\n Prints a prop formula using a TextWriter.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#print_prop_formula","title":"Prop.print_prop_formula","content":"Prop.print_prop_formula \nprint_prop_formula \n\n Prints a prop formula\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#sprint_prop_formula","title":"Prop.sprint_prop_formula","content":"Prop.sprint_prop_formula \nsprint_prop_formula \n\n Returns a string representation of a propositional formula instead of \n its abstract syntax tree..\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#eval","title":"Prop.eval","content":"Prop.eval \neval \n\n Interpretation of formulas. \n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#atoms","title":"Prop.atoms","content":"Prop.atoms \natoms \n\n Return the set of propositional variables in a formula.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#onallvaluations","title":"Prop.onallvaluations","content":"Prop.onallvaluations \nonallvaluations \n\n Tests whether a function \u0060subfn\u0060 returns \u0060true\u0060 on all possible valuations \n of the atoms \u0060ats\u0060, using an existing valuation \u0060v\u0060 for all other atoms.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#fprint_truthtable","title":"Prop.fprint_truthtable","content":"Prop.fprint_truthtable \nfprint_truthtable \n\n Prints the truth table of a formula \u0060fm\u0060 using a TextWriter.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#print_truthtable","title":"Prop.print_truthtable","content":"Prop.print_truthtable \nprint_truthtable \n\n Prints the truth table of the propositional formula \u0060f\u0060.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#sprint_truthtable","title":"Prop.sprint_truthtable","content":"Prop.sprint_truthtable \nsprint_truthtable \n\n Returns a string representation of the truth table of the propositional \n formula \u0060f\u0060.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#tautology","title":"Prop.tautology","content":"Prop.tautology \ntautology \n\n Checks if a propositional formula is a tautology.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#unsatisfiable","title":"Prop.unsatisfiable","content":"Prop.unsatisfiable \nunsatisfiable \n\n Checks if a propositional formula is unsatisfiable.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#satisfiable","title":"Prop.satisfiable","content":"Prop.satisfiable \nsatisfiable \n\n Checks if a propositional formula is satisfiable.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#psubst","title":"Prop.psubst","content":"Prop.psubst \npsubst \n\n Returns the formula resulting from applying the substitution \u0060sbfn\u0060 \n to the input formula.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#dual","title":"Prop.dual","content":"Prop.dual \ndual \n\n Returns the dual of the input formula \u0060fm\u0060: i.e. the result of \n systematically exchanging \u0060/\\\u0060s with \u0060\\/\u0060s and also \u0060True\u0060 with \n \u0060False\u0060.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#psimplify1","title":"Prop.psimplify1","content":"Prop.psimplify1 \npsimplify1 \n\n Performs a simplification routine but just at the first level of the input \n formula \u0060fm\u0060. It eliminates the basic propositional constants \u0060False\u0060 and \n \u0060True\u0060. \n \n Whenever \u0060False\u0060 and \u0060True\u0060 occur in combination, there is always a a \n tautology justifying the equivalence with a simpler formula, e.g. \u0060False /\\ \n p \u003C=\u003E False\u0060, \u0060True \\/ p \u003C=\u003E p\u0060, \u0060p ==\u003E False \u003C=\u003E ~p\u0060. At he same time, it \n also eliminates double negations \u0060~~p\u0060.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#psimplify","title":"Prop.psimplify","content":"Prop.psimplify \npsimplify \n\n Performs a simplification routine on the input formula \n \u0060fm\u0060 eliminating the basic propositional constants \u0060False\u0060 and \u0060True\u0060. \n \n Whenever \u0060False\u0060 and \u0060True\u0060 occur in combination, there is always a a \n tautology justifying the equivalence with a simpler formula, e.g. \u0060False /\\ \n p \u003C=\u003E False\u0060, \u0060True \\/ p \u003C=\u003E p\u0060, \u0060p ==\u003E False \u003C=\u003E ~p\u0060. At he same time, it \n also eliminates double negations \u0060~~p\u0060.\n \n While \u0060psimplify1\u0060 performs the transformation just at the first level, \n \u0060psimplify\u0060 performs it at every levels in a recursive bottom-up sweep.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#negative","title":"Prop.negative","content":"Prop.negative \nnegative \n\n Checks if a literal is negative.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#positive","title":"Prop.positive","content":"Prop.positive \npositive \n\n Checks if a literal is positive.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#negate","title":"Prop.negate","content":"Prop.negate \nnegate \n\n Changes a literal into its contrary.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#nnf_naive","title":"Prop.nnf_naive","content":"Prop.nnf_naive \nnnf_naive \n\n Changes a formula into its negation normal form without simplifying it.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#nnf","title":"Prop.nnf","content":"Prop.nnf \nnnf \n\n Changes a formula into its negation normal and applies it the routine \n simplification \u0060psimplify\u0060.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#nenf_naive","title":"Prop.nenf_naive","content":"Prop.nenf_naive \nnenf_naive \n\n Simply pushes negations in the input formula \u0060fm\u0060 down to the level of atoms without simplifying it.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#nenf","title":"Prop.nenf","content":"Prop.nenf \nnenf \n\n Simply pushes negations in the input formula \u0060fm\u0060 down to the level of \n atoms and applies it the routine simplification \u0060psimplify\u0060.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#list_conj","title":"Prop.list_conj","content":"Prop.list_conj \nlist_conj \n\n Creates a conjunction of all the formulas in the input list \u0060l\u0060.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#list_disj","title":"Prop.list_disj","content":"Prop.list_disj \nlist_disj \n\n Creates a disjunction of all the formulas in the input list \u0060l\u0060.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#mk_lits","title":"Prop.mk_lits","content":"Prop.mk_lits \nmk_lits \n\n Given a list of formulas \u0060pvs\u0060, makes a conjunction of these formulas and \n their negations according to whether each is satis\uFB01ed by the valuation \u0060v\u0060.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#allsatvaluations","title":"Prop.allsatvaluations","content":"Prop.allsatvaluations \nallsatvaluations \n\n A close analogue of \u0060onallvaluations\u0060 that collects the valuations for \n which \u0060subfn\u0060 holds into a list.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#dnf_by_truth_tables","title":"Prop.dnf_by_truth_tables","content":"Prop.dnf_by_truth_tables \ndnf_by_truth_tables \n\n Transforms a formula \u0060fm\u0060 in disjunctive normal form using truth tables.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#distrib_naive","title":"Prop.distrib_naive","content":"Prop.distrib_naive \ndistrib_naive \n\n Applies the distributive laws to the input formula \u0060fm\u0060.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#rawdnf","title":"Prop.rawdnf","content":"Prop.rawdnf \nrawdnf \n\n Transforms the input formula \u0060fm\u0060 in disjunctive normal form.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#distrib","title":"Prop.distrib","content":"Prop.distrib \ndistrib \n\n Applies the distributive laws of propositional connectives \u0060/\\\u0060 and \u0060\\/\u0060 \n using a list representation of the formulas \u0060s1\u0060 and \u0060s2\u0060 on which \n to operate.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#purednf","title":"Prop.purednf","content":"Prop.purednf \npurednf \n\n Transforms the input formula \u0060fm\u0060 in disjunctive normal form using \n (internally) a list representation of the formula as a set of sets. \n \u0060p /\\ q \\/ ~ p /\\ r\u0060 as \u0060[[p; q]; [~ p; r]]\u0060\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#trivial","title":"Prop.trivial","content":"Prop.trivial \ntrivial \n\n Check if there are complementary literals of the form p and ~ p \n in the same list.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#simpdnf","title":"Prop.simpdnf","content":"Prop.simpdnf \nsimpdnf \n\n Transforms the input formula \u0060fm\u0060 in a list of list representation of  \n disjunctive normal form. It exploits the list of list representation \n filtering out trivial complementary literals and subsumed ones.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#dnf","title":"Prop.dnf","content":"Prop.dnf \ndnf \n\n Transforms the input formula \u0060fm\u0060 in disjunctive normal form.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#purecnf","title":"Prop.purecnf","content":"Prop.purecnf \npurecnf \n\n Transforms the input formula \u0060fm\u0060 in conjunctive normal form \n by using \u0060purednf\u0060.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#simpcnf","title":"Prop.simpcnf","content":"Prop.simpcnf \nsimpcnf \n\n Transforms the input formula \u0060fm\u0060 in a list of list representation of \n conjunctive normal form. It exploits the list of list representation \n filtering out trivial complementary literals and subsumed ones.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop.html#cnf","title":"Prop.cnf","content":"Prop.cnf \ncnf \n\n Transforms the input formula \u0060fm\u0060 in conjunctive normal form.\n"},{"uri":"/FolAutomReas/reference/folautomreas-prop-prop.html","title":"prop","content":"prop \n\n Type of primitive propositions indexed by names.\n \nprop.P \nP"},{"uri":"/FolAutomReas/reference/folautomreas-prop-prop.html#P","title":"prop.P","content":"prop.P \nP \n"},{"uri":"/FolAutomReas/reference/folautomreas-propexamples.html","title":"Propexamples","content":"Propexamples \n\n Some propositional formulas to test, and functions to generate classes.\n  \nPropexamples.ramsey \nramsey \nPropexamples.halfsum \nhalfsum \nPropexamples.halfcarry \nhalfcarry \nPropexamples.ha \nha \nPropexamples.carry \ncarry \nPropexamples.sum \nsum \nPropexamples.fa \nfa \nPropexamples.conjoin \nconjoin \nPropexamples.ripplecarry \nripplecarry \nPropexamples.mk_index \nmk_index \nPropexamples.mk_index2 \nmk_index2 \nPropexamples.ripplecarry0 \nripplecarry0 \nPropexamples.ripplecarry1 \nripplecarry1 \nPropexamples.mux \nmux \nPropexamples.offset \noffset \nPropexamples.carryselect \ncarryselect \nPropexamples.mk_adder_test \nmk_adder_test \nPropexamples.rippleshift \nrippleshift \nPropexamples.multiplier \nmultiplier \nPropexamples.bitlength \nbitlength \nPropexamples.bit \nbit \nPropexamples.congruent_to \ncongruent_to \nPropexamples.prime \nprime"},{"uri":"/FolAutomReas/reference/folautomreas-propexamples.html#ramsey","title":"Propexamples.ramsey","content":"Propexamples.ramsey \nramsey \n\n Generate assertion equivalent to R(s,t) \u003C= n for the Ramsey number R(s,t) \n"},{"uri":"/FolAutomReas/reference/folautomreas-propexamples.html#halfsum","title":"Propexamples.halfsum","content":"Propexamples.halfsum \nhalfsum \n\n Generates the propositional formula whose truth value correponds to the \n carry of an half adder, given the \u0060x\u0060 and \u0060y\u0060 digits to be summed also \n represented as prop formulas: false for 0 true for 1.\n \n x /\\ y\n"},{"uri":"/FolAutomReas/reference/folautomreas-propexamples.html#halfcarry","title":"Propexamples.halfcarry","content":"Propexamples.halfcarry \nhalfcarry \n\n Generates the propositional formulas whose truth value correponds to the \n sum of an half adder, given the \u0060x\u0060 and \u0060y\u0060 digits to be summed also \n represented as prop formulas: false for 0 true for 1. \n \n x \u003C=\u003E ~ y.\n"},{"uri":"/FolAutomReas/reference/folautomreas-propexamples.html#ha","title":"Propexamples.ha","content":"Propexamples.ha \nha \n\n Half adder function.\n \n Generates a propositional formula that is true if the input formulas \n represent respectively two digits \u0060x\u0060 and \u0060y\u0060 to be summed, the resulting \n sum \u0060s\u0060 and the carry \u0060c\u0060.\n"},{"uri":"/FolAutomReas/reference/folautomreas-propexamples.html#carry","title":"Propexamples.carry","content":"Propexamples.carry \ncarry \n\n Generates the propositional formula whose truth value correponds to the \n carry of a full adder, given the \u0060x\u0060, \u0060y\u0060 and \u0060z\u0060 digits to be summed also \n represented as formulas: false for 0 true for 1. \n \n (x /\\ y) \\/ ((x \\/ y) /\\ z)\n"},{"uri":"/FolAutomReas/reference/folautomreas-propexamples.html#sum","title":"Propexamples.sum","content":"Propexamples.sum \nsum \n\n Generates the propositional formula whose truth value correponds to the sum \n of a full adder, given the \u0060x\u0060, \u0060y\u0060 and \u0060z\u0060 digits to be summed also \n represented as formulas: false for 0 true for 1. \n \n (x \u003C=\u003E ~ y) \u003C=\u003E ~ z\n"},{"uri":"/FolAutomReas/reference/folautomreas-propexamples.html#fa","title":"Propexamples.fa","content":"Propexamples.fa \nfa \n\n Full adder function.\n \n Generates a propositional formula that is true if the input terms represent \n respectively two digits \u0060x\u0060 and \u0060y\u0060 to be summed, the \u0060z\u0060 carry from a \n previous sum, the resulting sum \u0060s\u0060 and the carry \u0060c\u0060.\n"},{"uri":"/FolAutomReas/reference/folautomreas-propexamples.html#conjoin","title":"Propexamples.conjoin","content":"Propexamples.conjoin \nconjoin \n\n An auxiliary function to define ripplecarry.\n \n Given a function that creates a prop formula from an index and a list of \n indexes, it puts multiple full-adders together into an n-bit adder.\n"},{"uri":"/FolAutomReas/reference/folautomreas-propexamples.html#ripplecarry","title":"Propexamples.ripplecarry","content":"Propexamples.ripplecarry \nripplecarry \n\n n-bit ripple carry adder with carry c(0) propagated in and c(n) out.  \n \n Generates a propsitional formula that represent a riple-carry adder circuit.\n Filtering the true rows of its truth table gives the sum and carry values \n for each digits.\n \n It expects the user to supply functions \u0060x\u0060, \u0060y\u0060, \u0060out\u0060 and \u0060c\u0060 that, when \n given an index, generates an appropriate new variable. Use \u0060mk_index\u0060 \n to generate such functions.\n \n For example, \n \n \u0060let [x; y; out; c] = map mk_index [\u0022X\u0022; \u0022Y\u0022; \u0022OUT\u0022; \u0022C\u0022]\u0060\n \n \u0060ripplecarry x y c out 2\u0060\n"},{"uri":"/FolAutomReas/reference/folautomreas-propexamples.html#mk_index","title":"Propexamples.mk_index","content":"Propexamples.mk_index \nmk_index \n\n An auxiliary function to generate input for ripplecarry.\n \n Given a prpo formula \u0060x\u0060 and an index \u0060i\u0060, it generates a propositional \n variable \u0060P \u0022x_i\u0022\u0060.\n \n \u0060let [x; y; out; c] = map mk_index [\u0022X\u0022; \u0022Y\u0022; \u0022OUT\u0022; \u0022C\u0022]\u0060 \n generates the x, y, out and c functions that can be given \n as input to ripplecarry\n"},{"uri":"/FolAutomReas/reference/folautomreas-propexamples.html#mk_index2","title":"Propexamples.mk_index2","content":"Propexamples.mk_index2 \nmk_index2 \n\n Similar to \u0060mk_index\u0060. \n \n Given a prop formula \u0060x\u0060 and an indexes \u0060i\u0060 and \u0060j\u0060, it generates a \n propositional variable \u0060P \u0022x_i_j\u0022\u0060.\n"},{"uri":"/FolAutomReas/reference/folautomreas-propexamples.html#ripplecarry0","title":"Propexamples.ripplecarry0","content":"Propexamples.ripplecarry0 \nripplecarry0 \n\n n-bit ripple carry adder with carry c(0) forced to 0.\n \n It can be used when we are not interested in a carry in at the low end.\n"},{"uri":"/FolAutomReas/reference/folautomreas-propexamples.html#ripplecarry1","title":"Propexamples.ripplecarry1","content":"Propexamples.ripplecarry1 \nripplecarry1 \n\n n-bit ripple carry adder with carry c(0) forced at 1.\n \n It is used to define the carry-select adder. In a carry-select adder the \n n-bit inputs are split into several blocks of k, and corresponding k-bit \n blocks are added twice, once assuming a carry-in of 0 and once assuming a \n carry-in of 1.\n"},{"uri":"/FolAutomReas/reference/folautomreas-propexamples.html#mux","title":"Propexamples.mux","content":"Propexamples.mux \nmux \n\n Multiplexer used to define the carry-select adder. We will use it to \n select between the two alternatives (carry-in of 0 or 1) when we do \n carry propagation.\n"},{"uri":"/FolAutomReas/reference/folautomreas-propexamples.html#offset","title":"Propexamples.offset","content":"Propexamples.offset \noffset \n\n An auxiliary function to o\uFB00set the indices in an array of bits. \n It is used to define the carry-select adder.\n"},{"uri":"/FolAutomReas/reference/folautomreas-propexamples.html#carryselect","title":"Propexamples.carryselect","content":"Propexamples.carryselect \ncarryselect \n"},{"uri":"/FolAutomReas/reference/folautomreas-propexamples.html#mk_adder_test","title":"Propexamples.mk_adder_test","content":"Propexamples.mk_adder_test \nmk_adder_test \n\n Generates propositions that state the equivalence of various ripplecarry \n and carryselect circuits based on the input \u0060n\u0060 (number of bit to be added) \n and \u0060k\u0060 (number of blocks in the carryselect circuit).\n \n If the proposition generated is a tautology, the equivalence between the \n two circuit is proved.\n"},{"uri":"/FolAutomReas/reference/folautomreas-propexamples.html#rippleshift","title":"Propexamples.rippleshift","content":"Propexamples.rippleshift \nrippleshift \n\n Ripple carry stage that separates off the final result of a multiplication.\n"},{"uri":"/FolAutomReas/reference/folautomreas-propexamples.html#multiplier","title":"Propexamples.multiplier","content":"Propexamples.multiplier \nmultiplier \n\n Naive multiplier based on repeated ripple carry. \n"},{"uri":"/FolAutomReas/reference/folautomreas-propexamples.html#bitlength","title":"Propexamples.bitlength","content":"Propexamples.bitlength \nbitlength \n\n Returns the nuber of bit needed to represent x in binary notation.\n"},{"uri":"/FolAutomReas/reference/folautomreas-propexamples.html#bit","title":"Propexamples.bit","content":"Propexamples.bit \nbit \n\n Extract the \u0060n\u0060th bit (as a boolean value) of a nonnegative integer \u0060x\u0060.\n"},{"uri":"/FolAutomReas/reference/folautomreas-propexamples.html#congruent_to","title":"Propexamples.congruent_to","content":"Propexamples.congruent_to \ncongruent_to \n\n Produces a propositional formula asserting that the atoms \u0060x\u0060(i) encode \n the bits of a value \u0060m\u0060, at least modulo 2^\u0060n\u0060.\n"},{"uri":"/FolAutomReas/reference/folautomreas-propexamples.html#prime","title":"Propexamples.prime","content":"Propexamples.prime \nprime \n\n Applied to a positive integer \u0060p\u0060 generates a propositional formula \n that is a tautology precisely if \u0060p\u0060 is prime.\n"},{"uri":"/FolAutomReas/reference/folautomreas-qelim.html","title":"Qelim","content":"Qelim \n \nQelim.qelim \nqelim \nQelim.lift_qelim \nlift_qelim \nQelim.cnnf \ncnnf \nQelim.lfn_dlo \nlfn_dlo \nQelim.dlobasic \ndlobasic \nQelim.afn_dlo \nafn_dlo \nQelim.quelim_dlo \nquelim_dlo"},{"uri":"/FolAutomReas/reference/folautomreas-qelim.html#qelim","title":"Qelim.qelim","content":"Qelim.qelim \nqelim \n"},{"uri":"/FolAutomReas/reference/folautomreas-qelim.html#lift_qelim","title":"Qelim.lift_qelim","content":"Qelim.lift_qelim \nlift_qelim \n"},{"uri":"/FolAutomReas/reference/folautomreas-qelim.html#cnnf","title":"Qelim.cnnf","content":"Qelim.cnnf \ncnnf \n"},{"uri":"/FolAutomReas/reference/folautomreas-qelim.html#lfn_dlo","title":"Qelim.lfn_dlo","content":"Qelim.lfn_dlo \nlfn_dlo \n"},{"uri":"/FolAutomReas/reference/folautomreas-qelim.html#dlobasic","title":"Qelim.dlobasic","content":"Qelim.dlobasic \ndlobasic \n"},{"uri":"/FolAutomReas/reference/folautomreas-qelim.html#afn_dlo","title":"Qelim.afn_dlo","content":"Qelim.afn_dlo \nafn_dlo \n"},{"uri":"/FolAutomReas/reference/folautomreas-qelim.html#quelim_dlo","title":"Qelim.quelim_dlo","content":"Qelim.quelim_dlo \nquelim_dlo \n"},{"uri":"/FolAutomReas/reference/folautomreas-real.html","title":"Real","content":"Real \n \nReal.poly_diffn \npoly_diffn \nReal.poly_diff \npoly_diff \nReal.rel_signs \nrel_signs \nReal.testform \ntestform \nReal.inferpsign \ninferpsign \nReal.condense \ncondense \nReal.inferisign \ninferisign \nReal.dedmatrix \ndedmatrix \nReal.pdivide_pos \npdivide_pos \nReal.split_sign \nsplit_sign \nReal.split_trichotomy \nsplit_trichotomy \nReal.casesplit \ncasesplit \nReal.delconst \ndelconst \nReal.matrix \nmatrix \nReal.basic_real_qelim \nbasic_real_qelim \nReal.real_qelim \nreal_qelim \nReal.grpterm \ngrpterm \nReal.grpform \ngrpform \nReal.real_qelim\u0027 \nreal_qelim\u0027"},{"uri":"/FolAutomReas/reference/folautomreas-real.html#poly_diffn","title":"Real.poly_diffn","content":"Real.poly_diffn \npoly_diffn \n"},{"uri":"/FolAutomReas/reference/folautomreas-real.html#poly_diff","title":"Real.poly_diff","content":"Real.poly_diff \npoly_diff \n"},{"uri":"/FolAutomReas/reference/folautomreas-real.html#rel_signs","title":"Real.rel_signs","content":"Real.rel_signs \nrel_signs \n"},{"uri":"/FolAutomReas/reference/folautomreas-real.html#testform","title":"Real.testform","content":"Real.testform \ntestform \n"},{"uri":"/FolAutomReas/reference/folautomreas-real.html#inferpsign","title":"Real.inferpsign","content":"Real.inferpsign \ninferpsign \n"},{"uri":"/FolAutomReas/reference/folautomreas-real.html#condense","title":"Real.condense","content":"Real.condense \ncondense \n"},{"uri":"/FolAutomReas/reference/folautomreas-real.html#inferisign","title":"Real.inferisign","content":"Real.inferisign \ninferisign \n"},{"uri":"/FolAutomReas/reference/folautomreas-real.html#dedmatrix","title":"Real.dedmatrix","content":"Real.dedmatrix \ndedmatrix \n"},{"uri":"/FolAutomReas/reference/folautomreas-real.html#pdivide_pos","title":"Real.pdivide_pos","content":"Real.pdivide_pos \npdivide_pos \n"},{"uri":"/FolAutomReas/reference/folautomreas-real.html#split_sign","title":"Real.split_sign","content":"Real.split_sign \nsplit_sign \n"},{"uri":"/FolAutomReas/reference/folautomreas-real.html#split_trichotomy","title":"Real.split_trichotomy","content":"Real.split_trichotomy \nsplit_trichotomy \n"},{"uri":"/FolAutomReas/reference/folautomreas-real.html#casesplit","title":"Real.casesplit","content":"Real.casesplit \ncasesplit \n"},{"uri":"/FolAutomReas/reference/folautomreas-real.html#delconst","title":"Real.delconst","content":"Real.delconst \ndelconst \n"},{"uri":"/FolAutomReas/reference/folautomreas-real.html#matrix","title":"Real.matrix","content":"Real.matrix \nmatrix \n"},{"uri":"/FolAutomReas/reference/folautomreas-real.html#basic_real_qelim","title":"Real.basic_real_qelim","content":"Real.basic_real_qelim \nbasic_real_qelim \n"},{"uri":"/FolAutomReas/reference/folautomreas-real.html#real_qelim","title":"Real.real_qelim","content":"Real.real_qelim \nreal_qelim \n"},{"uri":"/FolAutomReas/reference/folautomreas-real.html#grpterm","title":"Real.grpterm","content":"Real.grpterm \ngrpterm \n"},{"uri":"/FolAutomReas/reference/folautomreas-real.html#grpform","title":"Real.grpform","content":"Real.grpform \ngrpform \n"},{"uri":"/FolAutomReas/reference/folautomreas-real.html#real_qelim\u0027","title":"Real.real_qelim\u0027","content":"Real.real_qelim\u0027 \nreal_qelim\u0027 \n"},{"uri":"/FolAutomReas/reference/folautomreas-resolution.html","title":"Resolution","content":"Resolution \n\n Resolution.\n  \nResolution.barb \nbarb \nResolution.mgu \nmgu \nResolution.unifiable \nunifiable \nResolution.rename \nrename \nResolution.resolvents \nresolvents \nResolution.resolve_clauses \nresolve_clauses \nResolution.resloop001 \nresloop001 \nResolution.pure_resolution001 \npure_resolution001 \nResolution.resolution001 \nresolution001 \nResolution.term_match \nterm_match \nResolution.match_literals \nmatch_literals \nResolution.subsumes_clause \nsubsumes_clause \nResolution.replace \nreplace \nResolution.incorporate \nincorporate \nResolution.resloop002 \nresloop002 \nResolution.pure_resolution002 \npure_resolution002 \nResolution.resolution002 \nresolution002 \nResolution.presolve_clauses \npresolve_clauses \nResolution.presloop \npresloop \nResolution.pure_presolution \npure_presolution \nResolution.presolution \npresolution \nResolution.pure_resolution \npure_resolution \nResolution.resolution003 \nresolution003"},{"uri":"/FolAutomReas/reference/folautomreas-resolution.html#barb","title":"Resolution.barb","content":"Resolution.barb \nbarb \n"},{"uri":"/FolAutomReas/reference/folautomreas-resolution.html#mgu","title":"Resolution.mgu","content":"Resolution.mgu \nmgu \n"},{"uri":"/FolAutomReas/reference/folautomreas-resolution.html#unifiable","title":"Resolution.unifiable","content":"Resolution.unifiable \nunifiable \n"},{"uri":"/FolAutomReas/reference/folautomreas-resolution.html#rename","title":"Resolution.rename","content":"Resolution.rename \nrename \n"},{"uri":"/FolAutomReas/reference/folautomreas-resolution.html#resolvents","title":"Resolution.resolvents","content":"Resolution.resolvents \nresolvents \n"},{"uri":"/FolAutomReas/reference/folautomreas-resolution.html#resolve_clauses","title":"Resolution.resolve_clauses","content":"Resolution.resolve_clauses \nresolve_clauses \n"},{"uri":"/FolAutomReas/reference/folautomreas-resolution.html#resloop001","title":"Resolution.resloop001","content":"Resolution.resloop001 \nresloop001 \n"},{"uri":"/FolAutomReas/reference/folautomreas-resolution.html#pure_resolution001","title":"Resolution.pure_resolution001","content":"Resolution.pure_resolution001 \npure_resolution001 \n"},{"uri":"/FolAutomReas/reference/folautomreas-resolution.html#resolution001","title":"Resolution.resolution001","content":"Resolution.resolution001 \nresolution001 \n"},{"uri":"/FolAutomReas/reference/folautomreas-resolution.html#term_match","title":"Resolution.term_match","content":"Resolution.term_match \nterm_match \n"},{"uri":"/FolAutomReas/reference/folautomreas-resolution.html#match_literals","title":"Resolution.match_literals","content":"Resolution.match_literals \nmatch_literals \n"},{"uri":"/FolAutomReas/reference/folautomreas-resolution.html#subsumes_clause","title":"Resolution.subsumes_clause","content":"Resolution.subsumes_clause \nsubsumes_clause \n"},{"uri":"/FolAutomReas/reference/folautomreas-resolution.html#replace","title":"Resolution.replace","content":"Resolution.replace \nreplace \n"},{"uri":"/FolAutomReas/reference/folautomreas-resolution.html#incorporate","title":"Resolution.incorporate","content":"Resolution.incorporate \nincorporate \n"},{"uri":"/FolAutomReas/reference/folautomreas-resolution.html#resloop002","title":"Resolution.resloop002","content":"Resolution.resloop002 \nresloop002 \n"},{"uri":"/FolAutomReas/reference/folautomreas-resolution.html#pure_resolution002","title":"Resolution.pure_resolution002","content":"Resolution.pure_resolution002 \npure_resolution002 \n"},{"uri":"/FolAutomReas/reference/folautomreas-resolution.html#resolution002","title":"Resolution.resolution002","content":"Resolution.resolution002 \nresolution002 \n"},{"uri":"/FolAutomReas/reference/folautomreas-resolution.html#presolve_clauses","title":"Resolution.presolve_clauses","content":"Resolution.presolve_clauses \npresolve_clauses \n"},{"uri":"/FolAutomReas/reference/folautomreas-resolution.html#presloop","title":"Resolution.presloop","content":"Resolution.presloop \npresloop \n"},{"uri":"/FolAutomReas/reference/folautomreas-resolution.html#pure_presolution","title":"Resolution.pure_presolution","content":"Resolution.pure_presolution \npure_presolution \n"},{"uri":"/FolAutomReas/reference/folautomreas-resolution.html#presolution","title":"Resolution.presolution","content":"Resolution.presolution \npresolution \n"},{"uri":"/FolAutomReas/reference/folautomreas-resolution.html#pure_resolution","title":"Resolution.pure_resolution","content":"Resolution.pure_resolution \npure_resolution \n"},{"uri":"/FolAutomReas/reference/folautomreas-resolution.html#resolution003","title":"Resolution.resolution003","content":"Resolution.resolution003 \nresolution003 \n"},{"uri":"/FolAutomReas/reference/folautomreas-rewrite.html","title":"Rewrite","content":"Rewrite \n \nRewrite.rewrite1 \nrewrite1 \nRewrite.rewrite \nrewrite"},{"uri":"/FolAutomReas/reference/folautomreas-rewrite.html#rewrite1","title":"Rewrite.rewrite1","content":"Rewrite.rewrite1 \nrewrite1 \n"},{"uri":"/FolAutomReas/reference/folautomreas-rewrite.html#rewrite","title":"Rewrite.rewrite","content":"Rewrite.rewrite \nrewrite \n"},{"uri":"/FolAutomReas/reference/folautomreas-skolem.html","title":"Skolem","content":"Skolem \n\n Prenex and Skolem normal forms.\n  \nSkolem.simplify1 \nsimplify1 \nSkolem.simplify \nsimplify \nSkolem.nnf \nnnf \nSkolem.pullquants \npullquants \nSkolem.pullq \npullq \nSkolem.prenex \nprenex \nSkolem.pnf \npnf \nSkolem.funcs \nfuncs \nSkolem.functions \nfunctions \nSkolem.skolem \nskolem \nSkolem.skolem2 \nskolem2 \nSkolem.askolemize \naskolemize \nSkolem.specialize \nspecialize \nSkolem.skolemize \nskolemize"},{"uri":"/FolAutomReas/reference/folautomreas-skolem.html#simplify1","title":"Skolem.simplify1","content":"Skolem.simplify1 \nsimplify1 \n\n Performs a simplification routine but just at the first level of the input \n formula \u0060fm\u0060. It eliminates the basic propositional constants \u0060False\u0060 and \n \u0060True\u0060 and also the vacuous universal and existential quanti\uFB01ers (those \n applied to variables that does not occur free in the body).\n \n Whenever \u0060False\u0060 and \u0060True\u0060 occur in combination, there is always a a \n tautology justifying the equivalence with a simpler formula, e.g. \u0060False /\\ \n p \u003C=\u003E False\u0060, \u0060True \\/ p \u003C=\u003E p\u0060, \u0060p ==\u003E False \u003C=\u003E ~p\u0060. At he same time, it \n also eliminates double negations \u0060~~p\u0060.\n \n If x not in FV(p) then forall x. p and exists x. p are logically \n equivalent to p.\n \n \u0060simplify1 (parse @\u0022exists x. P(y)\u0022)\u0060 returns \u0060\u003C\u003CP(y)\u003E\u003E\u0060\n \n \u0060simplify1 (parse @\u0022true ==\u003E exists x. P(x)\u0022)\u0060 returns \u0060\u003C\u003Cexists x. P(x)\u003E\u003E\u0060\n"},{"uri":"/FolAutomReas/reference/folautomreas-skolem.html#simplify","title":"Skolem.simplify","content":"Skolem.simplify \nsimplify \n\n Performs a simplification routine on the input formula \n \u0060fm\u0060 eliminating the basic propositional constants \u0060False\u0060 and \u0060True\u0060\n and also the vacuous universal and existential quanti\uFB01ers (those \n applied to variables that does not occur free in the body).\n \n Whenever \u0060False\u0060 and \u0060True\u0060 occur in combination, there is always a a \n tautology justifying the equivalence with a simpler formula, e.g. \u0060False /\\ \n p \u003C=\u003E False\u0060, \u0060True \\/ p \u003C=\u003E p\u0060, \u0060p ==\u003E False \u003C=\u003E ~p\u0060. At he same time, it \n also eliminates double negations \u0060~~p\u0060.\n \n If x not in FV(p) then forall x. p and exists x. p are logically \n equivalent to p.\n \n While \u0060simplify1\u0060 performs the transformation just at the first level, \n \u0060simplify\u0060 performs it at every levels in a recursive bottom-up sweep.\n \n \u0060simplify (parse @\u0022true ==\u003E (p \u003C=\u003E (p \u003C=\u003E false))\u0022)\u0060 returns \n \u0060\u003C\u003Cp \u003C=\u003E ~p\u003E\u003E\u0060\n \n \u0060simplify (parse @\u0022exists x y z. P(x) ==\u003E Q(z) ==\u003E false\u0022)\u0060 \n returns \u0060\u003C\u003Cexists x z. P(x) ==\u003E ~Q(z)\u003E\u003E\u0060\n"},{"uri":"/FolAutomReas/reference/folautomreas-skolem.html#nnf","title":"Skolem.nnf","content":"Skolem.nnf \nnnf \n\n Transforms the input formula \u0060fm\u0060 in negation normal form.\n \n It eliminates implication and equivalence, and pushes down negations \n through quanti\uFB01ers.\n \n \u0060nnf (parse @\u0022~ exists x. P(x) \u003C=\u003E Q(x)\u0022)\u0060 returns \n \u0060\u003C\u003Cforall x. P(x) /\\ ~Q(x) \\/ ~P(x) /\\ Q(x)\u003E\u003E\u0060\n"},{"uri":"/FolAutomReas/reference/folautomreas-skolem.html#pullquants","title":"Skolem.pullquants","content":"Skolem.pullquants \npullquants \n\n It pulls out quantifiers.\n"},{"uri":"/FolAutomReas/reference/folautomreas-skolem.html#pullq","title":"Skolem.pullq","content":"Skolem.pullq \npullq \n\n calls the main \u0060pullquants\u0060 functions again on the body to pull up \n further quanti\uFB01ers\n"},{"uri":"/FolAutomReas/reference/folautomreas-skolem.html#prenex","title":"Skolem.prenex","content":"Skolem.prenex \nprenex \n\n leaves quanti\uFB01ed formulas alone, and for conjunctions and disjunctions \n recursively prenexes the immediate subformulas and then uses pullquants\n"},{"uri":"/FolAutomReas/reference/folautomreas-skolem.html#pnf","title":"Skolem.pnf","content":"Skolem.pnf \npnf \n\n Transforms the input formula \u0060fm\u0060 in prenex normal form and simplifies it.\n \n * simplifies away False, True, vacuous quanti\uFB01cation, etc.;\n * eliminates implication and equivalence, push down negations;\n * pulls out quanti\uFB01ers.\n \n \u0060pnf (parse @\u0022(forall x. P(x) \\/ R(y)) ==\u003E exists y z. Q(y) \\/ ~(exists z. P\n (z) /\\ Q(z))\u0022)\u0060 \n returns \u0060\u003C\u003Cexists x. forall z. ~P(x) /\\ ~R(y) \\/ Q(x) \\/ ~P(z) \\/ ~Q(z)\u003E\u003E\u0060\n"},{"uri":"/FolAutomReas/reference/folautomreas-skolem.html#funcs","title":"Skolem.funcs","content":"Skolem.funcs \nfuncs \n\n Returns the functions present in the input term \u0060tm\u0060\n \n \u0060funcs (parset @\u0022x \u002B 1\u0022)\u0060 returns \u0060[(\u0022\u002B\u0022, 2); (\u00221\u0022, 0)]\u0060\n"},{"uri":"/FolAutomReas/reference/folautomreas-skolem.html#functions","title":"Skolem.functions","content":"Skolem.functions \nfunctions \n\n Returns the functions present in the input formula \u0060fm\u0060\n \n \u0060functions (parse @\u0022x \u002B 1 \u003E 0 /\\ f(z) \u003E g(z,i)\u0022)\u0060\n returns \u0060[(\u0022\u002B\u0022, 2); (\u00220\u0022, 0); (\u00221\u0022, 0); (\u0022f\u0022, 1); (\u0022g\u0022, 2)]\u0060\n \u0060\n"},{"uri":"/FolAutomReas/reference/folautomreas-skolem.html#skolem","title":"Skolem.skolem","content":"Skolem.skolem \nskolem \n\n Core Skolemization function specifically intended to be used on NNF \n formulas. \n \n It simply recursively descends the formula, Skolemizing any existential \n formulas and then proceeding to subformulas using \u0060skolem2\u0060 for binary \n connectives.\n"},{"uri":"/FolAutomReas/reference/folautomreas-skolem.html#skolem2","title":"Skolem.skolem2","content":"Skolem.skolem2 \nskolem2 \n\n Auxiliary to \u0060skolem\u0060 when dealing with binary connectives. \n It updates the set of functions to avoid with new Skolem functions \n introduced into one formula before tackling the other.\n"},{"uri":"/FolAutomReas/reference/folautomreas-skolem.html#askolemize","title":"Skolem.askolemize","content":"Skolem.askolemize \naskolemize \n\n Overall Skolemization function, intended to be used with any type of \n initial fol formula.\n"},{"uri":"/FolAutomReas/reference/folautomreas-skolem.html#specialize","title":"Skolem.specialize","content":"Skolem.specialize \nspecialize \n\n Removes all universale quantifiers from the input formula \u0060p\u0060.\n \n \u0060specialize \u003C\u003Cforall x y. P(x) /\\ P(y)\u003E\u003E\u0060 returns \u0060\u003C\u003CP(x) /\\ P(y)\u003E\u003E\u0060\n"},{"uri":"/FolAutomReas/reference/folautomreas-skolem.html#skolemize","title":"Skolem.skolemize","content":"Skolem.skolemize \nskolemize \n\n Puts the input formula \u0060fm\u0060 into skolem normal form \n while also removing all universal quantifiers.\n \n It puts the formula in prenex normal form, substitutes existential \n quantifiers with skolem functions and also removes all universal \n quantifiers.\n \n \u0060skolemize (parse @\u0022forall x. exists y. R(x,y)\u0022)\u0060\n returns \u0060\u003C\u003CR(x,f_y(x))\u003E\u003E\u0060\n"},{"uri":"/FolAutomReas/reference/folautomreas-skolems.html","title":"Skolems","content":"Skolems \n\n Skolems.\n  \nSkolems.rename_term \nrename_term \nSkolems.rename_form \nrename_form \nSkolems.skolems \nskolems \nSkolems.skolemizes \nskolemizes"},{"uri":"/FolAutomReas/reference/folautomreas-skolems.html#rename_term","title":"Skolems.rename_term","content":"Skolems.rename_term \nrename_term \n"},{"uri":"/FolAutomReas/reference/folautomreas-skolems.html#rename_form","title":"Skolems.rename_form","content":"Skolems.rename_form \nrename_form \n"},{"uri":"/FolAutomReas/reference/folautomreas-skolems.html#skolems","title":"Skolems.skolems","content":"Skolems.skolems \nskolems \n"},{"uri":"/FolAutomReas/reference/folautomreas-skolems.html#skolemizes","title":"Skolems.skolemizes","content":"Skolems.skolemizes \nskolemizes \n"},{"uri":"/FolAutomReas/reference/folautomreas-stal.html","title":"Stal","content":"Stal \n\n Stalmarck method.\n  \nStal.triplicate \ntriplicate \nStal.atom \natom \nStal.align \nalign \nStal.equate2 \nequate2 \nStal.irredundant \nirredundant \nStal.consequences \nconsequences \nStal.triggers \ntriggers \nStal.trigger \ntrigger \nStal.relevance \nrelevance \nStal.equatecons \nequatecons \nStal.zero_saturate \nzero_saturate \nStal.zero_saturate_and_check \nzero_saturate_and_check \nStal.truefalse \ntruefalse \nStal.equateset \nequateset \nStal.inter \ninter \nStal.reverseq \nreverseq \nStal.stal_intersect \nstal_intersect \nStal.saturate \nsaturate \nStal.splits \nsplits \nStal.saturate_upto \nsaturate_upto \nStal.stalmarck \nstalmarck"},{"uri":"/FolAutomReas/reference/folautomreas-stal.html#triplicate","title":"Stal.triplicate","content":"Stal.triplicate \ntriplicate \n"},{"uri":"/FolAutomReas/reference/folautomreas-stal.html#atom","title":"Stal.atom","content":"Stal.atom \natom \n"},{"uri":"/FolAutomReas/reference/folautomreas-stal.html#align","title":"Stal.align","content":"Stal.align \nalign \n"},{"uri":"/FolAutomReas/reference/folautomreas-stal.html#equate2","title":"Stal.equate2","content":"Stal.equate2 \nequate2 \n"},{"uri":"/FolAutomReas/reference/folautomreas-stal.html#irredundant","title":"Stal.irredundant","content":"Stal.irredundant \nirredundant \n"},{"uri":"/FolAutomReas/reference/folautomreas-stal.html#consequences","title":"Stal.consequences","content":"Stal.consequences \nconsequences \n"},{"uri":"/FolAutomReas/reference/folautomreas-stal.html#triggers","title":"Stal.triggers","content":"Stal.triggers \ntriggers \n"},{"uri":"/FolAutomReas/reference/folautomreas-stal.html#trigger","title":"Stal.trigger","content":"Stal.trigger \ntrigger \n"},{"uri":"/FolAutomReas/reference/folautomreas-stal.html#relevance","title":"Stal.relevance","content":"Stal.relevance \nrelevance \n"},{"uri":"/FolAutomReas/reference/folautomreas-stal.html#equatecons","title":"Stal.equatecons","content":"Stal.equatecons \nequatecons \n"},{"uri":"/FolAutomReas/reference/folautomreas-stal.html#zero_saturate","title":"Stal.zero_saturate","content":"Stal.zero_saturate \nzero_saturate \n"},{"uri":"/FolAutomReas/reference/folautomreas-stal.html#zero_saturate_and_check","title":"Stal.zero_saturate_and_check","content":"Stal.zero_saturate_and_check \nzero_saturate_and_check \n"},{"uri":"/FolAutomReas/reference/folautomreas-stal.html#truefalse","title":"Stal.truefalse","content":"Stal.truefalse \ntruefalse \n"},{"uri":"/FolAutomReas/reference/folautomreas-stal.html#equateset","title":"Stal.equateset","content":"Stal.equateset \nequateset \n"},{"uri":"/FolAutomReas/reference/folautomreas-stal.html#inter","title":"Stal.inter","content":"Stal.inter \ninter \n"},{"uri":"/FolAutomReas/reference/folautomreas-stal.html#reverseq","title":"Stal.reverseq","content":"Stal.reverseq \nreverseq \n"},{"uri":"/FolAutomReas/reference/folautomreas-stal.html#stal_intersect","title":"Stal.stal_intersect","content":"Stal.stal_intersect \nstal_intersect \n"},{"uri":"/FolAutomReas/reference/folautomreas-stal.html#saturate","title":"Stal.saturate","content":"Stal.saturate \nsaturate \n"},{"uri":"/FolAutomReas/reference/folautomreas-stal.html#splits","title":"Stal.splits","content":"Stal.splits \nsplits \n"},{"uri":"/FolAutomReas/reference/folautomreas-stal.html#saturate_upto","title":"Stal.saturate_upto","content":"Stal.saturate_upto \nsaturate_upto \n"},{"uri":"/FolAutomReas/reference/folautomreas-stal.html#stalmarck","title":"Stal.stalmarck","content":"Stal.stalmarck \nstalmarck \n"},{"uri":"/FolAutomReas/reference/folautomreas-tableaux.html","title":"Tableaux","content":"Tableaux \n\n Tableaux, seen as an optimized version of a Prawitz-like procedure.\n  \nTableaux.unify_literals \nunify_literals \nTableaux.unify_complements \nunify_complements \nTableaux.prawitz_loop \nprawitz_loop \nTableaux.prawitz \nprawitz \nTableaux.tableau \ntableau \nTableaux.deepen \ndeepen \nTableaux.tabrefute \ntabrefute \nTableaux.tab \ntab \nTableaux.splittab \nsplittab"},{"uri":"/FolAutomReas/reference/folautomreas-tableaux.html#unify_literals","title":"Tableaux.unify_literals","content":"Tableaux.unify_literals \nunify_literals \nUnifies an input pair of litterals."},{"uri":"/FolAutomReas/reference/folautomreas-tableaux.html#unify_complements","title":"Tableaux.unify_complements","content":"Tableaux.unify_complements \nunify_complements \n"},{"uri":"/FolAutomReas/reference/folautomreas-tableaux.html#prawitz_loop","title":"Tableaux.prawitz_loop","content":"Tableaux.prawitz_loop \nprawitz_loop \n"},{"uri":"/FolAutomReas/reference/folautomreas-tableaux.html#prawitz","title":"Tableaux.prawitz","content":"Tableaux.prawitz \nprawitz \n"},{"uri":"/FolAutomReas/reference/folautomreas-tableaux.html#tableau","title":"Tableaux.tableau","content":"Tableaux.tableau \ntableau \n"},{"uri":"/FolAutomReas/reference/folautomreas-tableaux.html#deepen","title":"Tableaux.deepen","content":"Tableaux.deepen \ndeepen \n"},{"uri":"/FolAutomReas/reference/folautomreas-tableaux.html#tabrefute","title":"Tableaux.tabrefute","content":"Tableaux.tabrefute \ntabrefute \n"},{"uri":"/FolAutomReas/reference/folautomreas-tableaux.html#tab","title":"Tableaux.tab","content":"Tableaux.tab \ntab \n"},{"uri":"/FolAutomReas/reference/folautomreas-tableaux.html#splittab","title":"Tableaux.splittab","content":"Tableaux.splittab \nsplittab \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html","title":"Tactics","content":"Tactics \n \nTactics.goals \ngoals \nTactics.fprint_goal \nfprint_goal \nTactics.print_goal \nprint_goal \nTactics.sprint_goal \nsprint_goal \nTactics.set_goal \nset_goal \nTactics.extract_thm \nextract_thm \nTactics.tac_proof \ntac_proof \nTactics.prove \nprove \nTactics.conj_intro_tac \nconj_intro_tac \nTactics.jmodify \njmodify \nTactics.gen_right_alpha \ngen_right_alpha \nTactics.forall_intro_tac \nforall_intro_tac \nTactics.right_exists \nright_exists \nTactics.exists_intro_tac \nexists_intro_tac \nTactics.imp_intro_tac \nimp_intro_tac \nTactics.assumptate \nassumptate \nTactics.firstassum \nfirstassum \nTactics.using \nusing \nTactics.assumps \nassumps \nTactics.by \nby \nTactics.justify \njustify \nTactics.proof \nproof \nTactics.at \nat \nTactics.once \nonce \nTactics.auto_tac \nauto_tac \nTactics.lemma_tac \nlemma_tac \nTactics.exists_elim_tac \nexists_elim_tac \nTactics.ante_disj \nante_disj \nTactics.disj_elim_tac \ndisj_elim_tac \nTactics.multishunt \nmultishunt \nTactics.assume \nassume \nTactics.note \nnote \nTactics.have \nhave \nTactics.so \nso \nTactics.fix \nfix \nTactics.consider \nconsider \nTactics.take \ntake \nTactics.cases \ncases \nTactics.conclude \nconclude \nTactics.our \nour \nTactics.thesis \nthesis \nTactics.qed \nqed \nTactics.test001 \ntest001 \nTactics.double_th \ndouble_th \nTactics.testcase \ntestcase \nTactics.test002 \ntest002"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#fprint_goal","title":"Tactics.fprint_goal","content":"Tactics.fprint_goal \nfprint_goal \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#print_goal","title":"Tactics.print_goal","content":"Tactics.print_goal \nprint_goal \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#sprint_goal","title":"Tactics.sprint_goal","content":"Tactics.sprint_goal \nsprint_goal \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#set_goal","title":"Tactics.set_goal","content":"Tactics.set_goal \nset_goal \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#extract_thm","title":"Tactics.extract_thm","content":"Tactics.extract_thm \nextract_thm \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#tac_proof","title":"Tactics.tac_proof","content":"Tactics.tac_proof \ntac_proof \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#prove","title":"Tactics.prove","content":"Tactics.prove \nprove \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#conj_intro_tac","title":"Tactics.conj_intro_tac","content":"Tactics.conj_intro_tac \nconj_intro_tac \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#jmodify","title":"Tactics.jmodify","content":"Tactics.jmodify \njmodify \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#gen_right_alpha","title":"Tactics.gen_right_alpha","content":"Tactics.gen_right_alpha \ngen_right_alpha \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#forall_intro_tac","title":"Tactics.forall_intro_tac","content":"Tactics.forall_intro_tac \nforall_intro_tac \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#right_exists","title":"Tactics.right_exists","content":"Tactics.right_exists \nright_exists \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#exists_intro_tac","title":"Tactics.exists_intro_tac","content":"Tactics.exists_intro_tac \nexists_intro_tac \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#imp_intro_tac","title":"Tactics.imp_intro_tac","content":"Tactics.imp_intro_tac \nimp_intro_tac \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#assumptate","title":"Tactics.assumptate","content":"Tactics.assumptate \nassumptate \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#firstassum","title":"Tactics.firstassum","content":"Tactics.firstassum \nfirstassum \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#using","title":"Tactics.using","content":"Tactics.using \nusing \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#assumps","title":"Tactics.assumps","content":"Tactics.assumps \nassumps \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#by","title":"Tactics.by","content":"Tactics.by \nby \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#justify","title":"Tactics.justify","content":"Tactics.justify \njustify \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#proof","title":"Tactics.proof","content":"Tactics.proof \nproof \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#at","title":"Tactics.at","content":"Tactics.at \nat \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#once","title":"Tactics.once","content":"Tactics.once \nonce \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#auto_tac","title":"Tactics.auto_tac","content":"Tactics.auto_tac \nauto_tac \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#lemma_tac","title":"Tactics.lemma_tac","content":"Tactics.lemma_tac \nlemma_tac \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#exists_elim_tac","title":"Tactics.exists_elim_tac","content":"Tactics.exists_elim_tac \nexists_elim_tac \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#ante_disj","title":"Tactics.ante_disj","content":"Tactics.ante_disj \nante_disj \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#disj_elim_tac","title":"Tactics.disj_elim_tac","content":"Tactics.disj_elim_tac \ndisj_elim_tac \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#multishunt","title":"Tactics.multishunt","content":"Tactics.multishunt \nmultishunt \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#assume","title":"Tactics.assume","content":"Tactics.assume \nassume \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#note","title":"Tactics.note","content":"Tactics.note \nnote \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#have","title":"Tactics.have","content":"Tactics.have \nhave \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#so","title":"Tactics.so","content":"Tactics.so \nso \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#fix","title":"Tactics.fix","content":"Tactics.fix \nfix \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#consider","title":"Tactics.consider","content":"Tactics.consider \nconsider \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#take","title":"Tactics.take","content":"Tactics.take \ntake \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#cases","title":"Tactics.cases","content":"Tactics.cases \ncases \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#conclude","title":"Tactics.conclude","content":"Tactics.conclude \nconclude \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#our","title":"Tactics.our","content":"Tactics.our \nour \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#thesis","title":"Tactics.thesis","content":"Tactics.thesis \nthesis \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#qed","title":"Tactics.qed","content":"Tactics.qed \nqed \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#test001","title":"Tactics.test001","content":"Tactics.test001 \ntest001 \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#double_th","title":"Tactics.double_th","content":"Tactics.double_th \ndouble_th \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#testcase","title":"Tactics.testcase","content":"Tactics.testcase \ntestcase \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics.html#test002","title":"Tactics.test002","content":"Tactics.test002 \ntest002 \n"},{"uri":"/FolAutomReas/reference/folautomreas-tactics-goals.html","title":"goals","content":"goals \n \ngoals.Goals \nGoals"},{"uri":"/FolAutomReas/reference/folautomreas-tactics-goals.html#Goals","title":"goals.Goals","content":"goals.Goals \nGoals \n"},{"uri":"/FolAutomReas/reference/folautomreas-unif.html","title":"Unif","content":"Unif \n\n Unification for first order terms.\n  \nUnif.istriv \nistriv \nUnif.unify \nunify \nUnif.solve \nsolve \nUnif.fullunify \nfullunify \nUnif.unify_and_apply \nunify_and_apply"},{"uri":"/FolAutomReas/reference/folautomreas-unif.html#istriv","title":"Unif.istriv","content":"Unif.istriv \nistriv \n\n Checks if the assignment \\(x \\mapsto t\\), added to \u003Ccode\u003Eenv\u003C/code\u003E, \n is trivial or cyclic.\n "},{"uri":"/FolAutomReas/reference/folautomreas-unif.html#unify","title":"Unif.unify","content":"Unif.unify \nunify \n\n Main unification procedure.\n  \n\n It applies some transformations to \u003Ccode\u003Eeqs\u003C/code\u003E and incorporates the \n resulting variable-term mappings into \u003Ccode\u003Eenv\u003C/code\u003E.\n \n \u003Ccode\u003Eenv\u003C/code\u003E might contain mappings that could map a variable to a term \n containing other variables that are themselves assigned: for example \n \\(x \\mapsto y\\) and \\(y \\mapsto z\\) instead of just \\(x \\mapsto z\\) \n directly. The call to \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-unif.html#istriv\u0022\u003EUnif.istriv\u003C/a\u003E guarantees \n that there is no cycle or detects it and stops immediately the unification \n process with a failure.\n "},{"uri":"/FolAutomReas/reference/folautomreas-unif.html#solve","title":"Unif.solve","content":"Unif.solve \nsolve \nRemoves useless mappings from an environment of variable-term \n mappings \u003Ccode\u003Eenv\u003C/code\u003E returned by \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-unif.html#unify\u0022\u003EUnif.unify\u003C/a\u003E, \n giving a most general unifier (MGU).\n  \nThe function never fails. However, it would cause a StackOverflow \n crash if called on a cyclic \u003Ccode\u003Eenv\u003C/code\u003E. \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-unif.html#unify\u0022\u003EUnif.unify\u003C/a\u003E \n is specifically designed not to produce cyclic mappings."},{"uri":"/FolAutomReas/reference/folautomreas-unif.html#fullunify","title":"Unif.fullunify","content":"Unif.fullunify \nfullunify \n\n Returns an MGU for the input list of term-term pairs \u003Ccode\u003Eeqs\u003C/code\u003E, if it is \n actually unifiable.\n "},{"uri":"/FolAutomReas/reference/folautomreas-unif.html#unify_and_apply","title":"Unif.unify_and_apply","content":"Unif.unify_and_apply \nunify_and_apply \n\n Finds an MGU for a list of term-term pairs \u003Ccode\u003Eeqs\u003C/code\u003E, if it is \n unifiable, and applies the instantiation to give the unified result.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-fpf.html","title":"Fpf","content":"Fpf \n\n Polymorphic Finite Partial functions via Patricia Trees.\n  \nFpf.func\u003C\u0027a, \u0027b\u003E \nfunc\u003C\u0027a, \u0027b\u003E \nFpf.undefined \nundefined \nFpf.is_undefined \nis_undefined \nFpf.mapf \nmapf \nFpf.foldl \nfoldl \nFpf.graph \ngraph \nFpf.dom \ndom \nFpf.ran \nran \nFpf.applyd \napplyd \nFpf.apply \napply \nFpf.tryapplyd \ntryapplyd \nFpf.tryapplyl \ntryapplyl \nFpf.defined \ndefined \nFpf.undefine \nundefine \nFpf.(|-\u003E) \n(|-\u003E) \nFpf.(|=\u003E) \n(|=\u003E) \nFpf.fpf \nfpf \nFpf.valmod \nvalmod \nFpf.undef \nundef"},{"uri":"/FolAutomReas/reference/folautomreas-lib-fpf.html#undefined","title":"Fpf.undefined","content":"Fpf.undefined \nundefined \nThe empty, or everywhere undefined, fpf."},{"uri":"/FolAutomReas/reference/folautomreas-lib-fpf.html#is_undefined","title":"Fpf.is_undefined","content":"Fpf.is_undefined \nis_undefined \n\n Returns true if the function is completely undefined, false\n otherwise.\n  \n\n In case of equality comparison worries, better use this.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-fpf.html#mapf","title":"Fpf.mapf","content":"Fpf.mapf \nmapf \n\n Builds a new fpf whose values are the results of applying the given\n function to the values of the input fpf.\n  \n\n It is, for finite partial functions, the same operation that \u003Ca href=\u0022https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-listmodule#Map\u0022\u003EListModule.Map\u003C/a\u003E is for \u003Ca href=\u0022https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-list-1\u0022\u003Elist\u003C/a\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-fpf.html#foldl","title":"Fpf.foldl","content":"Fpf.foldl \nfoldl \n\n Applies a function to the argument and value of an fpf, threading\n an accumulator argument through the computation. Take the second\n argument, and apply the function to it and the first argument and value\n of the fpf. Then feed this result into the function along with the\n second argument and value and so on. Return the final result. If the\n input function is \u003Ccode\u003Ef\u003C/code\u003E and the fpf\u0027s arguments and values are \u003Ccode\u003E\n (i0,j0)...(iN,jN)\u003C/code\u003E then\n computes \u003Ccode\u003Ef (... (f s i0 j0) i1 j1 ...) iN jN\u003C/code\u003E.\n  \n\n It is, for finite partial functions, the same operation that \u003Ca href=\u0022https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-listmodule#Fold\u0022\u003EListModule.Fold\u003C/a\u003E is for \u003Ca href=\u0022https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-list-1\u0022\u003Elist\u003C/a\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-fpf.html#graph","title":"Fpf.graph","content":"Fpf.graph \ngraph \nReturns the graph of the input \u003Ccode\u003Efpf\u003C/code\u003E."},{"uri":"/FolAutomReas/reference/folautomreas-lib-fpf.html#dom","title":"Fpf.dom","content":"Fpf.dom \ndom \nReturns the domain of the input \u003Ccode\u003Efpf\u003C/code\u003E."},{"uri":"/FolAutomReas/reference/folautomreas-lib-fpf.html#ran","title":"Fpf.ran","content":"Fpf.ran \nran \nReturns the range of the input \u003Ccode\u003Efpf\u003C/code\u003E."},{"uri":"/FolAutomReas/reference/folautomreas-lib-fpf.html#applyd","title":"Fpf.applyd","content":"Fpf.applyd \napplyd \n\n Applies \u003Ccode\u003Efpf\u003C/code\u003E to \u003Ccode\u003Ea\u003C/code\u003E and returns the corresponding value, if\n \u003Ccode\u003Efpf\u003C/code\u003E is actually defined for it, otherwise applies \u003Ccode\u003Ed\u003C/code\u003E to\n \u003Ccode\u003Ea\u003C/code\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-fpf.html#apply","title":"Fpf.apply","content":"Fpf.apply \napply \n\n Applies \u003Ccode\u003Efpf\u003C/code\u003E to \u003Ccode\u003Ea\u003C/code\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-fpf.html#tryapplyd","title":"Fpf.tryapplyd","content":"Fpf.tryapplyd \ntryapplyd \n\n Tries to apply \u003Ccode\u003Efpf\u003C/code\u003E to an argument \u003Ccode\u003Ea\u003C/code\u003E, returning \u003Ccode\u003Ed\u003C/code\u003E\n as a default value if it fails.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-fpf.html#tryapplyl","title":"Fpf.tryapplyl","content":"Fpf.tryapplyl \ntryapplyl \n\n Tries to apply an \u003Ccode\u003Efpf\u003C/code\u003E whose values are lists to an argument \n \u003Ccode\u003Ea\u003C/code\u003E,returning \u003Ccode\u003E[]\u003C/code\u003E as a default value if it fails.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-fpf.html#defined","title":"Fpf.defined","content":"Fpf.defined \ndefined \n\n Checks if \u003Ccode\u003Efpf\u003C/code\u003E is defined for the argument \u003Ccode\u003Ea\u003C/code\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-fpf.html#undefine","title":"Fpf.undefine","content":"Fpf.undefine \nundefine \n\n Undefines the \u003Ccode\u003Efpf\u003C/code\u003E for the given argument \u003Ccode\u003Ea\u003C/code\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-fpf.html#(|-\u003E)","title":"Fpf.(|-\u003E)","content":"Fpf.(|-\u003E) \n(|-\u003E) \n\n Updates the \u003Ccode\u003Efpf\u003C/code\u003E with a new mapping \u003Ccode\u003Eargument\u003C/code\u003E-\u003Ccode\u003Evalue\u003C/code\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-fpf.html#(|=\u003E)","title":"Fpf.(|=\u003E)","content":"Fpf.(|=\u003E) \n(|=\u003E) \n\n Creates a point function: a special case of fpf defined only for a\n single argument \u003Ccode\u003Ea\u003C/code\u003E mapped to a value \u003Ccode\u003Eb\u003C/code\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-fpf.html#fpf","title":"Fpf.fpf","content":"Fpf.fpf \nfpf \n\n Creates a new fpf from two lists \u003Ccode\u003Exs\u003C/code\u003E and \u003Ccode\u003Eys\u003C/code\u003E representing\n its domain and range. It associates argument to value based on the\n order of items in the two lists.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-fpf.html#valmod","title":"Fpf.valmod","content":"Fpf.valmod \nvalmod \n\n Updates to \u003Ccode\u003Eb\u003C/code\u003E the value of a normal F# function \u003Ccode\u003Ef\u003C/code\u003E for \n the argument \u003Ccode\u003Ea\u003C/code\u003E, creating, instead, a new mapping \n \u003Ccode\u003Ea\u003C/code\u003E-\u003Ccode\u003Eb\u003C/code\u003E if \u003Ccode\u003Ef\u003C/code\u003E it\u0027s not already defined for \u003Ccode\u003Ea\u003C/code\u003E. \n Then it applies this modified function to the argument \u003Ccode\u003Ex\u003C/code\u003E.\n  \n\n Corresponds to the mathematical notation \\((a \\mapsto b)f\\) and it is \n the same thing of what \u003Ccode\u003E(x |-\u0026gt; y) f\u003C/code\u003E is in the context of the \n finite partial functions.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-fpf.html#undef","title":"Fpf.undef","content":"Fpf.undef \nundef \n\n A function undefined for any argument \u003Ccode\u003Ex\u003C/code\u003E and that always fails.\n  \n\n It is to be the same thing of what \n \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-lib-fpf.html#undefined\u0022\u003EFpf.undefined\u003C/a\u003E is in the context of \n the finite partial functions.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-fpf-func-2.html","title":"func\u003C\u0027a, \u0027b\u003E","content":"func\u003C\u0027a, \u0027b\u003E \n\n Type of polymorphic finite partial functions represented as a patricia\n tree, \u003Ccode\u003E\u0026#39;a\u003C/code\u003E being the type of the arguments and \u003Ccode\u003E\u0026#39;b\u003C/code\u003E that of\n the values.\n  \nfunc\u003C\u0027a, \u0027b\u003E.Empty \nEmpty \nfunc\u003C\u0027a, \u0027b\u003E.Leaf \nLeaf \nfunc\u003C\u0027a, \u0027b\u003E.Branch \nBranch"},{"uri":"/FolAutomReas/reference/folautomreas-lib-fpf-func-2.html#Empty","title":"func\u003C\u0027a, \u0027b\u003E.Empty","content":"func\u003C\u0027a, \u0027b\u003E.Empty \nEmpty \n\n Represents the empty, or everywhere undefined, FPF.\n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-fpf-func-2.html#Leaf","title":"func\u003C\u0027a, \u0027b\u003E.Leaf","content":"func\u003C\u0027a, \u0027b\u003E.Leaf \nLeaf \n\n Represents a mapping from an element of the domain to an element of\n the codomain.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-fpf-func-2.html#Branch","title":"func\u003C\u0027a, \u0027b\u003E.Branch","content":"func\u003C\u0027a, \u0027b\u003E.Branch \nBranch \nUsed to store more then one mapping."},{"uri":"/FolAutomReas/reference/folautomreas-lib-function.html","title":"Function","content":"Function \nFunctions over predicates and functions. \nFunction.non \nnon \nFunction.check \ncheck \nFunction.funpow \nfunpow \nFunction.can \ncan \nFunction.repeat \nrepeat"},{"uri":"/FolAutomReas/reference/folautomreas-lib-function.html#non","title":"Function.non","content":"Function.non \nnon \n\n Applies the inverse of a predicate \u003Ccode\u003Ep\u003C/code\u003E to an argument \u003Ccode\u003Ex\u003C/code\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-function.html#check","title":"Function.check","content":"Function.check \ncheck \n\n Checks if the value \u003Ccode\u003Ex\u003C/code\u003E satisfies the predicate \u003Ccode\u003Ep\u003C/code\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-function.html#funpow","title":"Function.funpow","content":"Function.funpow \nfunpow \n\n Iterates the application of a function \u003Ccode\u003Ef\u003C/code\u003E to an argument \u003Ccode\u003Ex\u003C/code\u003E \n a fixed number \u003Ccode\u003En\u003C/code\u003E of times.\n  \n\u003Ccode\u003Efunpow n f x\u003C/code\u003E applies \u003Ccode\u003Ef\u003C/code\u003E to \u003Ccode\u003Ex\u003C/code\u003E for \u003Ccode\u003En\u003C/code\u003E times, \n giving the result \u003Ccode\u003Ef (f ... (f x)...)\u003C/code\u003E where the number of \n \u003Ccode\u003Ef\u003C/code\u003E\u0027s is \u003Ccode\u003En\u003C/code\u003E. \u003Ccode\u003Efunpow 0 f x\u003C/code\u003E returns \u003Ccode\u003Ex\u003C/code\u003E. If \n \u003Ccode\u003En\u003C/code\u003E is negative, it is treated as \u003Ccode\u003E0\u003C/code\u003E. It fails, if any of \n the \u003Ccode\u003En\u003C/code\u003E applications of \u003Ccode\u003Ef\u003C/code\u003E fail.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-function.html#can","title":"Function.can","content":"Function.can \ncan \n\n Tests if an input function \u003Ccode\u003Ef\u003C/code\u003E can be applied to an argument \n \u003Ccode\u003Ex\u003C/code\u003E without failing.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-function.html#repeat","title":"Function.repeat","content":"Function.repeat \nrepeat \n\n Repeats the application of a function \u003Ccode\u003Ef\u003C/code\u003E to an argument \u003Ccode\u003Ex\u003C/code\u003E \n until it fails.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-lexer.html","title":"Lexer","content":"Lexer \nLexical analysis. \nLexer.matches \nmatches \nLexer.space \nspace \nLexer.punctuation \npunctuation \nLexer.symbolic \nsymbolic \nLexer.numeric \nnumeric \nLexer.alphanumeric \nalphanumeric \nLexer.lexwhile \nlexwhile \nLexer.lex \nlex"},{"uri":"/FolAutomReas/reference/folautomreas-lib-lexer.html#matches","title":"Lexer.matches","content":"Lexer.matches \nmatches \n\n Creates a pattern matching function based on the input string \u003Ccode\u003Es\u003C/code\u003E \n as the pattern.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-lexer.html#space","title":"Lexer.space","content":"Lexer.space \nspace \n\n Classifies single character strings as spaces.\n  \n\n Tabs and new lines are also considered spaces.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-lexer.html#punctuation","title":"Lexer.punctuation","content":"Lexer.punctuation \npunctuation \n\n Classifies single character strings as punctuation symbols: \n \u003Ccode\u003E()[]{},\u003C/code\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-lexer.html#symbolic","title":"Lexer.symbolic","content":"Lexer.symbolic \nsymbolic \n\n Classifies single character strings as symbolic: \n \u003Ccode\u003E~\u0060!@#$%^\u0026amp;*-\u002B=|\\\\:;\u0026lt;\u0026gt;.?/\u003C/code\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-lexer.html#numeric","title":"Lexer.numeric","content":"Lexer.numeric \nnumeric \n\n Classifies single character strings as numeric.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-lexer.html#alphanumeric","title":"Lexer.alphanumeric","content":"Lexer.alphanumeric \nalphanumeric \n\n Classifies single character strings as alphanumeric.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-lexer.html#lexwhile","title":"Lexer.lexwhile","content":"Lexer.lexwhile \nlexwhile \n\n Takes a property \u003Ccode\u003Eprop\u003C/code\u003E of characters (such as one of the \n classifying predicates: \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-lib-lexer.html#space\u0022\u003ELexer.space\u003C/a\u003E, \n \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-lib-lexer.html#punctuation\u0022\u003ELexer.punctuation\u003C/a\u003E, \n \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-lib-lexer.html#symbolic\u0022\u003ELexer.symbolic\u003C/a\u003E, \n \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-lib-lexer.html#numeric\u0022\u003ELexer.numeric\u003C/a\u003E, \n \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-lib-lexer.html#alphanumeric\u0022\u003ELexer.alphanumeric\u003C/a\u003E) and a list of \n single character strings \u003Ccode\u003Einp\u003C/code\u003E, separating off as a string \n the longest initial sequence of that list of characters \n satisfying \u003Ccode\u003Eprop\u003C/code\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-lexer.html#lex","title":"Lexer.lex","content":"Lexer.lex \nlex \n\n Lexical analyser. \n  \n\n It maps a list of input characters \u003Ccode\u003Einp\u003C/code\u003E into a \n list of token strings.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-list.html","title":"List","content":"List \n\n Handy functions for list manipulation.\n  \nList.last \nlast \nList.butlast \nbutlast \nList.allpairs \nallpairs \nList.distinctpairs \ndistinctpairs \nList.chop_list \nchop_list \nList.insertat \ninsertat \nList.index \nindex \nList.earlier \nearlier \nList.assoc \nassoc \nList.rev_assoc \nrev_assoc"},{"uri":"/FolAutomReas/reference/folautomreas-lib-list.html#last","title":"List.last","content":"List.last \nlast \n\n Returns the last element of the list. \n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-list.html#butlast","title":"List.butlast","content":"List.butlast \nbutlast \n\n Computes the sub-list of a list consisting of all but the last element.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-list.html#allpairs","title":"List.allpairs","content":"List.allpairs \nallpairs \n\n Computes the list of all results from applying the function \u003Ccode\u003Ef\u003C/code\u003E to \n pairs from the two input lists \u003Ccode\u003El1\u003C/code\u003E and \u003Ccode\u003El2\u003C/code\u003E.\n  \n\u003Ccode\u003Eallpairs f [x1;...;xm] [y1;...;yn]\u003C/code\u003E returns the list of results \n \u003Ccode\u003E[f x1 y1; f x1 y2; ... ; f x1 yn; f x2 y1 ; f x2 y2 ...; f xm y1; \n f xm y2 ...; f xm yn]\u003C/code\u003E"},{"uri":"/FolAutomReas/reference/folautomreas-lib-list.html#distinctpairs","title":"List.distinctpairs","content":"List.distinctpairs \ndistinctpairs \n\n Produces all pairs of distinct elements from a single list.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-list.html#chop_list","title":"List.chop_list","content":"List.chop_list \nchop_list \n\n Chops a list \u003Ccode\u003El\u003C/code\u003E into two parts at the specified index \u003Ccode\u003En\u003C/code\u003E.\n  \n\u003Ccode\u003Echop_list i [x1;...;xn]\u003C/code\u003E returns \n \u003Ccode\u003E([x0;...;xi-1],[xi;...;xn])\u003C/code\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-list.html#insertat","title":"List.insertat","content":"List.insertat \ninsertat \n\n Return a new list with a new item inserted before the given index.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-list.html#index","title":"List.index","content":"List.index \nindex \n\n Returns the index of the first element in the list \u003Ccode\u003Exs\u003C/code\u003E that \n equals \u003Ccode\u003Ex\u003C/code\u003E. Raises \u003Ccode\u003EKeyNotFoundException\u003C/code\u003E if no such element \n exists. \n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-list.html#earlier","title":"List.earlier","content":"List.earlier \nearlier \n\n Checks if \u003Ccode\u003Ex\u003C/code\u003E comes earlier than \u003Ccode\u003Ey\u003C/code\u003E in list \u003Ccode\u003El\u003C/code\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-list.html#assoc","title":"List.assoc","content":"List.assoc \nassoc \n\n Searches a list of pairs \u003Ccode\u003El\u003C/code\u003E for a pair whose first component \n equals a specified value \u003Ccode\u003Ea\u003C/code\u003E, failing if no matching is found.\n  \n\u003Ccode\u003Eassoc a [(a1,b1);...;(an,bn)]\u003C/code\u003E returns the first \u003Ccode\u003Ebi\u003C/code\u003E in the \n list such that \u003Ccode\u003Eai\u003C/code\u003E equals \u003Ccode\u003Ea\u003C/code\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-list.html#rev_assoc","title":"List.rev_assoc","content":"List.rev_assoc \nrev_assoc \n\n Searches a list of pairs \u003Ccode\u003El\u003C/code\u003E for a pair whose second component \n equals a specified value \u003Ccode\u003Eb\u003C/code\u003E, failing if no matching is found.\n  \n\u003Ccode\u003Erev_assoc b [(a1,b1);...;(an,bn)]\u003C/code\u003E returns the first \u003Ccode\u003Eai\u003C/code\u003E in \n the list such that \u003Ccode\u003Ebi\u003C/code\u003E equals \u003Ccode\u003Eb\u003C/code\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-num.html","title":"Num","content":"Num \n\n Arbitrary precision numbers.\n \nNum.Num \nNum \nNum.num \nnum \nNum.ratio \nratio \nNum.num_of_int \nnum_of_int \nNum.num_of_string \nnum_of_string \nNum.(=/) \n(=/) \nNum.gcd_num \ngcd_num \nNum.lcm_num \nlcm_num \nNum.first \nfirst"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num.html#num_of_int","title":"Num.num_of_int","content":"Num.num_of_int \nnum_of_int \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num.html#num_of_string","title":"Num.num_of_string","content":"Num.num_of_string \nnum_of_string \n\n Convert a string to a number.\n Raise Failure \u0022num_of_string\u0022 if the given string is not a valid    representation of an integer\n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num.html#(=/)","title":"Num.(=/)","content":"Num.(=/) \n(=/) \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num.html#gcd_num","title":"Num.gcd_num","content":"Num.gcd_num \ngcd_num \n\n Computes greatest common divisor of two unlimited-precision integers.\n \n The call gcd_num m n for two unlimited-precision (type num) integers m and  n \n returns the (positive) greatest common divisor of m and n. If both m and n  are zero, \n it returns zero.\n \n Fails if either number is not an integer (the type num supports arbitrary   rationals).\n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num.html#lcm_num","title":"Num.lcm_num","content":"Num.lcm_num \nlcm_num \n\n Computes lowest common multiple of two unlimited-precision integers.\n \n The call lcm_num m n for two unlimited-precision (type num) integers m and  n \n returns the(positive) lowest common multiple of m and n. If either m or n   (or both) \n are both zero, it returns zero.\n \n Fails if either number is not an integer (the type num supports arbitrary   rationals).\n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num.html#first","title":"Num.first","content":"Num.first \nfirst \n\n First number starting at n for which p succeeds.\n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-num.html","title":"Num","content":"Num \n\n arbitrary-precision rational numbers derived from OCaml equivalent\n \nNum.IsZero \nIsZero \nNum.Abs \nAbs \nNum.Floor \nFloor \nNum.Max \nMax \nNum.Min \nMin \nNum.Parse \nParse \nNum.Pow \nPow \nNum.Pow \nPow \nNum.Quotient \nQuotient \nNum.Round \nRound \nNum.Sign \nSign \nNum.Truncate \nTruncate \nNum.(\u002B) \n(\u002B) \nNum.(/) \n(/) \nNum.(%) \n(%) \nNum.(*) \n(*) \nNum.(-) \n(-) \nNum.(~-) \n(~-) \nNum.Zero \nZero \nNum.One \nOne \nNum.Int \nInt \nNum.Big_int \nBig_int \nNum.Ratio \nRatio"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-num.html#IsZero","title":"Num.IsZero","content":"Num.IsZero \nIsZero \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-num.html#Abs","title":"Num.Abs","content":"Num.Abs \nAbs \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-num.html#Floor","title":"Num.Floor","content":"Num.Floor \nFloor \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-num.html#Max","title":"Num.Max","content":"Num.Max \nMax \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-num.html#Min","title":"Num.Min","content":"Num.Min \nMin \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-num.html#Parse","title":"Num.Parse","content":"Num.Parse \nParse \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-num.html#Pow","title":"Num.Pow","content":"Num.Pow \nPow \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-num.html#Pow","title":"Num.Pow","content":"Num.Pow \nPow \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-num.html#Quotient","title":"Num.Quotient","content":"Num.Quotient \nQuotient \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-num.html#Round","title":"Num.Round","content":"Num.Round \nRound \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-num.html#Sign","title":"Num.Sign","content":"Num.Sign \nSign \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-num.html#Truncate","title":"Num.Truncate","content":"Num.Truncate \nTruncate \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-num.html#(\u002B)","title":"Num.(\u002B)","content":"Num.(\u002B) \n(\u002B) \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-num.html#(/)","title":"Num.(/)","content":"Num.(/) \n(/) \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-num.html#(%)","title":"Num.(%)","content":"Num.(%) \n(%) \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-num.html#(*)","title":"Num.(*)","content":"Num.(*) \n(*) \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-num.html#(-)","title":"Num.(-)","content":"Num.(-) \n(-) \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-num.html#(~-)","title":"Num.(~-)","content":"Num.(~-) \n(~-) \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-num.html#Zero","title":"Num.Zero","content":"Num.Zero \nZero \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-num.html#One","title":"Num.One","content":"Num.One \nOne \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-num.html#Int","title":"Num.Int","content":"Num.Int \nInt \n\n 32-bit signed integer.\n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-num.html#Big_int","title":"Num.Big_int","content":"Num.Big_int \nBig_int \n\n Arbitrary-precision integer.\n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-num.html#Ratio","title":"Num.Ratio","content":"Num.Ratio \nRatio \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-num-0.html","title":"num","content":"num \n \nnum.IsZero \nIsZero \nnum.Zero \nZero \nnum.One \nOne"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-num-0.html#IsZero","title":"num.IsZero","content":"num.IsZero \nIsZero \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-num-0.html#Zero","title":"num.Zero","content":"num.Zero \nZero \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-num-0.html#One","title":"num.One","content":"num.One \nOne \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-ratio.html","title":"ratio","content":"ratio \n\n Infinite-precision rational number.\n \nratio.IsPositive \nIsPositive \nratio.Numerator \nNumerator \nratio.IsZero \nIsZero \nratio.IsOne \nIsOne \nratio.IsNegative \nIsNegative \nratio.Sign \nSign \nratio.IsInteger \nIsInteger \nratio.Denominator \nDenominator \nratio.StructuredDisplayString \nStructuredDisplayString \nratio.Zero \nZero \nratio.One \nOne"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-ratio.html#IsPositive","title":"ratio.IsPositive","content":"ratio.IsPositive \nIsPositive \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-ratio.html#Numerator","title":"ratio.Numerator","content":"ratio.Numerator \nNumerator \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-ratio.html#IsZero","title":"ratio.IsZero","content":"ratio.IsZero \nIsZero \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-ratio.html#IsOne","title":"ratio.IsOne","content":"ratio.IsOne \nIsOne \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-ratio.html#IsNegative","title":"ratio.IsNegative","content":"ratio.IsNegative \nIsNegative \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-ratio.html#Sign","title":"ratio.Sign","content":"ratio.Sign \nSign \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-ratio.html#IsInteger","title":"ratio.IsInteger","content":"ratio.IsInteger \nIsInteger \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-ratio.html#Denominator","title":"ratio.Denominator","content":"ratio.Denominator \nDenominator \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-ratio.html#StructuredDisplayString","title":"ratio.StructuredDisplayString","content":"ratio.StructuredDisplayString \nStructuredDisplayString \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-ratio.html#Zero","title":"ratio.Zero","content":"ratio.Zero \nZero \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-num-ratio.html#One","title":"ratio.One","content":"ratio.One \nOne \n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-parser.html","title":"Parser","content":"Parser \nGeneric functions for parsing. \nParser.make_parser \nmake_parser \nParser.parse_ginfix \nparse_ginfix \nParser.parse_left_infix \nparse_left_infix \nParser.parse_right_infix \nparse_right_infix \nParser.parse_list \nparse_list \nParser.papply \npapply \nParser.nextin \nnextin \nParser.parse_bracketed \nparse_bracketed"},{"uri":"/FolAutomReas/reference/folautomreas-lib-parser.html#make_parser","title":"Parser.make_parser","content":"Parser.make_parser \nmake_parser \n\n Generic function to impose lexing and exhaustion checking on a parser. \n  \n\n A wrapper function that explodes the input string, lexically analyzes \n it, parses the sequence of tokens and then internally checks that no \n input remains unparsed.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-parser.html#parse_ginfix","title":"Parser.parse_ginfix","content":"Parser.parse_ginfix \nparse_ginfix \n\n General parsing of iterated infixes.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-parser.html#parse_left_infix","title":"Parser.parse_left_infix","content":"Parser.parse_left_infix \nparse_left_infix \n\n Parses left infix.\n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-parser.html#parse_right_infix","title":"Parser.parse_right_infix","content":"Parser.parse_right_infix \nparse_right_infix \n\n Parses right infix.\n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-parser.html#parse_list","title":"Parser.parse_list","content":"Parser.parse_list \nparse_list \n\n Parses a list: used to parse the list of arguments to a function.\n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-parser.html#papply","title":"Parser.papply","content":"Parser.papply \npapply \n\n Applies a function to the first element of a pair, the idea being to \n modify the returned abstract syntax tree while leaving the \u0027unparsed \n input\u0027 alone.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-parser.html#nextin","title":"Parser.nextin","content":"Parser.nextin \nnextin \n\n Checks if the head of a list (typically the list of unparsed input) is some \n particular item, but also ?rst checks that the list is nonempty before \n looking at its head.\n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-parser.html#parse_bracketed","title":"Parser.parse_bracketed","content":"Parser.parse_bracketed \nparse_bracketed \n\n Deals with the common situation of syntactic items enclosed in brackets. It \n simply calls the subparser and then checks and eliminates the closing \n bracket. In principle, the terminating character can be anything, so this \n function could equally be used for other purposes, but we will always use \n \u0027)\u0027 for the cbra (\u0027closing bracket\u0027) argument.\n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-partition.html","title":"Partition","content":"Partition \n\n Equivalence relations (or partitions, equivalence classes) on finite sets.\n  \n\n See also \u003Ca target=\u0022_blank\u0022 href=\u0022https://en.wikipedia.org/wiki/Disjoint-set_data_structure\u0022\u003EDisjoint set/Union Find data structure\u003C/a\u003E \n on Wikipedia.\n  \nPartition.partition\u003C\u0027a\u003E \npartition\u003C\u0027a\u003E \nPartition.pnode\u003C\u0027a\u003E \npnode\u003C\u0027a\u003E \nPartition.unequal \nunequal \nPartition.equated \nequated \nPartition.terminus \nterminus \nPartition.tryterminus \ntryterminus \nPartition.canonize \ncanonize \nPartition.equivalent \nequivalent \nPartition.equate \nequate"},{"uri":"/FolAutomReas/reference/folautomreas-lib-partition.html#unequal","title":"Partition.unequal","content":"Partition.unequal \nunequal \nThe empty partition: used to define new partitions."},{"uri":"/FolAutomReas/reference/folautomreas-lib-partition.html#equated","title":"Partition.equated","content":"Partition.equated \nequated \n\n Returns the domain of the partition \u003Ccode\u003Eptn\u003C/code\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-partition.html#terminus","title":"Partition.terminus","content":"Partition.terminus \nterminus \n\n Searches for the canonical representative of the \u003Ccode\u003Eptn\u003C/code\u003E-equivalence \n class containing \u003Ccode\u003Ea\u003C/code\u003E, failing if \u003Ccode\u003Ea\u003C/code\u003E does not belong to the \n domain of the partition.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-partition.html#tryterminus","title":"Partition.tryterminus","content":"Partition.tryterminus \ntryterminus \n\n Searches for the canonical representative of the \u003Ccode\u003Eptn\u003C/code\u003E-equivalence \n class containing \u003Ccode\u003Ea\u003C/code\u003E, returning the input element \u003Ccode\u003Ea\u003C/code\u003E itself \n if it does not belong to the domain of the partition.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-partition.html#canonize","title":"Partition.canonize","content":"Partition.canonize \ncanonize \n\n Returns the canonical representative of the \u003Ccode\u003Eptn\u003C/code\u003E-equivalence \n class containing \u003Ccode\u003Ea\u003C/code\u003E, if \u003Ccode\u003Ea\u003C/code\u003E is in the domain of the \n partition. Otherwise it returns just \u003Ccode\u003Ea\u003C/code\u003E itself.\n  \n\n Corresponds to the find method in the union-find algorithm.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-partition.html#equivalent","title":"Partition.equivalent","content":"Partition.equivalent \nequivalent \n\n Tests if \u003Ccode\u003Ea\u003C/code\u003E and \u003Ccode\u003Eb\u003C/code\u003E are equivalent w.r.t. \u003Ccode\u003Eptn\u003C/code\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-partition.html#equate","title":"Partition.equate","content":"Partition.equate \nequate \n\n Creates a new partition that results from merging the \u003Ccode\u003Ea\u003C/code\u003E and \n \u003Ccode\u003Eb\u003C/code\u003E classes in \u003Ccode\u003Eptn\u003C/code\u003E, i.e. the smallest equivalence relation \n containing \u003Ccode\u003Eptn\u003C/code\u003E such that \u003Ccode\u003Ea\u003C/code\u003E and \u003Ccode\u003Eb\u003C/code\u003E are equivalent.\n  \n\n Corresponds to the union method in the union-find algorithm.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-partition-partition-1.html","title":"partition\u003C\u0027a\u003E","content":"partition\u003C\u0027a\u003E \n\n Union-Find datatype to represent equivalence relations (partitions) on \n finite sets.\n  \npartition\u003C\u0027a\u003E.Partition \nPartition"},{"uri":"/FolAutomReas/reference/folautomreas-lib-partition-partition-1.html#Partition","title":"partition\u003C\u0027a\u003E.Partition","content":"partition\u003C\u0027a\u003E.Partition \nPartition \n\n Represents the partitions (or equivalence classes) of the domain \n through an fpf (see \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-lib-fpf-func-2.html\u0022\u003Efunc\u003C/a\u003E) that \n maps an element of the domain to a \n \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-lib-partition-pnode-1.html\u0022\u003Epnode\u003C/a\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-partition-pnode-1.html","title":"pnode\u003C\u0027a\u003E","content":"pnode\u003C\u0027a\u003E \n\n Type of polymorphic \n \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-lib-partition-partition-1.html\u0022\u003Epartition\u003C/a\u003E\n node.\n  \npnode\u003C\u0027a\u003E.Nonterminal \nNonterminal \npnode\u003C\u0027a\u003E.Terminal \nTerminal"},{"uri":"/FolAutomReas/reference/folautomreas-lib-partition-pnode-1.html#Nonterminal","title":"pnode\u003C\u0027a\u003E.Nonterminal","content":"pnode\u003C\u0027a\u003E.Nonterminal \nNonterminal \n\n Nonterminal node: associated to non canonical elements.\n  \n\u003Ccode\u003ENonterminal 1\u003C/code\u003E is the node that would be associated to an \n element that is **not** the representative, or the canonical \n element, of its equivalence class and in fact in this case the \n representative would be \u003Ccode\u003E1\u003C/code\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-partition-pnode-1.html#Terminal","title":"pnode\u003C\u0027a\u003E.Terminal","content":"pnode\u003C\u0027a\u003E.Terminal \nTerminal \n\n Terminal node: associated to canonical elements.\n  \n\u003Ccode\u003ETerminal (1, 4)\u003C/code\u003E is the node that would be associated to\n \u003Ccode\u003E1\u003C/code\u003E when \u003Ccode\u003E1\u003C/code\u003E is the representative, or the canonical \n element, of its equivalence class and the equivalence class has 4 \n elements.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-search.html","title":"Search","content":"Search \n\n Searching functions.\n  \nSearch.tryfind \ntryfind \nSearch.mapfilter \nmapfilter \nSearch.optimize \noptimize \nSearch.maximize \nmaximize \nSearch.minimize \nminimize"},{"uri":"/FolAutomReas/reference/folautomreas-lib-search.html#tryfind","title":"Search.tryfind","content":"Search.tryfind \ntryfind \n\n Returns the result of the first successful application of a function to \n the elements of a list.\n  \n\u003Ccode\u003Etryfind f [x1;...;xn]\u003C/code\u003E returns \u003Ccode\u003Ef xi\u003C/code\u003E for the first \n \u003Ccode\u003Exi\u003C/code\u003E in the list for which application of \u003Ccode\u003Ef\u003C/code\u003E succeeds.\n \n \u003Cp\u003EFails with tryfind if the application of the function fails for all \n elements in the list. This will always be the case if the list is empty.\n \u003C/p\u003E"},{"uri":"/FolAutomReas/reference/folautomreas-lib-search.html#mapfilter","title":"Search.mapfilter","content":"Search.mapfilter \nmapfilter \n\n Applies a function to every element of a list, returning a list of \n results for those elements for which application succeeds.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-search.html#optimize","title":"Search.optimize","content":"Search.optimize \noptimize \n\n Finds the element of a list \u003Ccode\u003El\u003C/code\u003E that maximizes or minimizes \n (based on the given \u003Ccode\u003Eord\u003C/code\u003E) a function \u003Ccode\u003Ef\u003C/code\u003E. \n  \n\n Used to define maximize and minimize.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-search.html#maximize","title":"Search.maximize","content":"Search.maximize \nmaximize \n\n Finds the element of a list \u003Ccode\u003El\u003C/code\u003E that maximizes a function \n \u003Ccode\u003Ef\u003C/code\u003E. \n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-search.html#minimize","title":"Search.minimize","content":"Search.minimize \nminimize \n\n Finds the element of a list \u003Ccode\u003El\u003C/code\u003E that minimizes a function \n \u003Ccode\u003Ef\u003C/code\u003E. \n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-set.html","title":"Set","content":"Set \n\n Set represented as ordered lists and related operations.\n  \nSet.setify \nsetify \nSet.union \nunion \nSet.intersect \nintersect \nSet.subtract \nsubtract \nSet.subset \nsubset \nSet.psubset \npsubset \nSet.set_eq \nset_eq \nSet.insert \ninsert \nSet.image \nimage \nSet.unions \nunions \nSet.mem \nmem \nSet.allsets \nallsets \nSet.allsubsets \nallsubsets \nSet.allnonemptysubsets \nallnonemptysubsets"},{"uri":"/FolAutomReas/reference/folautomreas-lib-set.html#setify","title":"Set.setify","content":"Set.setify \nsetify \n\n Removes repeated elements from a list, making a list into a \u0027set\u0027.\n  \n\n Returns a sorted list that contains no duplicate entries according to \n generic hash and equality comparisons on the entries. If an element \n occurs multiple times in the list then the later occurrences are \n discarded. \n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-set.html#union","title":"Set.union","content":"Set.union \nunion \n\n Computes the union of two \u0060sets\u0027.\n  \n\u003Ccode\u003Eunion l1 l2\u003C/code\u003E returns a list consisting of the elements of \n \u003Ccode\u003El1\u003C/code\u003E not already in \u003Ccode\u003El2\u003C/code\u003E concatenated with \u003Ccode\u003El2\u003C/code\u003E . \n If \u003Ccode\u003El1\u003C/code\u003E  and \u003Ccode\u003El2\u003C/code\u003E  are initially free from duplicates, \n this gives a set-theoretic union operation. \n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-set.html#intersect","title":"Set.intersect","content":"Set.intersect \nintersect \n\n Computes the intersection of two \u0027sets\u0027.\n  \n\u003Ccode\u003Eintersect l1 l2\u003C/code\u003E returns a list consisting of those elements of \n \u003Ccode\u003El1\u003C/code\u003E that also appear in \u003Ccode\u003El1\u003C/code\u003E. If both sets are free of \n repetitions, this can be considered a set-theoretic intersection \n operation. \n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-set.html#subtract","title":"Set.subtract","content":"Set.subtract \nsubtract \n\n Computes the set-theoretic difference of two \u0027sets\u0027.\n  \n\u003Ccode\u003Esubtract l1 l2\u003C/code\u003E returns a list consisting of those elements of \n \u003Ccode\u003El1\u003C/code\u003E that do not appear in \u003Ccode\u003El2\u003C/code\u003E. If both lists are initially \n free of repetitions, this can be considered a set difference operation.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-set.html#subset","title":"Set.subset","content":"Set.subset \nsubset \n\n Evaluates to \u003Ccode\u003Etrue\u003C/code\u003E if all elements of the first list are in the second.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-set.html#psubset","title":"Set.psubset","content":"Set.psubset \npsubset \n\n Evaluates to \u003Ccode\u003Etrue\u003C/code\u003E if all elements of the first list are in the \n second, and at least one element of the second is not in the first.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-set.html#set_eq","title":"Set.set_eq","content":"Set.set_eq \nset_eq \n\n Tests two \u0027sets\u0027 for equality.\n  \n\u003Ccode\u003Eset_eq l1 l2\u003C/code\u003E returns \u003Ccode\u003Etrue\u003C/code\u003E if every element of \u003Ccode\u003El1\u003C/code\u003E \n appears in \u003Ccode\u003El2\u003C/code\u003E and every element of \u003Ccode\u003El2\u003C/code\u003E appears in \n \u003Ccode\u003El1\u003C/code\u003E. Otherwise it returns false. \n \n \u003Cp\u003EIn other words, it tests if the lists are the same considered as \n sets, i.e. ignoring duplicates.\u003C/p\u003E"},{"uri":"/FolAutomReas/reference/folautomreas-lib-set.html#insert","title":"Set.insert","content":"Set.insert \ninsert \n\n Returns a new set with an element added to the set. No exception is \n raised if the set already contains the given element.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-set.html#image","title":"Set.image","content":"Set.image \nimage \n\n The image of \u003Ccode\u003Es\u003C/code\u003E under \u003Ccode\u003Ef\u003C/code\u003E.\n  \n\n Returns a new collection containing the results of applying the\n given function to each element of the input \u0027set\u0027.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-set.html#unions","title":"Set.unions","content":"Set.unions \nunions \nComputes the union of a sequence of \u0027sets\u0027."},{"uri":"/FolAutomReas/reference/folautomreas-lib-set.html#mem","title":"Set.mem","content":"Set.mem \nmem \nTests if the list contains the specified element."},{"uri":"/FolAutomReas/reference/folautomreas-lib-set.html#allsets","title":"Set.allsets","content":"Set.allsets \nallsets \n\n Returns all subsets of the given size.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-set.html#allsubsets","title":"Set.allsubsets","content":"Set.allsubsets \nallsubsets \n\n Returns all the subsets of the input \u0027set\u0027.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-set.html#allnonemptysubsets","title":"Set.allnonemptysubsets","content":"Set.allnonemptysubsets \nallnonemptysubsets \n\n Returns all nonempty subsets of the input \u0027set\u0027.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-sort.html","title":"Sort","content":"Sort \n\n Sorting functions.\n  \nSort.merge \nmerge \nSort.sort \nsort \nSort.increasing \nincreasing \nSort.decreasing \ndecreasing"},{"uri":"/FolAutomReas/reference/folautomreas-lib-sort.html#merge","title":"Sort.merge","content":"Sort.merge \nmerge \n\n Merges together two sorted lists with respect to a given ordering.\n  \n\n If two lists \u003Ccode\u003El1\u003C/code\u003E and \u003Ccode\u003El2\u003C/code\u003E are sorted with respect to the \n given ordering \u003Ccode\u003Eord\u003C/code\u003E, then \u003Ccode\u003Emerge ord l1 l2\u003C/code\u003E will merge \n them into a sorted list of all the elements. The merge keeps any \n duplicates; it is not a set operation.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-sort.html#sort","title":"Sort.sort","content":"Sort.sort \nsort \n\n Sorts a list using a given transitive \u0027ordering\u0027 relation.\n  \n\n The call \u003Ccode\u003Esort op list\u003C/code\u003E where \u003Ccode\u003Eop\u003C/code\u003E is a transitive relation \n on the elements of \u003Ccode\u003Elist\u003C/code\u003E, will topologically sort the list, i.e. \n will permute it such that if \u003Ccode\u003Ex op y\u003C/code\u003E but \u003Ccode\u003Enot y op x\u003C/code\u003E then \n \u003Ccode\u003Ex\u003C/code\u003E will occur to the left of \u003Ccode\u003Ey\u003C/code\u003E in the sorted list. \n In particular if \u003Ccode\u003Eop\u003C/code\u003E is a total order, the list will be sorted in \n the usual sense of the word.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-sort.html#increasing","title":"Sort.increasing","content":"Sort.increasing \nincreasing \n\n Checks whether \u003Ccode\u003Ex\u003C/code\u003E is less than \u003Ccode\u003Ey\u003C/code\u003E based on \u003Ccode\u003Ef\u003C/code\u003E.\n  \n\n increasing predicate to use with \n \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-lib-sort.html\u0022\u003ESort.sort\u003C/a\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-sort.html#decreasing","title":"Sort.decreasing","content":"Sort.decreasing \ndecreasing \n\n Checks whether \u003Ccode\u003Ex\u003C/code\u003E is greater than \u003Ccode\u003Ey\u003C/code\u003E based on \u003Ccode\u003Ef\u003C/code\u003E.\n  \n\n decreasing predicate to use with \n \u003Ca href=\u0022/FolAutomReas/reference/folautomreas-lib-sort.html\u0022\u003ESort.sort\u003C/a\u003E.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-string.html","title":"String","content":"String \n\n Explosion and implosion of strings.\n \nString.explode \nexplode \nString.implode \nimplode \nString.writeToString \nwriteToString"},{"uri":"/FolAutomReas/reference/folautomreas-lib-string.html#explode","title":"String.explode","content":"String.explode \nexplode \n\n Converts a string into a list of single-character strings.\n  \n\u003Ccode\u003Eexplode s\u003C/code\u003E returns the list of single-character strings that make \n up \u003Ccode\u003Es\u003C/code\u003E, in the order in which they appear in \u003Ccode\u003Es\u003C/code\u003E. If \u003Ccode\u003Es\u003C/code\u003E \n is the empty string, then an empty list is returned.\n "},{"uri":"/FolAutomReas/reference/folautomreas-lib-string.html#implode","title":"String.implode","content":"String.implode \nimplode \n\n Concatenates a list of strings into one string.\n  \n\u003Ccode\u003Eimplode [s1;...;sn]\u003C/code\u003E returns the string formed by concatenating \n the strings \u003Ccode\u003Es1\u003C/code\u003E ... \u003Ccode\u003Esn\u003C/code\u003E. If n is zero (the list is empty), \n then the empty string is returned.\n \n \u003Cp\u003E\n Never fails and accepts empty or multi-character component strings.\n \u003C/p\u003E"},{"uri":"/FolAutomReas/reference/folautomreas-lib-string.html#writeToString","title":"String.writeToString","content":"String.writeToString \nwriteToString \n\n Write from a StringWriter to a string\n"},{"uri":"/FolAutomReas/reference/folautomreas-lib-time.html","title":"Time","content":"Time \n\n Timing: useful for documentation but not logically necessary.\n  \nTime.time \ntime"},{"uri":"/FolAutomReas/reference/folautomreas-lib-time.html#time","title":"Time.time","content":"Time.time \ntime \n\n Report CPU time taken by a function.\n  \n\n A call \u003Ccode\u003Etime f x\u003C/code\u003E will evaluate \u003Ccode\u003Ef x\u003C/code\u003E as usual, but will also \n print the CPU time taken by that function evaluation.\n \u003Cp\u003E\u003C/p\u003E\n Never fails in itself, though it propagates any exception generated by \n the call \u003Ccode\u003Ef x\u003C/code\u003E itself.\n "},{"uri":"/FolAutomReas/index.html","title":"Automated Reasoning in First Order Logic\n","content":"# Automated Reasoning in First Order Logic\n\nThis is a fork of the repository https://github.com/jack-pappas/fsharp-logic-examples, which in turn is the porting in F# of the code from **John Harrison\u0027s \u0022[Handbook of Practical Logic and Automated Reasoning](https://www.cl.cam.ac.uk/~jrh13/atp/index.html)\u0022**.\n\n![nuget package workflow](https://github.com/domasin/FolAutomReas/actions/workflows/publish.yml/badge.svg)\n\n## Fork main purposes\n\n* to have a .Net Core version of the solution\n* to have a [nuget package](https://www.nuget.org/packages/FolAutomReas)\n* to create an [api documentation](https://domasin.github.io/FolAutomReas/reference/index.html)\n\n## Fork main changes\n\n* The conversion to .NET Core itself.\n\n* The \u0060thm\u0060 type has been changed from a simple type abbreviation of \u0060formula\u003Cfol\u003E\u0060 to a discriminated union with a single private case \u0060Theorem of formula\u003Cfol\u003E\u0060 to ensure that it is impossible to create new theorems without going through the inference rules defined and thus introduce theorems inconsistent with expressions of the type\n\n          let t : thm = False\n\n* In conjunction with the above change, the \u0060ProofOperators\u0060 module in \u0060lcf\u0060 has been renamed to \u0060ProofSystem\u0060 like the original OCaml module.\n\n* For better understanding of the source code and more modular documentation, the lib file has been split into a series of modules organized together in the \u0060FOL.lib\u0060  (to maintain the reference to the original file) namespace.\n\n* The name of the namespace has been changed to FolAutomReas (Automated Reasoning in First Order Logic).\n\n\n"}]