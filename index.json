[{"uri":"/Calcolemus/reference/calcolemus.html","title":"Calcolemus","content":"Bdd \nCombining \nCompletion \nComplex \nCong \nCooper \nDP \nDecidable \nDefcnf \nEqelim \nEqual \nFol \nFolderived \nFormulas \nGeom \nGrobner \nHerbrand \nInterpolation \nIntro \nLcf \nLcffol \nLcfprop \nLimitations \nMeson \nOrder \nParamodulation \nPelletier \nProlog \nProp \nPropexamples \nQelim \nReal \nResolution \nRewrite \nSkolem \nSkolems \nStal \nTableaux \nTactics \nUnif"},{"uri":"/Calcolemus/reference/calcolemus-lib.html","title":"Calcolemus.Lib","content":"Fpf \nFunction \nLexer \nList \nParser \nPartition \nSearch \nSet \nSort \nString \nTime"},{"uri":"/Calcolemus/reference/calcolemus-bdd.html","title":"Bdd","content":"Bdd \n\n Binary decision diagrams (BDDs) using complement edges.\n  \n\n In practice one would use hash tables, but we use abstract finite\n partial functions here. They might also look nicer imperatively.\n  \nBdd.bdd \nbdd \nBdd.bddnode \nbddnode \nBdd.print_bdd \nprint_bdd \nBdd.expand_node \nexpand_node \nBdd.lookup_unique \nlookup_unique \nBdd.mk_node \nmk_node \nBdd.mk_bdd \nmk_bdd \nBdd.order \norder \nBdd.thread \nthread \nBdd.bdd_and \nbdd_and \nBdd.bdd_or \nbdd_or \nBdd.bdd_imp \nbdd_imp \nBdd.bdd_iff \nbdd_iff \nBdd.mkbdd \nmkbdd \nBdd.bddtaut \nbddtaut \nBdd.dest_nimp \ndest_nimp \nBdd.dest_iffdef \ndest_iffdef \nBdd.restore_iffdef \nrestore_iffdef \nBdd.suitable_iffdef \nsuitable_iffdef \nBdd.sort_defs \nsort_defs \nBdd.mkbdde \nmkbdde \nBdd.mkbdds \nmkbdds \nBdd.ebddtaut \nebddtaut"},{"uri":"/Calcolemus/reference/calcolemus-bdd.html#print_bdd","title":"Bdd.print_bdd","content":"Bdd.print_bdd \nprint_bdd \n"},{"uri":"/Calcolemus/reference/calcolemus-bdd.html#expand_node","title":"Bdd.expand_node","content":"Bdd.expand_node \nexpand_node \n\n Returns the bddnode corresponding to the index \u0060n\u0060 of the bdd\n If a negative index is used the complement of the node is returned.\n"},{"uri":"/Calcolemus/reference/calcolemus-bdd.html#lookup_unique","title":"Bdd.lookup_unique","content":"Bdd.lookup_unique \nlookup_unique \n\n Lookup or insertion if not there in unique table. \n"},{"uri":"/Calcolemus/reference/calcolemus-bdd.html#mk_node","title":"Bdd.mk_node","content":"Bdd.mk_node \nmk_node \n\n Produce a BDD node (old or new).\n"},{"uri":"/Calcolemus/reference/calcolemus-bdd.html#mk_bdd","title":"Bdd.mk_bdd","content":"Bdd.mk_bdd \nmk_bdd \n\n Create a new BDD with a given ordering. \n"},{"uri":"/Calcolemus/reference/calcolemus-bdd.html#order","title":"Bdd.order","content":"Bdd.order \norder \n\n Extract the ordering field of a BDD. \n"},{"uri":"/Calcolemus/reference/calcolemus-bdd.html#thread","title":"Bdd.thread","content":"Bdd.thread \nthread \n\n Threading state through.  \n"},{"uri":"/Calcolemus/reference/calcolemus-bdd.html#bdd_and","title":"Bdd.bdd_and","content":"Bdd.bdd_and \nbdd_and \n\n Perform an AND operation on BDDs, maintaining canonicity.\n"},{"uri":"/Calcolemus/reference/calcolemus-bdd.html#bdd_or","title":"Bdd.bdd_or","content":"Bdd.bdd_or \nbdd_or \n\n Perform an OR operation on BDDs, maintaining canonicity.\n"},{"uri":"/Calcolemus/reference/calcolemus-bdd.html#bdd_imp","title":"Bdd.bdd_imp","content":"Bdd.bdd_imp \nbdd_imp \n\n Perform an IMP operation on BDDs, maintaining canonicity.\n"},{"uri":"/Calcolemus/reference/calcolemus-bdd.html#bdd_iff","title":"Bdd.bdd_iff","content":"Bdd.bdd_iff \nbdd_iff \n\n Perform an IFF operation on BDDs, maintaining canonicity.\n"},{"uri":"/Calcolemus/reference/calcolemus-bdd.html#mkbdd","title":"Bdd.mkbdd","content":"Bdd.mkbdd \nmkbdd \n\n Formula to BDD conversion.\n"},{"uri":"/Calcolemus/reference/calcolemus-bdd.html#bddtaut","title":"Bdd.bddtaut","content":"Bdd.bddtaut \nbddtaut \n\n Tautology checking using BDDs.  \n"},{"uri":"/Calcolemus/reference/calcolemus-bdd.html#dest_nimp","title":"Bdd.dest_nimp","content":"Bdd.dest_nimp \ndest_nimp \n"},{"uri":"/Calcolemus/reference/calcolemus-bdd.html#dest_iffdef","title":"Bdd.dest_iffdef","content":"Bdd.dest_iffdef \ndest_iffdef \n"},{"uri":"/Calcolemus/reference/calcolemus-bdd.html#restore_iffdef","title":"Bdd.restore_iffdef","content":"Bdd.restore_iffdef \nrestore_iffdef \n"},{"uri":"/Calcolemus/reference/calcolemus-bdd.html#suitable_iffdef","title":"Bdd.suitable_iffdef","content":"Bdd.suitable_iffdef \nsuitable_iffdef \n"},{"uri":"/Calcolemus/reference/calcolemus-bdd.html#sort_defs","title":"Bdd.sort_defs","content":"Bdd.sort_defs \nsort_defs \n"},{"uri":"/Calcolemus/reference/calcolemus-bdd.html#mkbdde","title":"Bdd.mkbdde","content":"Bdd.mkbdde \nmkbdde \n\n Formula to BDD conversion with improved setup\n"},{"uri":"/Calcolemus/reference/calcolemus-bdd.html#mkbdds","title":"Bdd.mkbdds","content":"Bdd.mkbdds \nmkbdds \n"},{"uri":"/Calcolemus/reference/calcolemus-bdd.html#ebddtaut","title":"Bdd.ebddtaut","content":"Bdd.ebddtaut \nebddtaut \n\n Tautology checking using BDDs with an improved setup\n"},{"uri":"/Calcolemus/reference/calcolemus-bdd-bdd.html","title":"bdd","content":"bdd \nThe type of Binary Decision Diagram. \nIt is composed by \n \u003Cul\u003E\n  \u003Cli\u003Ea unique table \u003Cc\u003Efunc\u0026lt;bddnode, int\u0026gt;\u003C/c\u003E: a finite partial function mapping a bddnode to an integer index;\u003C/li\u003E\n  \u003Cli\u003Ean expansion table \u003Cc\u003Efunc\u0026lt;int, bddnode\u0026gt;\u003C/c\u003E: a finite partial function mapping an integer index to a bddnode;\u003C/li\u003E\n  \u003Cli\u003Ean integer to store the smallest unused positive node index;\u003C/li\u003E\n  \u003Cli\u003Ea prop variable order \u003Cc\u003E(prop -\u0026gt; prop -\u0026gt; bool)\u003C/c\u003E;\u003C/li\u003E\n\u003C/ul\u003E \nbdd.Bdd \nBdd"},{"uri":"/Calcolemus/reference/calcolemus-bdd-bdd.html#Bdd","title":"bdd.Bdd","content":"bdd.Bdd \nBdd \n"},{"uri":"/Calcolemus/reference/calcolemus-bdd-bddnode.html","title":"bddnode","content":"bddnode \nThe type of binary decision diagram \n (\u003Ca href=\u0022/Calcolemus/reference/calcolemus-bdd-bdd.html\u0022\u003Ebdd\u003C/a\u003E) node. \nIt is composed by a propositional variable, a left node and a \n right node. \nbddnode.Item1 \nItem1 \nbddnode.Item2 \nItem2 \nbddnode.Item3 \nItem3"},{"uri":"/Calcolemus/reference/calcolemus-bdd-bddnode.html#Item1","title":"bddnode.Item1","content":"bddnode.Item1 \nItem1 \n"},{"uri":"/Calcolemus/reference/calcolemus-bdd-bddnode.html#Item2","title":"bddnode.Item2","content":"bddnode.Item2 \nItem2 \n"},{"uri":"/Calcolemus/reference/calcolemus-bdd-bddnode.html#Item3","title":"bddnode.Item3","content":"bddnode.Item3 \nItem3 \n"},{"uri":"/Calcolemus/reference/calcolemus-combining.html","title":"Combining","content":"Combining \n\n Combined decision procedure.\n  \nCombining.real_lang \nreal_lang \nCombining.int_lang \nint_lang \nCombining.add_default \nadd_default \nCombining.chooselang \nchooselang \nCombining.listify \nlistify \nCombining.homot \nhomot \nCombining.homol \nhomol \nCombining.homo \nhomo \nCombining.homogenize \nhomogenize \nCombining.belongs \nbelongs \nCombining.langpartition \nlangpartition \nCombining.arreq \narreq \nCombining.arrangement \narrangement \nCombining.dest_def \ndest_def \nCombining.redeqs \nredeqs \nCombining.trydps \ntrydps \nCombining.allpartitions \nallpartitions \nCombining.nelop_refute001 \nnelop_refute001 \nCombining.nelop1001 \nnelop1001 \nCombining.nelop001 \nnelop001 \nCombining.findasubset \nfindasubset \nCombining.findsubset \nfindsubset \nCombining.nelop_refute \nnelop_refute \nCombining.nelop1 \nnelop1 \nCombining.nelop \nnelop"},{"uri":"/Calcolemus/reference/calcolemus-combining.html#real_lang","title":"Combining.real_lang","content":"Combining.real_lang \nreal_lang \n"},{"uri":"/Calcolemus/reference/calcolemus-combining.html#int_lang","title":"Combining.int_lang","content":"Combining.int_lang \nint_lang \n"},{"uri":"/Calcolemus/reference/calcolemus-combining.html#add_default","title":"Combining.add_default","content":"Combining.add_default \nadd_default \n"},{"uri":"/Calcolemus/reference/calcolemus-combining.html#chooselang","title":"Combining.chooselang","content":"Combining.chooselang \nchooselang \n"},{"uri":"/Calcolemus/reference/calcolemus-combining.html#listify","title":"Combining.listify","content":"Combining.listify \nlistify \n"},{"uri":"/Calcolemus/reference/calcolemus-combining.html#homot","title":"Combining.homot","content":"Combining.homot \nhomot \n"},{"uri":"/Calcolemus/reference/calcolemus-combining.html#homol","title":"Combining.homol","content":"Combining.homol \nhomol \n"},{"uri":"/Calcolemus/reference/calcolemus-combining.html#homo","title":"Combining.homo","content":"Combining.homo \nhomo \n"},{"uri":"/Calcolemus/reference/calcolemus-combining.html#homogenize","title":"Combining.homogenize","content":"Combining.homogenize \nhomogenize \n"},{"uri":"/Calcolemus/reference/calcolemus-combining.html#belongs","title":"Combining.belongs","content":"Combining.belongs \nbelongs \n"},{"uri":"/Calcolemus/reference/calcolemus-combining.html#langpartition","title":"Combining.langpartition","content":"Combining.langpartition \nlangpartition \n"},{"uri":"/Calcolemus/reference/calcolemus-combining.html#arreq","title":"Combining.arreq","content":"Combining.arreq \narreq \n"},{"uri":"/Calcolemus/reference/calcolemus-combining.html#arrangement","title":"Combining.arrangement","content":"Combining.arrangement \narrangement \n"},{"uri":"/Calcolemus/reference/calcolemus-combining.html#dest_def","title":"Combining.dest_def","content":"Combining.dest_def \ndest_def \n"},{"uri":"/Calcolemus/reference/calcolemus-combining.html#redeqs","title":"Combining.redeqs","content":"Combining.redeqs \nredeqs \n"},{"uri":"/Calcolemus/reference/calcolemus-combining.html#trydps","title":"Combining.trydps","content":"Combining.trydps \ntrydps \n"},{"uri":"/Calcolemus/reference/calcolemus-combining.html#allpartitions","title":"Combining.allpartitions","content":"Combining.allpartitions \nallpartitions \n"},{"uri":"/Calcolemus/reference/calcolemus-combining.html#nelop_refute001","title":"Combining.nelop_refute001","content":"Combining.nelop_refute001 \nnelop_refute001 \n"},{"uri":"/Calcolemus/reference/calcolemus-combining.html#nelop1001","title":"Combining.nelop1001","content":"Combining.nelop1001 \nnelop1001 \n"},{"uri":"/Calcolemus/reference/calcolemus-combining.html#nelop001","title":"Combining.nelop001","content":"Combining.nelop001 \nnelop001 \n"},{"uri":"/Calcolemus/reference/calcolemus-combining.html#findasubset","title":"Combining.findasubset","content":"Combining.findasubset \nfindasubset \n"},{"uri":"/Calcolemus/reference/calcolemus-combining.html#findsubset","title":"Combining.findsubset","content":"Combining.findsubset \nfindsubset \n"},{"uri":"/Calcolemus/reference/calcolemus-combining.html#nelop_refute","title":"Combining.nelop_refute","content":"Combining.nelop_refute \nnelop_refute \n"},{"uri":"/Calcolemus/reference/calcolemus-combining.html#nelop1","title":"Combining.nelop1","content":"Combining.nelop1 \nnelop1 \n"},{"uri":"/Calcolemus/reference/calcolemus-combining.html#nelop","title":"Combining.nelop","content":"Combining.nelop \nnelop \n"},{"uri":"/Calcolemus/reference/calcolemus-completion.html","title":"Completion","content":"Completion \n\n Knuth-Bendix completion.\n  \nCompletion.renamepair \nrenamepair \nCompletion.listcases \nlistcases \nCompletion.overlaps \noverlaps \nCompletion.crit1 \ncrit1 \nCompletion.critical_pairs \ncritical_pairs \nCompletion.normalize_and_orient \nnormalize_and_orient \nCompletion.status \nstatus \nCompletion.complete \ncomplete \nCompletion.interreduce \ninterreduce \nCompletion.complete_and_simplify \ncomplete_and_simplify \nCompletion.eqs \neqs \nCompletion.wts \nwts \nCompletion.ord \nord \nCompletion.def \ndef \nCompletion.crits \ncrits \nCompletion.complete1 \ncomplete1"},{"uri":"/Calcolemus/reference/calcolemus-completion.html#renamepair","title":"Completion.renamepair","content":"Completion.renamepair \nrenamepair \n"},{"uri":"/Calcolemus/reference/calcolemus-completion.html#listcases","title":"Completion.listcases","content":"Completion.listcases \nlistcases \n"},{"uri":"/Calcolemus/reference/calcolemus-completion.html#overlaps","title":"Completion.overlaps","content":"Completion.overlaps \noverlaps \n"},{"uri":"/Calcolemus/reference/calcolemus-completion.html#crit1","title":"Completion.crit1","content":"Completion.crit1 \ncrit1 \n"},{"uri":"/Calcolemus/reference/calcolemus-completion.html#critical_pairs","title":"Completion.critical_pairs","content":"Completion.critical_pairs \ncritical_pairs \n"},{"uri":"/Calcolemus/reference/calcolemus-completion.html#normalize_and_orient","title":"Completion.normalize_and_orient","content":"Completion.normalize_and_orient \nnormalize_and_orient \n"},{"uri":"/Calcolemus/reference/calcolemus-completion.html#status","title":"Completion.status","content":"Completion.status \nstatus \n"},{"uri":"/Calcolemus/reference/calcolemus-completion.html#complete","title":"Completion.complete","content":"Completion.complete \ncomplete \n"},{"uri":"/Calcolemus/reference/calcolemus-completion.html#interreduce","title":"Completion.interreduce","content":"Completion.interreduce \ninterreduce \n"},{"uri":"/Calcolemus/reference/calcolemus-completion.html#complete_and_simplify","title":"Completion.complete_and_simplify","content":"Completion.complete_and_simplify \ncomplete_and_simplify \n"},{"uri":"/Calcolemus/reference/calcolemus-completion.html#eqs","title":"Completion.eqs","content":"Completion.eqs \neqs \n"},{"uri":"/Calcolemus/reference/calcolemus-completion.html#wts","title":"Completion.wts","content":"Completion.wts \nwts \n"},{"uri":"/Calcolemus/reference/calcolemus-completion.html#ord","title":"Completion.ord","content":"Completion.ord \nord \n"},{"uri":"/Calcolemus/reference/calcolemus-completion.html#def","title":"Completion.def","content":"Completion.def \ndef \n"},{"uri":"/Calcolemus/reference/calcolemus-completion.html#crits","title":"Completion.crits","content":"Completion.crits \ncrits \n"},{"uri":"/Calcolemus/reference/calcolemus-completion.html#complete1","title":"Completion.complete1","content":"Completion.complete1 \ncomplete1 \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html","title":"Complex","content":"Complex \n\n Complex quantifier elimination.\n  \nComplex.sign \nsign \nComplex.poly_add \npoly_add \nComplex.poly_ladd \npoly_ladd \nComplex.poly_neg \npoly_neg \nComplex.poly_sub \npoly_sub \nComplex.poly_mul \npoly_mul \nComplex.poly_lmul \npoly_lmul \nComplex.poly_pow \npoly_pow \nComplex.poly_div \npoly_div \nComplex.poly_var \npoly_var \nComplex.polynate \npolynate \nComplex.polyatom \npolyatom \nComplex.coefficients \ncoefficients \nComplex.degree \ndegree \nComplex.is_constant \nis_constant \nComplex.head \nhead \nComplex.behead \nbehead \nComplex.poly_cmul \npoly_cmul \nComplex.headconst \nheadconst \nComplex.monic \nmonic \nComplex.pdivide \npdivide \nComplex.swap \nswap \nComplex.findsign \nfindsign \nComplex.assertsign \nassertsign \nComplex.split_zero \nsplit_zero \nComplex.poly_nonzero \npoly_nonzero \nComplex.poly_nondiv \npoly_nondiv \nComplex.cqelim \ncqelim \nComplex.init_sgns \ninit_sgns \nComplex.basic_complex_qelim \nbasic_complex_qelim \nComplex.complex_qelim \ncomplex_qelim"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#poly_add","title":"Complex.poly_add","content":"Complex.poly_add \npoly_add \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#poly_ladd","title":"Complex.poly_ladd","content":"Complex.poly_ladd \npoly_ladd \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#poly_neg","title":"Complex.poly_neg","content":"Complex.poly_neg \npoly_neg \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#poly_sub","title":"Complex.poly_sub","content":"Complex.poly_sub \npoly_sub \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#poly_mul","title":"Complex.poly_mul","content":"Complex.poly_mul \npoly_mul \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#poly_lmul","title":"Complex.poly_lmul","content":"Complex.poly_lmul \npoly_lmul \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#poly_pow","title":"Complex.poly_pow","content":"Complex.poly_pow \npoly_pow \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#poly_div","title":"Complex.poly_div","content":"Complex.poly_div \npoly_div \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#poly_var","title":"Complex.poly_var","content":"Complex.poly_var \npoly_var \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#polynate","title":"Complex.polynate","content":"Complex.polynate \npolynate \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#polyatom","title":"Complex.polyatom","content":"Complex.polyatom \npolyatom \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#coefficients","title":"Complex.coefficients","content":"Complex.coefficients \ncoefficients \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#degree","title":"Complex.degree","content":"Complex.degree \ndegree \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#is_constant","title":"Complex.is_constant","content":"Complex.is_constant \nis_constant \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#head","title":"Complex.head","content":"Complex.head \nhead \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#behead","title":"Complex.behead","content":"Complex.behead \nbehead \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#poly_cmul","title":"Complex.poly_cmul","content":"Complex.poly_cmul \npoly_cmul \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#headconst","title":"Complex.headconst","content":"Complex.headconst \nheadconst \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#monic","title":"Complex.monic","content":"Complex.monic \nmonic \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#pdivide","title":"Complex.pdivide","content":"Complex.pdivide \npdivide \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#swap","title":"Complex.swap","content":"Complex.swap \nswap \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#findsign","title":"Complex.findsign","content":"Complex.findsign \nfindsign \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#assertsign","title":"Complex.assertsign","content":"Complex.assertsign \nassertsign \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#split_zero","title":"Complex.split_zero","content":"Complex.split_zero \nsplit_zero \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#poly_nonzero","title":"Complex.poly_nonzero","content":"Complex.poly_nonzero \npoly_nonzero \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#poly_nondiv","title":"Complex.poly_nondiv","content":"Complex.poly_nondiv \npoly_nondiv \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#cqelim","title":"Complex.cqelim","content":"Complex.cqelim \ncqelim \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#init_sgns","title":"Complex.init_sgns","content":"Complex.init_sgns \ninit_sgns \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#basic_complex_qelim","title":"Complex.basic_complex_qelim","content":"Complex.basic_complex_qelim \nbasic_complex_qelim \n"},{"uri":"/Calcolemus/reference/calcolemus-complex.html#complex_qelim","title":"Complex.complex_qelim","content":"Complex.complex_qelim \ncomplex_qelim \n"},{"uri":"/Calcolemus/reference/calcolemus-complex-sign.html","title":"sign","content":"sign \n \nsign.Zero \nZero \nsign.Nonzero \nNonzero \nsign.Positive \nPositive \nsign.Negative \nNegative"},{"uri":"/Calcolemus/reference/calcolemus-complex-sign.html#Zero","title":"sign.Zero","content":"sign.Zero \nZero \n"},{"uri":"/Calcolemus/reference/calcolemus-complex-sign.html#Nonzero","title":"sign.Nonzero","content":"sign.Nonzero \nNonzero \n"},{"uri":"/Calcolemus/reference/calcolemus-complex-sign.html#Positive","title":"sign.Positive","content":"sign.Positive \nPositive \n"},{"uri":"/Calcolemus/reference/calcolemus-complex-sign.html#Negative","title":"sign.Negative","content":"sign.Negative \nNegative \n"},{"uri":"/Calcolemus/reference/calcolemus-cong.html","title":"Cong","content":"Cong \n\n Congruence closure.\n  \nCong.subterms \nsubterms \nCong.congruent \ncongruent \nCong.emerge \nemerge \nCong.predecessors \npredecessors \nCong.ccsatisfiable \nccsatisfiable \nCong.ccvalid \nccvalid"},{"uri":"/Calcolemus/reference/calcolemus-cong.html#subterms","title":"Cong.subterms","content":"Cong.subterms \nsubterms \n"},{"uri":"/Calcolemus/reference/calcolemus-cong.html#congruent","title":"Cong.congruent","content":"Cong.congruent \ncongruent \n"},{"uri":"/Calcolemus/reference/calcolemus-cong.html#emerge","title":"Cong.emerge","content":"Cong.emerge \nemerge \n"},{"uri":"/Calcolemus/reference/calcolemus-cong.html#predecessors","title":"Cong.predecessors","content":"Cong.predecessors \npredecessors \n"},{"uri":"/Calcolemus/reference/calcolemus-cong.html#ccsatisfiable","title":"Cong.ccsatisfiable","content":"Cong.ccsatisfiable \nccsatisfiable \n"},{"uri":"/Calcolemus/reference/calcolemus-cong.html#ccvalid","title":"Cong.ccvalid","content":"Cong.ccvalid \nccvalid \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html","title":"Cooper","content":"Cooper \n\n Cooper\u0027s algorithm for Presburger arithmetic.\n  \nCooper.zero \nzero \nCooper.mk_numeral \nmk_numeral \nCooper.dest_numeral \ndest_numeral \nCooper.is_numeral \nis_numeral \nCooper.numeral1 \nnumeral1 \nCooper.numeral2 \nnumeral2 \nCooper.linear_cmul \nlinear_cmul \nCooper.linear_add \nlinear_add \nCooper.linear_neg \nlinear_neg \nCooper.linear_sub \nlinear_sub \nCooper.linear_mul \nlinear_mul \nCooper.lint \nlint \nCooper.mkatom \nmkatom \nCooper.linform \nlinform \nCooper.posineq \nposineq \nCooper.gcd_num \ngcd_num \nCooper.lcm_num \nlcm_num \nCooper.formlcm \nformlcm \nCooper.adjustcoeff \nadjustcoeff \nCooper.unitycoeff \nunitycoeff \nCooper.minusinf \nminusinf \nCooper.divlcm \ndivlcm \nCooper.bset \nbset \nCooper.linrep \nlinrep \nCooper.cooper \ncooper \nCooper.operations \noperations \nCooper.evalc \nevalc \nCooper.integer_qelim \ninteger_qelim \nCooper.relativize \nrelativize \nCooper.natural_qelim \nnatural_qelim"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#zero","title":"Cooper.zero","content":"Cooper.zero \nzero \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#mk_numeral","title":"Cooper.mk_numeral","content":"Cooper.mk_numeral \nmk_numeral \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#dest_numeral","title":"Cooper.dest_numeral","content":"Cooper.dest_numeral \ndest_numeral \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#is_numeral","title":"Cooper.is_numeral","content":"Cooper.is_numeral \nis_numeral \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#numeral1","title":"Cooper.numeral1","content":"Cooper.numeral1 \nnumeral1 \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#numeral2","title":"Cooper.numeral2","content":"Cooper.numeral2 \nnumeral2 \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#linear_cmul","title":"Cooper.linear_cmul","content":"Cooper.linear_cmul \nlinear_cmul \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#linear_add","title":"Cooper.linear_add","content":"Cooper.linear_add \nlinear_add \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#linear_neg","title":"Cooper.linear_neg","content":"Cooper.linear_neg \nlinear_neg \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#linear_sub","title":"Cooper.linear_sub","content":"Cooper.linear_sub \nlinear_sub \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#linear_mul","title":"Cooper.linear_mul","content":"Cooper.linear_mul \nlinear_mul \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#lint","title":"Cooper.lint","content":"Cooper.lint \nlint \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#mkatom","title":"Cooper.mkatom","content":"Cooper.mkatom \nmkatom \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#linform","title":"Cooper.linform","content":"Cooper.linform \nlinform \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#posineq","title":"Cooper.posineq","content":"Cooper.posineq \nposineq \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#gcd_num","title":"Cooper.gcd_num","content":"Cooper.gcd_num \ngcd_num \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#lcm_num","title":"Cooper.lcm_num","content":"Cooper.lcm_num \nlcm_num \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#formlcm","title":"Cooper.formlcm","content":"Cooper.formlcm \nformlcm \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#adjustcoeff","title":"Cooper.adjustcoeff","content":"Cooper.adjustcoeff \nadjustcoeff \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#unitycoeff","title":"Cooper.unitycoeff","content":"Cooper.unitycoeff \nunitycoeff \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#minusinf","title":"Cooper.minusinf","content":"Cooper.minusinf \nminusinf \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#divlcm","title":"Cooper.divlcm","content":"Cooper.divlcm \ndivlcm \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#bset","title":"Cooper.bset","content":"Cooper.bset \nbset \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#linrep","title":"Cooper.linrep","content":"Cooper.linrep \nlinrep \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#cooper","title":"Cooper.cooper","content":"Cooper.cooper \ncooper \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#operations","title":"Cooper.operations","content":"Cooper.operations \noperations \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#evalc","title":"Cooper.evalc","content":"Cooper.evalc \nevalc \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#integer_qelim","title":"Cooper.integer_qelim","content":"Cooper.integer_qelim \ninteger_qelim \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#relativize","title":"Cooper.relativize","content":"Cooper.relativize \nrelativize \n"},{"uri":"/Calcolemus/reference/calcolemus-cooper.html#natural_qelim","title":"Cooper.natural_qelim","content":"Cooper.natural_qelim \nnatural_qelim \n"},{"uri":"/Calcolemus/reference/calcolemus-dp.html","title":"DP","content":"DP \n\n The Davis-Putnam and the Davis-Putnam-Loveland-Logemann procedures.\n  \nDP.trailmix \ntrailmix \nDP.(!\u003E\u003E) \n(!\u003E\u003E) \nDP.hasUnitClause \nhasUnitClause \nDP.one_literal_rule \none_literal_rule \nDP.pureLiterals \npureLiterals \nDP.hasPureLiteral \nhasPureLiteral \nDP.affirmative_negative_rule \naffirmative_negative_rule \nDP.resolve_on \nresolve_on \nDP.resolution_blowup \nresolution_blowup \nDP.resolution_rule \nresolution_rule \nDP.dp \ndp \nDP.dpsat \ndpsat \nDP.dptaut \ndptaut \nDP.posneg_count \nposneg_count \nDP.dpll \ndpll \nDP.dpllsat \ndpllsat \nDP.dplltaut \ndplltaut \nDP.unassigned \nunassigned \nDP.unit_subpropagate \nunit_subpropagate \nDP.unit_propagate \nunit_propagate \nDP.backtrack \nbacktrack \nDP.dpli \ndpli \nDP.dplisat \ndplisat \nDP.dplitaut \ndplitaut \nDP.backjump \nbackjump \nDP.dplb \ndplb \nDP.dplbsat \ndplbsat \nDP.dplbtaut \ndplbtaut"},{"uri":"/Calcolemus/reference/calcolemus-dp.html#(!\u003E\u003E)","title":"DP.(!\u003E\u003E)","content":"DP.(!\u003E\u003E) \n(!\u003E\u003E) \n\n Parses a list of string lists into a list of clauses.\n A clause is list of literals.\n "},{"uri":"/Calcolemus/reference/calcolemus-dp.html#hasUnitClause","title":"DP.hasUnitClause","content":"DP.hasUnitClause \nhasUnitClause \n\u003Ccode\u003Eclauses\u003C/code\u003E has unit clauses.\n "},{"uri":"/Calcolemus/reference/calcolemus-dp.html#one_literal_rule","title":"DP.one_literal_rule","content":"DP.one_literal_rule \none_literal_rule \n\n Applies the 1-literal rule to the input clauses.\n  \n\n For the \u003Cem\u003Efirst\u003C/em\u003E unit clause \u003Ccode\u003Ep\u003C/code\u003E in \u003Ccode\u003Eclauses\u003C/code\u003E:\n \u003Cul\u003E\n  \u003Cli\u003Eremoves any instance of \u003Cc\u003E~p\u003C/c\u003E from the other clauses.\u003C/li\u003E\n  \u003Cli\u003Eremoves \u003Cc\u003Ep\u003C/c\u003E and any clauses containing it.\u003C/li\u003E\n\u003C/ul\u003E"},{"uri":"/Calcolemus/reference/calcolemus-dp.html#pureLiterals","title":"DP.pureLiterals","content":"DP.pureLiterals \npureLiterals \n\n Pure literals in \u003Ccode\u003Eclauses\u003C/code\u003E.\n  \n\n A literal is said to be \u0027pure\u0027 if it occurs \u003Cem\u003Eonly positively\u003C/em\u003E or \n \u003Cem\u003Eonly negatively\u003C/em\u003E in the list of clauses.\n "},{"uri":"/Calcolemus/reference/calcolemus-dp.html#hasPureLiteral","title":"DP.hasPureLiteral","content":"DP.hasPureLiteral \nhasPureLiteral \n\u003Ccode\u003Eclauses\u003C/code\u003E has pure literals.\n  \n\n A literal is said to be \u0027pure\u0027 if it occurs \u003Cem\u003Eonly positively\u003C/em\u003E or \n \u003Cem\u003Eonly negatively\u003C/em\u003E in the list of clauses.\n "},{"uri":"/Calcolemus/reference/calcolemus-dp.html#affirmative_negative_rule","title":"DP.affirmative_negative_rule","content":"DP.affirmative_negative_rule \naffirmative_negative_rule \n\n Removes all clauses that contain pure literals.\n "},{"uri":"/Calcolemus/reference/calcolemus-dp.html#resolve_on","title":"DP.resolve_on","content":"DP.resolve_on \nresolve_on \n\n Resolves \u003Ccode\u003Eclauses\u003C/code\u003E on the literal \u003Ccode\u003Ep\u003C/code\u003E.\n  \n\u003Cul\u003E\n  \u003Cli\u003Eseparates \u003Cc\u003Eclauses\u003C/c\u003E in those containing \u003Cc\u003Ep\u003C/c\u003E only \n positively \\(C_i\\) and those only negative \\(D_j\\) ,\u003C/li\u003E\n  \u003Cli\u003Ecreates new clauses from all the combinations \\(C_i \\lor D_j\\),\u003C/li\u003E\n  \u003Cli\u003Eremoves all clauses containing \u003Cc\u003Ep\u003C/c\u003E or its negation.\u003C/li\u003E\n\u003C/ul\u003E"},{"uri":"/Calcolemus/reference/calcolemus-dp.html#resolution_blowup","title":"DP.resolution_blowup","content":"DP.resolution_blowup \nresolution_blowup \n\n A simplistic heuristic to predict the best literal to resolve on.\n "},{"uri":"/Calcolemus/reference/calcolemus-dp.html#resolution_rule","title":"DP.resolution_rule","content":"DP.resolution_rule \nresolution_rule \n\n Resolves the input \u003Ccode\u003Eclauses\u003C/code\u003E on the literal which minimizes \u003Ca href=\u0022/Calcolemus/reference/calcolemus-dp.html\u0022\u003EDP.resolution_blowup\u003C/a\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-dp.html#dp","title":"DP.dp","content":"DP.dp \ndp \n\n Tests \u003Ccode\u003Eclauses\u003C/code\u003E (propositional) satisfiability with the \n Davis-Putnam procedure.\n  \n\n Tests the (propositional) satisfiability of a list of clauses (to be \n understood as an iterated conjunction of disjunctions), using the \n Davis-Putnam procedure which consists in applying recursively the rules \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-dp.html\u0022\u003EDP.one_literal_rule\u003C/a\u003E, \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-dp.html\u0022\u003EDP.affirmative_negative_rule\u003C/a\u003E and \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-dp.html\u0022\u003EDP.resolution_rule\u003C/a\u003E"},{"uri":"/Calcolemus/reference/calcolemus-dp.html#dpsat","title":"DP.dpsat","content":"DP.dpsat \ndpsat \n\n Tests \u003Ccode\u003Efm\u003C/code\u003E (propositional) satisfiability with the Davis-Putnam \n procedure.\n "},{"uri":"/Calcolemus/reference/calcolemus-dp.html#dptaut","title":"DP.dptaut","content":"DP.dptaut \ndptaut \n\n Tests \u003Ccode\u003Efm\u003C/code\u003E (propositional) validity with the Davis-Putnam \n procedure.\n "},{"uri":"/Calcolemus/reference/calcolemus-dp.html#posneg_count","title":"DP.posneg_count","content":"DP.posneg_count \nposneg_count \n\n Counts the number of occurrences (both positively or negatively) of the \n literal \u003Ccode\u003El\u003C/code\u003E in \u003Ccode\u003Ecls\u003C/code\u003E.\n  \n\n It is used as an heuristic to chose the literal for the splitting rule \n in the Davis-Putnam-Loveland-Logemann procedure.\n "},{"uri":"/Calcolemus/reference/calcolemus-dp.html#dpll","title":"DP.dpll","content":"DP.dpll \ndpll \n\n Tests \u003Ccode\u003Eclauses\u003C/code\u003E (propositional) satisfiability with the \n Davis-Putnam-Loveland-Logemann procedure.\n  \n\n Tests the (propositional) satisfiability of a list of clauses (to be \n understood as an iterated conjunction of disjunctions), using the \n Davis-Putnam-Loveland-Logemann procedure which consists in applying \n recursively the rules \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-dp.html\u0022\u003EDP.one_literal_rule\u003C/a\u003E, \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-dp.html\u0022\u003EDP.affirmative_negative_rule\u003C/a\u003E and, if \n neither of these is applicable (instead of \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-dp.html\u0022\u003EDP.resolution_rule\u003C/a\u003E) the \u003Cem\u003Esplitting \n rule\u003C/em\u003E.\n \u003Cp\u003E\u003C/p\u003E\n The splitting rule consists in choosing some literal and testing, \n separately, the satisfiability of the union of the input with this \n literal and its negation, respectively: if one of these is satisfiable \n so the original input is.\n \u003Cp\u003E\u003C/p\u003E\n The literal that maximizes \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-dp.html\u0022\u003EDP.posneg_count\u003C/a\u003E is chosen for the \n splitting rule.\n "},{"uri":"/Calcolemus/reference/calcolemus-dp.html#dpllsat","title":"DP.dpllsat","content":"DP.dpllsat \ndpllsat \n\n Tests \u003Ccode\u003Efm\u003C/code\u003E (propositional) satisfiability with the \n Davis-Putnam-Loveland-Logemann procedure.\n "},{"uri":"/Calcolemus/reference/calcolemus-dp.html#dplltaut","title":"DP.dplltaut","content":"DP.dplltaut \ndplltaut \n\n Tests \u003Ccode\u003Efm\u003C/code\u003E (propositional) validity with the \n Davis-Putnam-Loveland-Logemann procedure.\n "},{"uri":"/Calcolemus/reference/calcolemus-dp.html#unassigned","title":"DP.unassigned","content":"DP.unassigned \nunassigned \n\n Returns \u003Ccode\u003Eclauses\u003C/code\u003E\u0027 literals that are not yet assigned in \n \u003Ccode\u003Etrail\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-dp.html#unit_subpropagate","title":"DP.unit_subpropagate","content":"DP.unit_subpropagate \nunit_subpropagate \n\n Performs unit propagation exhaustively modifying internally the clauses \n \u003Ccode\u003Ecls\u003C/code\u003E and processing the \u003Ccode\u003Etrail\u003C/code\u003E into a finite partial \n function \u003Ccode\u003Efn\u003C/code\u003E for more efficient lookup.\n  \n\n The clauses are updated only from the point of view of the removing of \n unit clauses\u0027 complementary literals, if there are.\n "},{"uri":"/Calcolemus/reference/calcolemus-dp.html#unit_propagate","title":"DP.unit_propagate","content":"DP.unit_propagate \nunit_propagate \n\n Performs unit propagation modifying internally the clauses \u003Ccode\u003Ecls\u003C/code\u003E.\n  \n\n The clauses are updated only from the point of view of the removing of \n unit clauses\u0027 complementary literals, if there are.\n "},{"uri":"/Calcolemus/reference/calcolemus-dp.html#backtrack","title":"DP.backtrack","content":"DP.backtrack \nbacktrack \n\n Removes items from the trail until the most recent decision literal is \n reached or there are no one left in the trail.\n "},{"uri":"/Calcolemus/reference/calcolemus-dp.html#dpli","title":"DP.dpli","content":"DP.dpli \ndpli \n\n Tests \u003Ccode\u003Eclauses\u003C/code\u003E (propositional) satisfiability with the \n Davis-Putnam-Loveland-Logemann procedure with an iterative \n implementation.\n "},{"uri":"/Calcolemus/reference/calcolemus-dp.html#dplisat","title":"DP.dplisat","content":"DP.dplisat \ndplisat \n\n Tests \u003Ccode\u003Efm\u003C/code\u003E (propositional) satisfiability with the \n Davis-Putnam-Loveland-Logemann procedure with the iterative \n implementation.\n "},{"uri":"/Calcolemus/reference/calcolemus-dp.html#dplitaut","title":"DP.dplitaut","content":"DP.dplitaut \ndplitaut \n\n Tests \u003Ccode\u003Efm\u003C/code\u003E (propositional) validity with the \n Davis-Putnam-Loveland-Logemann procedure with iterative implementation.\n "},{"uri":"/Calcolemus/reference/calcolemus-dp.html#backjump","title":"DP.backjump","content":"DP.backjump \nbackjump \n\n TBD.\n "},{"uri":"/Calcolemus/reference/calcolemus-dp.html#dplb","title":"DP.dplb","content":"DP.dplb \ndplb \n\n TBD.\n "},{"uri":"/Calcolemus/reference/calcolemus-dp.html#dplbsat","title":"DP.dplbsat","content":"DP.dplbsat \ndplbsat \n\n TBD.\n "},{"uri":"/Calcolemus/reference/calcolemus-dp.html#dplbtaut","title":"DP.dplbtaut","content":"DP.dplbtaut \ndplbtaut \n\n TBD.\n "},{"uri":"/Calcolemus/reference/calcolemus-dp-trailmix.html","title":"trailmix","content":"trailmix \n\n Flags to mark literals in the case split \u003Cem\u003Etrail\u003C/em\u003E used in the \n DPLL iterative implementation. \n \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-dp.html\u0022\u003EDP.dpli\u003C/a\u003E \ntrailmix.Guessed \nGuessed \ntrailmix.Deduced \nDeduced"},{"uri":"/Calcolemus/reference/calcolemus-dp-trailmix.html#Guessed","title":"trailmix.Guessed","content":"trailmix.Guessed \nGuessed \n\n Literal that was just assumed as one half of a case-split.\n "},{"uri":"/Calcolemus/reference/calcolemus-dp-trailmix.html#Deduced","title":"trailmix.Deduced","content":"trailmix.Deduced \nDeduced \n\n Literal that was deduced by unit propagation from literals assumed \n earlier.\n "},{"uri":"/Calcolemus/reference/calcolemus-decidable.html","title":"Decidable","content":"Decidable \n\n Some decidable subsets of first-order logic.\n  \nDecidable.aedecide \naedecide \nDecidable.separate \nseparate \nDecidable.pushquant \npushquant \nDecidable.miniscope \nminiscope \nDecidable.wang \nwang \nDecidable.atom \natom \nDecidable.premiss_A \npremiss_A \nDecidable.premiss_E \npremiss_E \nDecidable.premiss_I \npremiss_I \nDecidable.premiss_O \npremiss_O \nDecidable.anglicize_premiss \nanglicize_premiss \nDecidable.anglicize_syllogism \nanglicize_syllogism \nDecidable.all_possible_syllogisms \nall_possible_syllogisms \nDecidable.all_possible_syllogisms\u0027 \nall_possible_syllogisms\u0027 \nDecidable.alltuples \nalltuples \nDecidable.allmappings \nallmappings \nDecidable.alldepmappings \nalldepmappings \nDecidable.allfunctions \nallfunctions \nDecidable.allpredicates \nallpredicates \nDecidable.decide_finite \ndecide_finite \nDecidable.limmeson \nlimmeson \nDecidable.limited_meson \nlimited_meson \nDecidable.decide_fmp \ndecide_fmp \nDecidable.decide_monadic \ndecide_monadic"},{"uri":"/Calcolemus/reference/calcolemus-decidable.html#aedecide","title":"Decidable.aedecide","content":"Decidable.aedecide \naedecide \n"},{"uri":"/Calcolemus/reference/calcolemus-decidable.html#separate","title":"Decidable.separate","content":"Decidable.separate \nseparate \n"},{"uri":"/Calcolemus/reference/calcolemus-decidable.html#pushquant","title":"Decidable.pushquant","content":"Decidable.pushquant \npushquant \n"},{"uri":"/Calcolemus/reference/calcolemus-decidable.html#miniscope","title":"Decidable.miniscope","content":"Decidable.miniscope \nminiscope \n"},{"uri":"/Calcolemus/reference/calcolemus-decidable.html#wang","title":"Decidable.wang","content":"Decidable.wang \nwang \n"},{"uri":"/Calcolemus/reference/calcolemus-decidable.html#atom","title":"Decidable.atom","content":"Decidable.atom \natom \n"},{"uri":"/Calcolemus/reference/calcolemus-decidable.html#premiss_A","title":"Decidable.premiss_A","content":"Decidable.premiss_A \npremiss_A \n"},{"uri":"/Calcolemus/reference/calcolemus-decidable.html#premiss_E","title":"Decidable.premiss_E","content":"Decidable.premiss_E \npremiss_E \n"},{"uri":"/Calcolemus/reference/calcolemus-decidable.html#premiss_I","title":"Decidable.premiss_I","content":"Decidable.premiss_I \npremiss_I \n"},{"uri":"/Calcolemus/reference/calcolemus-decidable.html#premiss_O","title":"Decidable.premiss_O","content":"Decidable.premiss_O \npremiss_O \n"},{"uri":"/Calcolemus/reference/calcolemus-decidable.html#anglicize_premiss","title":"Decidable.anglicize_premiss","content":"Decidable.anglicize_premiss \nanglicize_premiss \n"},{"uri":"/Calcolemus/reference/calcolemus-decidable.html#anglicize_syllogism","title":"Decidable.anglicize_syllogism","content":"Decidable.anglicize_syllogism \nanglicize_syllogism \n"},{"uri":"/Calcolemus/reference/calcolemus-decidable.html#all_possible_syllogisms","title":"Decidable.all_possible_syllogisms","content":"Decidable.all_possible_syllogisms \nall_possible_syllogisms \n"},{"uri":"/Calcolemus/reference/calcolemus-decidable.html#all_possible_syllogisms\u0027","title":"Decidable.all_possible_syllogisms\u0027","content":"Decidable.all_possible_syllogisms\u0027 \nall_possible_syllogisms\u0027 \n"},{"uri":"/Calcolemus/reference/calcolemus-decidable.html#alltuples","title":"Decidable.alltuples","content":"Decidable.alltuples \nalltuples \n"},{"uri":"/Calcolemus/reference/calcolemus-decidable.html#allmappings","title":"Decidable.allmappings","content":"Decidable.allmappings \nallmappings \n"},{"uri":"/Calcolemus/reference/calcolemus-decidable.html#alldepmappings","title":"Decidable.alldepmappings","content":"Decidable.alldepmappings \nalldepmappings \n"},{"uri":"/Calcolemus/reference/calcolemus-decidable.html#allfunctions","title":"Decidable.allfunctions","content":"Decidable.allfunctions \nallfunctions \n"},{"uri":"/Calcolemus/reference/calcolemus-decidable.html#allpredicates","title":"Decidable.allpredicates","content":"Decidable.allpredicates \nallpredicates \n"},{"uri":"/Calcolemus/reference/calcolemus-decidable.html#decide_finite","title":"Decidable.decide_finite","content":"Decidable.decide_finite \ndecide_finite \n"},{"uri":"/Calcolemus/reference/calcolemus-decidable.html#limmeson","title":"Decidable.limmeson","content":"Decidable.limmeson \nlimmeson \n"},{"uri":"/Calcolemus/reference/calcolemus-decidable.html#limited_meson","title":"Decidable.limited_meson","content":"Decidable.limited_meson \nlimited_meson \n"},{"uri":"/Calcolemus/reference/calcolemus-decidable.html#decide_fmp","title":"Decidable.decide_fmp","content":"Decidable.decide_fmp \ndecide_fmp \n"},{"uri":"/Calcolemus/reference/calcolemus-decidable.html#decide_monadic","title":"Decidable.decide_monadic","content":"Decidable.decide_monadic \ndecide_monadic \n"},{"uri":"/Calcolemus/reference/calcolemus-defcnf.html","title":"Defcnf","content":"Defcnf \nDefinitional Conjunctive Normal Form. \nDefcnf.mkprop \nmkprop \nDefcnf.maincnf \nmaincnf \nDefcnf.defstep \ndefstep \nDefcnf.max_varindex \nmax_varindex \nDefcnf.mk_defcnf \nmk_defcnf \nDefcnf.defcnf01 \ndefcnf01 \nDefcnf.subcnf \nsubcnf \nDefcnf.orcnf \norcnf \nDefcnf.andcnf \nandcnf \nDefcnf.defcnfs \ndefcnfs \nDefcnf.defcnf \ndefcnf \nDefcnf.andcnf3 \nandcnf3 \nDefcnf.defcnf3 \ndefcnf3"},{"uri":"/Calcolemus/reference/calcolemus-defcnf.html#mkprop","title":"Defcnf.mkprop","content":"Defcnf.mkprop \nmkprop \n\n Generates an indexed variable of the form \u003Ccode\u003Ep_n\u003C/code\u003E and the next \n index \u003Ccode\u003En\u002B1\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-defcnf.html#maincnf","title":"Defcnf.maincnf","content":"Defcnf.maincnf \nmaincnf \n\n Core definitional CNF procedure.\n "},{"uri":"/Calcolemus/reference/calcolemus-defcnf.html#defstep","title":"Defcnf.defstep","content":"Defcnf.defstep \ndefstep \n\n Used to define \u003Ca href=\u0022/Calcolemus/reference/calcolemus-defcnf.html#maincnf\u0022\u003EDefcnf.maincnf\u003C/a\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-defcnf.html#max_varindex","title":"Defcnf.max_varindex","content":"Defcnf.max_varindex \nmax_varindex \n\n Return the larger between \u003Ccode\u003En\u003C/code\u003E and the index \u003Ccode\u003Em\u003C/code\u003E of the \n variable \u003Ccode\u003Es\u003C/code\u003E if this is of the form \u003Ccode\u003Epfx_m\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-defcnf.html#mk_defcnf","title":"Defcnf.mk_defcnf","content":"Defcnf.mk_defcnf \nmk_defcnf \n\n Returns the result of a specific CNF procedure in a set-of-sets \n representation.\n  \n\n Transforms a generic propositional formula \u003Ccode\u003Efm\u003C/code\u003E in \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-prop.html\u0022\u003EProp.nenf\u003C/a\u003E and then it applies to the \n result a specific definitional CNF procedure \u003Ccode\u003Efn\u003C/code\u003E returning an \n equisatisfiable CNF in a set-of-sets representation.\n "},{"uri":"/Calcolemus/reference/calcolemus-defcnf.html#defcnf01","title":"Defcnf.defcnf01","content":"Defcnf.defcnf01 \ndefcnf01 \n\n Returns an equisatisfiable CNF of the input formula using a \n definitional procedure, transforming each definition in isolation.\n "},{"uri":"/Calcolemus/reference/calcolemus-defcnf.html#subcnf","title":"Defcnf.subcnf","content":"Defcnf.subcnf \nsubcnf \n\n Links the definitional transformations produced by \u003Ccode\u003Esfn\u003C/code\u003E in the \n different parts of the formula.\n "},{"uri":"/Calcolemus/reference/calcolemus-defcnf.html#orcnf","title":"Defcnf.orcnf","content":"Defcnf.orcnf \norcnf \n\n Performs the definitional transformation of the disjuncts.\n "},{"uri":"/Calcolemus/reference/calcolemus-defcnf.html#andcnf","title":"Defcnf.andcnf","content":"Defcnf.andcnf \nandcnf \n\n Performs the definitional transformation of the conjuncts.\n "},{"uri":"/Calcolemus/reference/calcolemus-defcnf.html#defcnfs","title":"Defcnf.defcnfs","content":"Defcnf.defcnfs \ndefcnfs \n\n Optimized definitional CNF in set-of-sets representation.\n  \n\n It returns an equisatisfiable CNF of the input formula in a set-of-sets \n representation avoiding some redundant definitions.\n "},{"uri":"/Calcolemus/reference/calcolemus-defcnf.html#defcnf","title":"Defcnf.defcnf","content":"Defcnf.defcnf \ndefcnf \n\n Optimized definitional CNF.\n  \n\n It returns an equisatisfiable CNF of the input formula avoiding some \n redundant definitions. The optimization is obtained, when dealing with \n an iterated conjunction,  by \n \u003Cul\u003E\n  \u003Cli\u003Eputting the conjuncts in CNF separately\u003C/li\u003E\n  \u003Cli\u003E\n and if they in turn are already disjunctions of literals leave them \n unchanged.\n \u003C/li\u003E\n\u003C/ul\u003E"},{"uri":"/Calcolemus/reference/calcolemus-defcnf.html#andcnf3","title":"Defcnf.andcnf3","content":"Defcnf.andcnf3 \nandcnf3 \n\n Performs the definitional transformation of the conjuncts.\n  \n\n It keeps the optimization of putting the conjuncts in CNF separately, \n but removes the second optimization of leaving unchanged conjuncts \n that are already a disjunction of literals. In this way guarantees that \n the result is in 3-CNF.\n "},{"uri":"/Calcolemus/reference/calcolemus-defcnf.html#defcnf3","title":"Defcnf.defcnf3","content":"Defcnf.defcnf3 \ndefcnf3 \n\n Optimized definitional CNF that also guarantees 3-CNF in the result.\n  \n\n 3-CNF means that each conjunct contains a disjunction of **at most** \n three literals.\n "},{"uri":"/Calcolemus/reference/calcolemus-eqelim.html","title":"Eqelim","content":"Eqelim \n\n Equality elimination: Brand transform etc.\n  \nEqelim.modify_S \nmodify_S \nEqelim.modify_T \nmodify_T \nEqelim.is_nonvar \nis_nonvar \nEqelim.find_nestnonvar \nfind_nestnonvar \nEqelim.find_nvsubterm \nfind_nvsubterm \nEqelim.replacet \nreplacet \nEqelim.replace \nreplace \nEqelim.emodify \nemodify \nEqelim.modify_E \nmodify_E \nEqelim.brand \nbrand \nEqelim.bpuremeson \nbpuremeson \nEqelim.bmeson \nbmeson \nEqelim.emeson \nemeson"},{"uri":"/Calcolemus/reference/calcolemus-eqelim.html#modify_S","title":"Eqelim.modify_S","content":"Eqelim.modify_S \nmodify_S \n"},{"uri":"/Calcolemus/reference/calcolemus-eqelim.html#modify_T","title":"Eqelim.modify_T","content":"Eqelim.modify_T \nmodify_T \n"},{"uri":"/Calcolemus/reference/calcolemus-eqelim.html#is_nonvar","title":"Eqelim.is_nonvar","content":"Eqelim.is_nonvar \nis_nonvar \n"},{"uri":"/Calcolemus/reference/calcolemus-eqelim.html#find_nestnonvar","title":"Eqelim.find_nestnonvar","content":"Eqelim.find_nestnonvar \nfind_nestnonvar \n"},{"uri":"/Calcolemus/reference/calcolemus-eqelim.html#find_nvsubterm","title":"Eqelim.find_nvsubterm","content":"Eqelim.find_nvsubterm \nfind_nvsubterm \n"},{"uri":"/Calcolemus/reference/calcolemus-eqelim.html#replacet","title":"Eqelim.replacet","content":"Eqelim.replacet \nreplacet \n"},{"uri":"/Calcolemus/reference/calcolemus-eqelim.html#replace","title":"Eqelim.replace","content":"Eqelim.replace \nreplace \n"},{"uri":"/Calcolemus/reference/calcolemus-eqelim.html#emodify","title":"Eqelim.emodify","content":"Eqelim.emodify \nemodify \n"},{"uri":"/Calcolemus/reference/calcolemus-eqelim.html#modify_E","title":"Eqelim.modify_E","content":"Eqelim.modify_E \nmodify_E \n"},{"uri":"/Calcolemus/reference/calcolemus-eqelim.html#brand","title":"Eqelim.brand","content":"Eqelim.brand \nbrand \n"},{"uri":"/Calcolemus/reference/calcolemus-eqelim.html#bpuremeson","title":"Eqelim.bpuremeson","content":"Eqelim.bpuremeson \nbpuremeson \n"},{"uri":"/Calcolemus/reference/calcolemus-eqelim.html#bmeson","title":"Eqelim.bmeson","content":"Eqelim.bmeson \nbmeson \n"},{"uri":"/Calcolemus/reference/calcolemus-eqelim.html#emeson","title":"Eqelim.emeson","content":"Eqelim.emeson \nemeson \n"},{"uri":"/Calcolemus/reference/calcolemus-equal.html","title":"Equal","content":"Equal \n\n Naive equality axiomatization.\n  \nEqual.is_eq \nis_eq \nEqual.mk_eq \nmk_eq \nEqual.dest_eq \ndest_eq \nEqual.lhs \nlhs \nEqual.rhs \nrhs \nEqual.predicates \npredicates \nEqual.function_congruence \nfunction_congruence \nEqual.predicate_congruence \npredicate_congruence \nEqual.equivalence_axioms \nequivalence_axioms \nEqual.equalitize \nequalitize"},{"uri":"/Calcolemus/reference/calcolemus-equal.html#is_eq","title":"Equal.is_eq","content":"Equal.is_eq \nis_eq \n"},{"uri":"/Calcolemus/reference/calcolemus-equal.html#mk_eq","title":"Equal.mk_eq","content":"Equal.mk_eq \nmk_eq \n"},{"uri":"/Calcolemus/reference/calcolemus-equal.html#dest_eq","title":"Equal.dest_eq","content":"Equal.dest_eq \ndest_eq \n"},{"uri":"/Calcolemus/reference/calcolemus-equal.html#lhs","title":"Equal.lhs","content":"Equal.lhs \nlhs \n"},{"uri":"/Calcolemus/reference/calcolemus-equal.html#rhs","title":"Equal.rhs","content":"Equal.rhs \nrhs \n"},{"uri":"/Calcolemus/reference/calcolemus-equal.html#predicates","title":"Equal.predicates","content":"Equal.predicates \npredicates \n"},{"uri":"/Calcolemus/reference/calcolemus-equal.html#function_congruence","title":"Equal.function_congruence","content":"Equal.function_congruence \nfunction_congruence \n"},{"uri":"/Calcolemus/reference/calcolemus-equal.html#predicate_congruence","title":"Equal.predicate_congruence","content":"Equal.predicate_congruence \npredicate_congruence \n"},{"uri":"/Calcolemus/reference/calcolemus-equal.html#equivalence_axioms","title":"Equal.equivalence_axioms","content":"Equal.equivalence_axioms \nequivalence_axioms \n"},{"uri":"/Calcolemus/reference/calcolemus-equal.html#equalitize","title":"Equal.equalitize","content":"Equal.equalitize \nequalitize \n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html","title":"Fol","content":"Fol \n\n Basic stuff for first order logic: datatype, parsing and printing, \n semantics, syntax operations and substitution.\n  \nFol.fol \nfol \nFol.term \nterm \nFol.onformula \nonformula \nFol.is_const_name \nis_const_name \nFol.parse_atomic_term \nparse_atomic_term \nFol.parse_term \nparse_term \nFol.parset \nparset \nFol.(!!!) \n(!!!) \nFol.parse_infix_atom \nparse_infix_atom \nFol.parse_atom \nparse_atom \nFol.parse \nparse \nFol.(!!) \n(!!) \nFol.fprint_term \nfprint_term \nFol.fprint_fargs \nfprint_fargs \nFol.fprint_infix_term \nfprint_infix_term \nFol.fprintert \nfprintert \nFol.print_term \nprint_term \nFol.sprint_term \nsprint_term \nFol.fprint_atom \nfprint_atom \nFol.print_atom \nprint_atom \nFol.sprint_atom \nsprint_atom \nFol.fprint_fol_formula \nfprint_fol_formula \nFol.print_fol_formula \nprint_fol_formula \nFol.sprint_fol_formula \nsprint_fol_formula \nFol.termval \ntermval \nFol.holds \nholds \nFol.bool_interp \nbool_interp \nFol.mod_interp \nmod_interp \nFol.fvt \nfvt \nFol.var \nvar \nFol.fv \nfv \nFol.generalize \ngeneralize \nFol.tsubst \ntsubst \nFol.variant \nvariant \nFol.subst \nsubst \nFol.substq \nsubstq"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#onformula","title":"Fol.onformula","content":"Fol.onformula \nonformula \n\n Applies a subfunction \u0060f\u0060 to the top *terms*.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#is_const_name","title":"Fol.is_const_name","content":"Fol.is_const_name \nis_const_name \n\n Checks if a string is a constant term. Only numerals and the empty list constant \u0022nil\u0022 are considered as constants.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#parse_atomic_term","title":"Fol.parse_atomic_term","content":"Fol.parse_atomic_term \nparse_atomic_term \n\n Parses an atomic term.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#parse_term","title":"Fol.parse_term","content":"Fol.parse_term \nparse_term \n\n Recursive descent parser of terms built up from an atomic term parser \n by cascading instances of parse infix in order of precedence, following the \n conventions with \u0027^\u0027 coming highest and \u0027::\u0027 lowest.\n \n It takes a list of string tokens \u0060inp\u0060 and returns a pair consisting of the \n parsed term tree together with any unparsed input. \n \n In order to check whether a name is within the scope of a quanti\uFB01er, it \n takes an additional argument \u0060vs\u0060 which is the set of bound variables in \n the current scope.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#parset","title":"Fol.parset","content":"Fol.parset \nparset \n\n Parses a string into a term.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#(!!!)","title":"Fol.(!!!)","content":"Fol.(!!!) \n(!!!) \n\n A convenient operator to call \u0060parset\u0060.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#parse_infix_atom","title":"Fol.parse_infix_atom","content":"Fol.parse_infix_atom \nparse_infix_atom \n\n A special recognizer for \u0027in\uFB01x\u0027 atomic formulas like s \u003C t.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#parse_atom","title":"Fol.parse_atom","content":"Fol.parse_atom \nparse_atom \n\n Parses atomic fol formulas.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#parse","title":"Fol.parse","content":"Fol.parse \nparse \n\n Parses a fol formula\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#(!!)","title":"Fol.(!!)","content":"Fol.(!!) \n(!!) \n\n A convenient operator to call \u0060parse\u0060.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#fprint_term","title":"Fol.fprint_term","content":"Fol.fprint_term \nfprint_term \n\n Prints terms.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#fprint_fargs","title":"Fol.fprint_fargs","content":"Fol.fprint_fargs \nfprint_fargs \n\n Prints a function and its arguments.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#fprint_infix_term","title":"Fol.fprint_infix_term","content":"Fol.fprint_infix_term \nfprint_infix_term \n\n Prints an infix operation.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#fprintert","title":"Fol.fprintert","content":"Fol.fprintert \nfprintert \n\n Term printer with TextWriter.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#print_term","title":"Fol.print_term","content":"Fol.print_term \nprint_term \n\n Term printer.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#sprint_term","title":"Fol.sprint_term","content":"Fol.sprint_term \nsprint_term \n\n Return the string of the concrete syntax representation of a term.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#fprint_atom","title":"Fol.fprint_atom","content":"Fol.fprint_atom \nfprint_atom \n\n Printer of atomic fol formulas with TextWriter.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#print_atom","title":"Fol.print_atom","content":"Fol.print_atom \nprint_atom \n\n Printer of atomic fol formulas.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#sprint_atom","title":"Fol.sprint_atom","content":"Fol.sprint_atom \nsprint_atom \n\n Returns the concrete syntax representation of an atom.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#fprint_fol_formula","title":"Fol.fprint_fol_formula","content":"Fol.fprint_fol_formula \nfprint_fol_formula \n\n Printer of fol formulas with TextWriter.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#print_fol_formula","title":"Fol.print_fol_formula","content":"Fol.print_fol_formula \nprint_fol_formula \n\n Printer of fol formulas.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#sprint_fol_formula","title":"Fol.sprint_fol_formula","content":"Fol.sprint_fol_formula \nsprint_fol_formula \n\n Returns the string of the concrete syntax representation of fol formulas.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#termval","title":"Fol.termval","content":"Fol.termval \ntermval \n\n Returns the value of a term \u0060tm\u0060 in a particular \n interpretation M (\u0060domain\u0060, \u0060func\u0060, \u0060pred\u0060) and valuation \u0060v\u0060.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#holds","title":"Fol.holds","content":"Fol.holds \nholds \n\n Evaluates a fol formula \u0060fm\u0060 in the interpretation specified\n by the triplet \u0060domain\u0060, \u0060func\u0060, \u0060pred\u0060 and the variables valuation \u0060v\u0060.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#bool_interp","title":"Fol.bool_interp","content":"Fol.bool_interp \nbool_interp \n\n An interpretation \u00E0 la Boole.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#mod_interp","title":"Fol.mod_interp","content":"Fol.mod_interp \nmod_interp \n\n An arithmetic modulo \u0060n\u0060 interpretation.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#fvt","title":"Fol.fvt","content":"Fol.fvt \nfvt \n\n Returns the free variables in the term \u0060tm\u0060.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#var","title":"Fol.var","content":"Fol.var \nvar \n\n Returns all the variables in the FOL formula \u0060fm\u0060.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#fv","title":"Fol.fv","content":"Fol.fv \nfv \n\n Returns the free variables in the FOL formula \u0060fm\u0060.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#generalize","title":"Fol.generalize","content":"Fol.generalize \ngeneralize \n\n Universal closure of a formula.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#tsubst","title":"Fol.tsubst","content":"Fol.tsubst \ntsubst \n\n Substitution within terms.                                                //\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#variant","title":"Fol.variant","content":"Fol.variant \nvariant \n\n Creates a \u2018variant\u2019 of a variable name by adding prime characters to it \n until it is distinct from some given list of variables to avoid.\n \n \u0060variant \u0022x\u0022 [\u0022x\u0022; \u0022y\u0022]\u0060 returns \u0060\u0022x\u0027\u0022\u0060.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#subst","title":"Fol.subst","content":"Fol.subst \nsubst \n\n Given a substitution function \u0060sbfn\u0060 applies it to the input formula \u0060fm\u0060.\n Bound variables will be renamed if necessary to avoid capture.\n \n \u0060subst (\u0022y\u0022 |=\u003E Var \u0022x\u0022) (\u0022forall x. x = y\u0022 |\u003E parse)\u0060 returns \n \u0060\u003C\u003Cforall x\u0027. x\u0027 = x\u003E\u003E\u0060.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule.html#substq","title":"Fol.substq","content":"Fol.substq \nsubstq \n\n Checks whether there would be variable capture if the bound variable \n \u0060x\u0060 is not renamed.\n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule-fol.html","title":"fol","content":"fol \n\n Type for atomic first order formulas.\n \nfol.R \nR"},{"uri":"/Calcolemus/reference/calcolemus-folmodule-fol.html#R","title":"fol.R","content":"fol.R \nR \n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule-term.html","title":"term","content":"term \n\n Type for first order terms.\n \nterm.Var \nVar \nterm.Fn \nFn"},{"uri":"/Calcolemus/reference/calcolemus-folmodule-term.html#Var","title":"term.Var","content":"term.Var \nVar \n"},{"uri":"/Calcolemus/reference/calcolemus-folmodule-term.html#Fn","title":"term.Fn","content":"term.Fn \nFn \n"},{"uri":"/Calcolemus/reference/calcolemus-folderived.html","title":"Folderived","content":"Folderived \n\n First-order reasoning by inference.\n  \nFolderived.eq_sym \neq_sym \nFolderived.eq_trans \neq_trans \nFolderived.icongruence \nicongruence \nFolderived.gen_right_th \ngen_right_th \nFolderived.genimp \ngenimp \nFolderived.gen_right \ngen_right \nFolderived.exists_left_th \nexists_left_th \nFolderived.exists_left \nexists_left \nFolderived.subspec \nsubspec \nFolderived.subalpha \nsubalpha \nFolderived.isubst \nisubst \nFolderived.alpha \nalpha \nFolderived.ispec \nispec \nFolderived.spec \nspec"},{"uri":"/Calcolemus/reference/calcolemus-folderived.html#eq_sym","title":"Folderived.eq_sym","content":"Folderived.eq_sym \neq_sym \n"},{"uri":"/Calcolemus/reference/calcolemus-folderived.html#eq_trans","title":"Folderived.eq_trans","content":"Folderived.eq_trans \neq_trans \n"},{"uri":"/Calcolemus/reference/calcolemus-folderived.html#icongruence","title":"Folderived.icongruence","content":"Folderived.icongruence \nicongruence \n"},{"uri":"/Calcolemus/reference/calcolemus-folderived.html#gen_right_th","title":"Folderived.gen_right_th","content":"Folderived.gen_right_th \ngen_right_th \n"},{"uri":"/Calcolemus/reference/calcolemus-folderived.html#genimp","title":"Folderived.genimp","content":"Folderived.genimp \ngenimp \n"},{"uri":"/Calcolemus/reference/calcolemus-folderived.html#gen_right","title":"Folderived.gen_right","content":"Folderived.gen_right \ngen_right \n"},{"uri":"/Calcolemus/reference/calcolemus-folderived.html#exists_left_th","title":"Folderived.exists_left_th","content":"Folderived.exists_left_th \nexists_left_th \n"},{"uri":"/Calcolemus/reference/calcolemus-folderived.html#exists_left","title":"Folderived.exists_left","content":"Folderived.exists_left \nexists_left \n"},{"uri":"/Calcolemus/reference/calcolemus-folderived.html#subspec","title":"Folderived.subspec","content":"Folderived.subspec \nsubspec \n"},{"uri":"/Calcolemus/reference/calcolemus-folderived.html#subalpha","title":"Folderived.subalpha","content":"Folderived.subalpha \nsubalpha \n"},{"uri":"/Calcolemus/reference/calcolemus-folderived.html#isubst","title":"Folderived.isubst","content":"Folderived.isubst \nisubst \n"},{"uri":"/Calcolemus/reference/calcolemus-folderived.html#alpha","title":"Folderived.alpha","content":"Folderived.alpha \nalpha \n"},{"uri":"/Calcolemus/reference/calcolemus-folderived.html#ispec","title":"Folderived.ispec","content":"Folderived.ispec \nispec \n"},{"uri":"/Calcolemus/reference/calcolemus-folderived.html#spec","title":"Folderived.spec","content":"Folderived.spec \nspec \n"},{"uri":"/Calcolemus/reference/calcolemus-formulas.html","title":"Formulas","content":"Formulas \n\n Polymorphic type of formulas with parser and printer. \n  \nFormulas.formula\u003C\u0027a\u003E \nformula\u003C\u0027a\u003E \nFormulas.parse_atomic_formula \nparse_atomic_formula \nFormulas.parse_quant \nparse_quant \nFormulas.parse_formula \nparse_formula \nFormulas.fbracket \nfbracket \nFormulas.strip_quant \nstrip_quant \nFormulas.fprint_formula \nfprint_formula \nFormulas.fprint_qformula \nfprint_qformula \nFormulas.print_formula \nprint_formula \nFormulas.sprint_formula \nsprint_formula \nFormulas.print_qformula \nprint_qformula \nFormulas.sprint_qformula \nsprint_qformula \nFormulas.mk_and \nmk_and \nFormulas.mk_or \nmk_or \nFormulas.mk_imp \nmk_imp \nFormulas.mk_iff \nmk_iff \nFormulas.mk_forall \nmk_forall \nFormulas.mk_exists \nmk_exists \nFormulas.dest_iff \ndest_iff \nFormulas.dest_and \ndest_and \nFormulas.conjuncts \nconjuncts \nFormulas.dest_or \ndest_or \nFormulas.disjuncts \ndisjuncts \nFormulas.dest_imp \ndest_imp \nFormulas.antecedent \nantecedent \nFormulas.consequent \nconsequent \nFormulas.onatoms \nonatoms \nFormulas.overatoms \noveratoms \nFormulas.atom_union \natom_union"},{"uri":"/Calcolemus/reference/calcolemus-formulas.html#parse_atomic_formula","title":"Formulas.parse_atomic_formula","content":"Formulas.parse_atomic_formula \nparse_atomic_formula \nParses atomic formulas. \n\n It attempts to parse an atomic formula as a term followed by an infix \n predicate symbol and only if that fails proceed to considering other \n kinds of formulas.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas.html#parse_quant","title":"Formulas.parse_quant","content":"Formulas.parse_quant \nparse_quant \n\n Parses quantified formulas.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas.html#parse_formula","title":"Formulas.parse_formula","content":"Formulas.parse_formula \nparse_formula \n\n Recursive descent parser of polymorphic formulas built up from an \n atomic formula parser by cascading instances of parse infix in order of \n precedence, following the conventions with \u003Ccode\u003E/\\\u003C/code\u003E coming highest and \n \u003Ccode\u003E\u0026lt;=\u0026gt;\u003C/code\u003E lowest.\n  \n\n It takes a list of string tokens \u003Ccode\u003Einp\u003C/code\u003E and in order to check \n whether a name is within the scope of a quantifier, it takes an \n additional argument \u003Ccode\u003Evs\u003C/code\u003E which is the set of bound variables in \n the current scope.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas.html#fbracket","title":"Formulas.fbracket","content":"Formulas.fbracket \nfbracket \n\n Modifies a basic printer to have a kind of boxing \u0027wrapped\u0027 around it.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas.html#strip_quant","title":"Formulas.strip_quant","content":"Formulas.strip_quant \nstrip_quant \n\n Formula destructor for quantified formulas.\n  \n\n It breaks apart a quantified formula \\(\\forall xy\\ldots z.\\ p\\) into \n a pair of the list of its quantified variables and body \n \\(([x,y,\\ldots,z], p)\\).\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas.html#fprint_formula","title":"Formulas.fprint_formula","content":"Formulas.fprint_formula \nfprint_formula \n\n Printing parametrized by a function \u003Ccode\u003Epfn\u003C/code\u003E to print atoms.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas.html#fprint_qformula","title":"Formulas.fprint_qformula","content":"Formulas.fprint_qformula \nfprint_qformula \n\n Main toplevel printer. It just adds the guillemot-style quotations \n round the formula so that it looks like the quoted formulas we parse.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas.html#print_formula","title":"Formulas.print_formula","content":"Formulas.print_formula \nprint_formula \n\n Prints a formula \u003Ccode\u003Efm\u003C/code\u003E using a function \u003Ccode\u003Epfn\u003C/code\u003E to print atoms.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas.html#sprint_formula","title":"Formulas.sprint_formula","content":"Formulas.sprint_formula \nsprint_formula \n\n Returns a string representation of a formula \u003Ccode\u003Efm\u003C/code\u003E using a function \n \u003Ccode\u003Epfn\u003C/code\u003E to print atoms.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas.html#print_qformula","title":"Formulas.print_qformula","content":"Formulas.print_qformula \nprint_qformula \n\n Prints a formula \u003Ccode\u003Efm\u003C/code\u003E using a function \u003Ccode\u003Epfn\u003C/code\u003E to print atoms.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas.html#sprint_qformula","title":"Formulas.sprint_qformula","content":"Formulas.sprint_qformula \nsprint_qformula \n\n Returns a string representation of a formula \u003Ccode\u003Efm\u003C/code\u003E using a function \n \u003Ccode\u003Epfn\u003C/code\u003E to print atoms.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas.html#mk_and","title":"Formulas.mk_and","content":"Formulas.mk_and \nmk_and \n\n Constructs a conjunction.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas.html#mk_or","title":"Formulas.mk_or","content":"Formulas.mk_or \nmk_or \n\n Constructs a disjunction.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas.html#mk_imp","title":"Formulas.mk_imp","content":"Formulas.mk_imp \nmk_imp \n\n Constructs an implication.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas.html#mk_iff","title":"Formulas.mk_iff","content":"Formulas.mk_iff \nmk_iff \n\n Constructs a logical equivalence.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas.html#mk_forall","title":"Formulas.mk_forall","content":"Formulas.mk_forall \nmk_forall \n\n Constructs a universal quantification.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas.html#mk_exists","title":"Formulas.mk_exists","content":"Formulas.mk_exists \nmk_exists \n\n Constructs an existential quantification.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas.html#dest_iff","title":"Formulas.dest_iff","content":"Formulas.dest_iff \ndest_iff \n\n Formula destructor for logical equivalences.\n  \n\n It breaks apart a logical equivalence \\(p \\Leftrightarrow q\\) into \n the pair of its members \\((p, q)\\).\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas.html#dest_and","title":"Formulas.dest_and","content":"Formulas.dest_and \ndest_and \n\n Formula destructor for conjunctions.\n  \n\n It breaks apart a conjunction \\(p \\land q\\) into \n the pair of its conjuncts \\((p, q)\\).\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas.html#conjuncts","title":"Formulas.conjuncts","content":"Formulas.conjuncts \nconjuncts \n\n Formula destructor for repeated conjunctions.\n  \n\n Recursively breaks apart repeated conjunctions \n \\(p \\land q \\land r \\cdots \\) into the list of all the conjuncts \n \\([p, q, r, \\ldots]\\).\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas.html#dest_or","title":"Formulas.dest_or","content":"Formulas.dest_or \ndest_or \n\n Formula destructor for disjunctions.\n  \n\n It breaks apart a disjunction \\(p \\lor q\\) into \n the pair of its conjuncts \\((p, q)\\).\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas.html#disjuncts","title":"Formulas.disjuncts","content":"Formulas.disjuncts \ndisjuncts \n\n Formula destructor for repeated disjunctions.\n  \n\n Recursively breaks apart repeated disjunctions \n \\(p \\lor q \\lor r \\cdots \\) into the list of all the disjuncts \n \\([p, q, r, \\ldots]\\).\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas.html#dest_imp","title":"Formulas.dest_imp","content":"Formulas.dest_imp \ndest_imp \n\n Formula destructor for implications.\n  \n\n It breaks apart an implications \\(p \\Rightarrow q\\) into \n the pair of its antecedent and consequent \\((p, q)\\). \n \n See also: \u003Ca href=\u0022/Calcolemus/reference/calcolemus-formulas.html\u0022\u003EFormulas.antecedent\u003C/a\u003E, \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-formulas.html\u0022\u003EFormulas.consequent\u003C/a\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas.html#antecedent","title":"Formulas.antecedent","content":"Formulas.antecedent \nantecedent \n\n Returns the antecedent of an implication.\n  \n\n See also: \u003Ca href=\u0022/Calcolemus/reference/calcolemus-formulas.html\u0022\u003EFormulas.dest_imp\u003C/a\u003E, \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-formulas.html\u0022\u003EFormulas.consequent\u003C/a\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas.html#consequent","title":"Formulas.consequent","content":"Formulas.consequent \nconsequent \n\n Returns the consequent of an implication.\n  \n\n See also: \u003Ca href=\u0022/Calcolemus/reference/calcolemus-formulas.html\u0022\u003EFormulas.dest_imp\u003C/a\u003E, \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-formulas.html\u0022\u003EFormulas.antecedent\u003C/a\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas.html#onatoms","title":"Formulas.onatoms","content":"Formulas.onatoms \nonatoms \n\n Applies a function \u003Ccode\u003Ef\u003C/code\u003E to all the attributes of the atoms in a \n formula \u003Ccode\u003Efm\u003C/code\u003E, but otherwise leaves the structure unchanged. It can \n be used, for example, to perform systematic replacement of one \n particular atomic proposition by another formula.\n  \n\n It is for \u003Ca href=\u0022/Calcolemus/reference/calcolemus-formulas-formula-1.html\u0022\u003Eformula\u003C/a\u003E what \n \u003Ca href=\u0022https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-listmodule#map\u0022\u003EListModule.map\u003C/a\u003E is \n for \u003Ca href=\u0022https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-list-1\u0022\u003Elist\u003C/a\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas.html#overatoms","title":"Formulas.overatoms","content":"Formulas.overatoms \noveratoms \nApplies a function to each attributes of formula\u0027s atoms, \n threading an accumulator argument through the computation. Take the \n third argument, and apply the function to it and the attribute of the \n first atom of the formula. Then feed this result into the function \n along with the second atom and so on. Return the final result. If the \n input function is \u003Ccode\u003Ef\u003C/code\u003E and the atoms are \u003Ccode\u003EAtom i0...Atom iN\u003C/code\u003E \n then computes \u003Ccode\u003Ef (... (f s i0) i1 ...) iN\u003C/code\u003E.\n  \n\n It is for \u003Ca href=\u0022/Calcolemus/reference/calcolemus-formulas-formula-1.html\u0022\u003Eformula\u003C/a\u003E what \n \u003Ca href=\u0022https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-listmodule#fold\u0022\u003EListModule.fold\u003C/a\u003E is \n for \u003Ca href=\u0022https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-list-1\u0022\u003Elist\u003C/a\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas.html#atom_union","title":"Formulas.atom_union","content":"Formulas.atom_union \natom_union \n\n For each attributes of the formula\u0027s atoms, applies the given function. \n Concatenates all the results and converts them to a set to remove \n duplicates.\n  \n\n Except for the final removing of duplicates, it is for \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-formulas-formula-1.html\u0022\u003Eformula\u003C/a\u003E what \n \u003Ca href=\u0022https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-listmodule#collect\u0022\u003EListModule.collect\u003C/a\u003E is \n for \u003Ca href=\u0022https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-list-1\u0022\u003Elist\u003C/a\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas-formula-1.html","title":"formula\u003C\u0027a\u003E","content":"formula\u003C\u0027a\u003E \n\n Abstract syntax tree of polymorphic type of formulas.\n  \nformula\u003C\u0027a\u003E.False \nFalse \nformula\u003C\u0027a\u003E.True \nTrue \nformula\u003C\u0027a\u003E.Atom \nAtom \nformula\u003C\u0027a\u003E.Not \nNot \nformula\u003C\u0027a\u003E.And \nAnd \nformula\u003C\u0027a\u003E.Or \nOr \nformula\u003C\u0027a\u003E.Imp \nImp \nformula\u003C\u0027a\u003E.Iff \nIff \nformula\u003C\u0027a\u003E.Forall \nForall \nformula\u003C\u0027a\u003E.Exists \nExists"},{"uri":"/Calcolemus/reference/calcolemus-formulas-formula-1.html#False","title":"formula\u003C\u0027a\u003E.False","content":"formula\u003C\u0027a\u003E.False \nFalse \n\n Constant formula \u003Ccode\u003EFalse\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas-formula-1.html#True","title":"formula\u003C\u0027a\u003E.True","content":"formula\u003C\u0027a\u003E.True \nTrue \n\n Constant formula \u003Ccode\u003ETrue\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas-formula-1.html#Atom","title":"formula\u003C\u0027a\u003E.Atom","content":"formula\u003C\u0027a\u003E.Atom \nAtom \n\n Atomic formula.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas-formula-1.html#Not","title":"formula\u003C\u0027a\u003E.Not","content":"formula\u003C\u0027a\u003E.Not \nNot \n\n Negation.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas-formula-1.html#And","title":"formula\u003C\u0027a\u003E.And","content":"formula\u003C\u0027a\u003E.And \nAnd \n\n Conjunction.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas-formula-1.html#Or","title":"formula\u003C\u0027a\u003E.Or","content":"formula\u003C\u0027a\u003E.Or \nOr \n\n Disjunction.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas-formula-1.html#Imp","title":"formula\u003C\u0027a\u003E.Imp","content":"formula\u003C\u0027a\u003E.Imp \nImp \n\n Implication.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas-formula-1.html#Iff","title":"formula\u003C\u0027a\u003E.Iff","content":"formula\u003C\u0027a\u003E.Iff \nIff \n\n Logical Equivalence.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas-formula-1.html#Forall","title":"formula\u003C\u0027a\u003E.Forall","content":"formula\u003C\u0027a\u003E.Forall \nForall \n\n Universally quantified formula.\n "},{"uri":"/Calcolemus/reference/calcolemus-formulas-formula-1.html#Exists","title":"formula\u003C\u0027a\u003E.Exists","content":"formula\u003C\u0027a\u003E.Exists \nExists \n\n Existentially quantified formula.\n "},{"uri":"/Calcolemus/reference/calcolemus-geom.html","title":"Geom","content":"Geom \n\n Geometry theorem proving.\n  \nGeom.coordinations \ncoordinations \nGeom.coordinate \ncoordinate \nGeom.invariant \ninvariant \nGeom.invariant_under_translation \ninvariant_under_translation \nGeom.invariant_under_rotation \ninvariant_under_rotation \nGeom.originate \noriginate \nGeom.invariant_under_scaling \ninvariant_under_scaling \nGeom.invariant_under_shearing \ninvariant_under_shearing \nGeom.pprove \npprove \nGeom.triangulate \ntriangulate \nGeom.wu \nwu"},{"uri":"/Calcolemus/reference/calcolemus-geom.html#coordinations","title":"Geom.coordinations","content":"Geom.coordinations \ncoordinations \n"},{"uri":"/Calcolemus/reference/calcolemus-geom.html#coordinate","title":"Geom.coordinate","content":"Geom.coordinate \ncoordinate \n"},{"uri":"/Calcolemus/reference/calcolemus-geom.html#invariant","title":"Geom.invariant","content":"Geom.invariant \ninvariant \n"},{"uri":"/Calcolemus/reference/calcolemus-geom.html#invariant_under_translation","title":"Geom.invariant_under_translation","content":"Geom.invariant_under_translation \ninvariant_under_translation \n"},{"uri":"/Calcolemus/reference/calcolemus-geom.html#invariant_under_rotation","title":"Geom.invariant_under_rotation","content":"Geom.invariant_under_rotation \ninvariant_under_rotation \n"},{"uri":"/Calcolemus/reference/calcolemus-geom.html#originate","title":"Geom.originate","content":"Geom.originate \noriginate \n"},{"uri":"/Calcolemus/reference/calcolemus-geom.html#invariant_under_scaling","title":"Geom.invariant_under_scaling","content":"Geom.invariant_under_scaling \ninvariant_under_scaling \n"},{"uri":"/Calcolemus/reference/calcolemus-geom.html#invariant_under_shearing","title":"Geom.invariant_under_shearing","content":"Geom.invariant_under_shearing \ninvariant_under_shearing \n"},{"uri":"/Calcolemus/reference/calcolemus-geom.html#pprove","title":"Geom.pprove","content":"Geom.pprove \npprove \n"},{"uri":"/Calcolemus/reference/calcolemus-geom.html#triangulate","title":"Geom.triangulate","content":"Geom.triangulate \ntriangulate \n"},{"uri":"/Calcolemus/reference/calcolemus-geom.html#wu","title":"Geom.wu","content":"Geom.wu \nwu \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html","title":"Grobner","content":"Grobner \n\n Grobner bases.\n  \nGrobner.mmul \nmmul \nGrobner.mdiv \nmdiv \nGrobner.mlcm \nmlcm \nGrobner.morder_lt \nmorder_lt \nGrobner.mpoly_mmul \nmpoly_mmul \nGrobner.mpoly_neg \nmpoly_neg \nGrobner.mpoly_const \nmpoly_const \nGrobner.mpoly_var \nmpoly_var \nGrobner.mpoly_add \nmpoly_add \nGrobner.mpoly_sub \nmpoly_sub \nGrobner.mpoly_mul \nmpoly_mul \nGrobner.mpoly_pow \nmpoly_pow \nGrobner.mpoly_inv \nmpoly_inv \nGrobner.mpoly_div \nmpoly_div \nGrobner.mpolynate \nmpolynate \nGrobner.mpolyatom \nmpolyatom \nGrobner.reduce1 \nreduce1 \nGrobner.reduceb \nreduceb \nGrobner.reduce \nreduce \nGrobner.spoly \nspoly \nGrobner.grobner \ngrobner \nGrobner.groebner \ngroebner \nGrobner.rabinowitsch \nrabinowitsch \nGrobner.grobner_trivial \ngrobner_trivial \nGrobner.grobner_decide \ngrobner_decide \nGrobner.term_of_varpow \nterm_of_varpow \nGrobner.term_of_varpows \nterm_of_varpows \nGrobner.term_of_monomial \nterm_of_monomial \nGrobner.term_of_poly \nterm_of_poly \nGrobner.grobner_basis \ngrobner_basis"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#mmul","title":"Grobner.mmul","content":"Grobner.mmul \nmmul \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#mdiv","title":"Grobner.mdiv","content":"Grobner.mdiv \nmdiv \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#mlcm","title":"Grobner.mlcm","content":"Grobner.mlcm \nmlcm \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#morder_lt","title":"Grobner.morder_lt","content":"Grobner.morder_lt \nmorder_lt \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#mpoly_mmul","title":"Grobner.mpoly_mmul","content":"Grobner.mpoly_mmul \nmpoly_mmul \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#mpoly_neg","title":"Grobner.mpoly_neg","content":"Grobner.mpoly_neg \nmpoly_neg \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#mpoly_const","title":"Grobner.mpoly_const","content":"Grobner.mpoly_const \nmpoly_const \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#mpoly_var","title":"Grobner.mpoly_var","content":"Grobner.mpoly_var \nmpoly_var \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#mpoly_add","title":"Grobner.mpoly_add","content":"Grobner.mpoly_add \nmpoly_add \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#mpoly_sub","title":"Grobner.mpoly_sub","content":"Grobner.mpoly_sub \nmpoly_sub \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#mpoly_mul","title":"Grobner.mpoly_mul","content":"Grobner.mpoly_mul \nmpoly_mul \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#mpoly_pow","title":"Grobner.mpoly_pow","content":"Grobner.mpoly_pow \nmpoly_pow \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#mpoly_inv","title":"Grobner.mpoly_inv","content":"Grobner.mpoly_inv \nmpoly_inv \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#mpoly_div","title":"Grobner.mpoly_div","content":"Grobner.mpoly_div \nmpoly_div \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#mpolynate","title":"Grobner.mpolynate","content":"Grobner.mpolynate \nmpolynate \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#mpolyatom","title":"Grobner.mpolyatom","content":"Grobner.mpolyatom \nmpolyatom \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#reduce1","title":"Grobner.reduce1","content":"Grobner.reduce1 \nreduce1 \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#reduceb","title":"Grobner.reduceb","content":"Grobner.reduceb \nreduceb \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#reduce","title":"Grobner.reduce","content":"Grobner.reduce \nreduce \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#spoly","title":"Grobner.spoly","content":"Grobner.spoly \nspoly \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#grobner","title":"Grobner.grobner","content":"Grobner.grobner \ngrobner \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#groebner","title":"Grobner.groebner","content":"Grobner.groebner \ngroebner \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#rabinowitsch","title":"Grobner.rabinowitsch","content":"Grobner.rabinowitsch \nrabinowitsch \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#grobner_trivial","title":"Grobner.grobner_trivial","content":"Grobner.grobner_trivial \ngrobner_trivial \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#grobner_decide","title":"Grobner.grobner_decide","content":"Grobner.grobner_decide \ngrobner_decide \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#term_of_varpow","title":"Grobner.term_of_varpow","content":"Grobner.term_of_varpow \nterm_of_varpow \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#term_of_varpows","title":"Grobner.term_of_varpows","content":"Grobner.term_of_varpows \nterm_of_varpows \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#term_of_monomial","title":"Grobner.term_of_monomial","content":"Grobner.term_of_monomial \nterm_of_monomial \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#term_of_poly","title":"Grobner.term_of_poly","content":"Grobner.term_of_poly \nterm_of_poly \n"},{"uri":"/Calcolemus/reference/calcolemus-grobner.html#grobner_basis","title":"Grobner.grobner_basis","content":"Grobner.grobner_basis \ngrobner_basis \n"},{"uri":"/Calcolemus/reference/calcolemus-herbrand.html","title":"Herbrand","content":"Herbrand \n\n Relation between FOL and propositional logic; Herbrand theorem.\n  \nHerbrand.pholds \npholds \nHerbrand.herbfuns \nherbfuns \nHerbrand.groundterms \ngroundterms \nHerbrand.groundtuples \ngroundtuples \nHerbrand.herbloop \nherbloop \nHerbrand.gilmore_loop \ngilmore_loop \nHerbrand.gilmore \ngilmore \nHerbrand.dp_mfn \ndp_mfn \nHerbrand.dp_loop \ndp_loop \nHerbrand.davisputnam \ndavisputnam \nHerbrand.dp_refine \ndp_refine \nHerbrand.dp_refine_loop \ndp_refine_loop \nHerbrand.davisputnam002 \ndavisputnam002"},{"uri":"/Calcolemus/reference/calcolemus-herbrand.html#pholds","title":"Herbrand.pholds","content":"Herbrand.pholds \npholds \n\n A variant of the notion of propositional evaluation \u0060eval\u0060 where the \n input propositional valuation \u0060d\u0060 maps atomic formulas themselves to \n truth values.\n \n It determines if the input formula \u0060fm\u0060 holds in the sense of propositional \n logic for this notion of valuation.\n \n \u0060pholds (function Atom (R (\u0022P\u0022, [Var \u0022x\u0022])) -\u003E true) (parse \u0022P(x)\u0022)\u0060\n returns \u0060true\u0060\n"},{"uri":"/Calcolemus/reference/calcolemus-herbrand.html#herbfuns","title":"Herbrand.herbfuns","content":"Herbrand.herbfuns \nherbfuns \n\n Gets the constants for Herbrand base, adding nullary one if necessary. \n"},{"uri":"/Calcolemus/reference/calcolemus-herbrand.html#groundterms","title":"Herbrand.groundterms","content":"Herbrand.groundterms \ngroundterms \n\n Enumerates all ground terms involving \u0060n\u0060 functions.\n \n If \u0060n\u0060 = 0, it returns the constant terms, otherwise tries all possible \n functions.\n \n \u0060groundterms [0;1] [(f,1);(g,2)] 0\u0060 returns \u0060[0,1]\u0060.\n \n \u0060groundterms [0;1] [(f,1);(g,2)] 1\u0060 returns \u0060[f(0);f(1);g(0,0);g(0,1);g...]\u0060\n \n \u0060groundterms [0;1] [(f,1);(g,1)] 2\u0060 returns \u0060[f(f(0));...;f(g(0,0));...]\u0060\n"},{"uri":"/Calcolemus/reference/calcolemus-herbrand.html#groundtuples","title":"Herbrand.groundtuples","content":"Herbrand.groundtuples \ngroundtuples \n\n generates all \u0060m\u0060-tuples of ground terms involving (in total) \u0060n\u0060 functions.\n \n \u0060groundtuples [0] [(f,1)] 1 1\u0060 returns \u0060[[f(0)]]\u0060\n \n \u0060groundtuples [0] [(f,1)] 1 2\u0060 returns \u0060[[0;f(0)]; [f(0);0]]\u0060\n"},{"uri":"/Calcolemus/reference/calcolemus-herbrand.html#herbloop","title":"Herbrand.herbloop","content":"Herbrand.herbloop \nherbloop \n\n A generic function to be used with different \u0027herbrand procedures\u0027.\n \n It tests larger and larger conjunctions of ground instances for \n unsatisfiability, iterating modifier \u0060mfn\u0060 over ground terms \n till \u0060tfn\u0060 fails. \n "},{"uri":"/Calcolemus/reference/calcolemus-herbrand.html#gilmore_loop","title":"Herbrand.gilmore_loop","content":"Herbrand.gilmore_loop \ngilmore_loop \n\n In the specific case of the gilmore procedure, the generic herbrand loop \n \u0060herbloop\u0060 is called with the initial formula \u0060fl0\u0060 and the ground \n instances so far \u0060fl\u0060 are maintained in a DNF list representation and the \n modification function applies the instantiation to the starting formula \n and combines the DNFs by distribution.\n"},{"uri":"/Calcolemus/reference/calcolemus-herbrand.html#gilmore","title":"Herbrand.gilmore","content":"Herbrand.gilmore \ngilmore \n\n Tests an input fol formula \u0060fm\u0060 for validity based on a gilmore-like \n procedure.\n \n The initial formula is generalized, negated and Skolemized, then the \n specific herbrand loop for the gilmore procedure is called to test for \n the unsatisfiability of the transformed formula.\n \n If the test terminates, it reports how many ground instances where tried.\n"},{"uri":"/Calcolemus/reference/calcolemus-herbrand.html#dp_mfn","title":"Herbrand.dp_mfn","content":"Herbrand.dp_mfn \ndp_mfn \n\n The modification function (specific to the Davis-Putnam procedure), that \n augments the ground instances with a new one.\n "},{"uri":"/Calcolemus/reference/calcolemus-herbrand.html#dp_loop","title":"Herbrand.dp_loop","content":"Herbrand.dp_loop \ndp_loop \n\n In the specific case of the davis-putnam procedure, the generic \n herbrand loop \u0060herbloop\u0060 is called with the initial formula \u0060fl0\u0060 \n and the ground instances so far \u0060fl\u0060 are maintained in a CNF list \n representation and each time we incorporate a new instance, we check for \n unsatisfiability using \u0060dpll\u0060.\n"},{"uri":"/Calcolemus/reference/calcolemus-herbrand.html#davisputnam","title":"Herbrand.davisputnam","content":"Herbrand.davisputnam \ndavisputnam \n\n Tests an input fol formula \u0060fm\u0060 for validity based on the Davis-Putnam \n procedure.\n \n The initial formula is generalized, negated and Skolemized, then the \n specific herbrand loop for the davis-putnam procedure is called to test for \n the unsatisfiability of the transformed formula.\n \n If the test terminates, it reports how many ground instances where tried.\n"},{"uri":"/Calcolemus/reference/calcolemus-herbrand.html#dp_refine","title":"Herbrand.dp_refine","content":"Herbrand.dp_refine \ndp_refine \n\n Auxiliary function to redefine the Davis-Putnam procedure to run through \n the list of possibly-needed instances \u0060dunno\u0060, putting them onto the list \n of needed ones \u0060need\u0060 only if the other instances are satisfiable.\n"},{"uri":"/Calcolemus/reference/calcolemus-herbrand.html#dp_refine_loop","title":"Herbrand.dp_refine_loop","content":"Herbrand.dp_refine_loop \ndp_refine_loop \n"},{"uri":"/Calcolemus/reference/calcolemus-herbrand.html#davisputnam002","title":"Herbrand.davisputnam002","content":"Herbrand.davisputnam002 \ndavisputnam002 \n\n Tests an input fol formula \u0060fm\u0060 for validity based on the Davis-Putnam \n procedure redefined to run through the list of possibly-needed \n instances, putting them onto the list of needed ones only if \n the other instances are satisfiable.\n"},{"uri":"/Calcolemus/reference/calcolemus-interpolation.html","title":"Interpolation","content":"Interpolation \n\n Constructive Craig/Robinson interpolation.\n  \nInterpolation.pinterpolate \npinterpolate \nInterpolation.urinterpolate \nurinterpolate \nInterpolation.toptermt \ntoptermt \nInterpolation.topterms \ntopterms \nInterpolation.uinterpolate \nuinterpolate \nInterpolation.cinterpolate \ncinterpolate \nInterpolation.interpolate \ninterpolate \nInterpolation.einterpolate \neinterpolate"},{"uri":"/Calcolemus/reference/calcolemus-interpolation.html#pinterpolate","title":"Interpolation.pinterpolate","content":"Interpolation.pinterpolate \npinterpolate \n"},{"uri":"/Calcolemus/reference/calcolemus-interpolation.html#urinterpolate","title":"Interpolation.urinterpolate","content":"Interpolation.urinterpolate \nurinterpolate \n"},{"uri":"/Calcolemus/reference/calcolemus-interpolation.html#toptermt","title":"Interpolation.toptermt","content":"Interpolation.toptermt \ntoptermt \n"},{"uri":"/Calcolemus/reference/calcolemus-interpolation.html#topterms","title":"Interpolation.topterms","content":"Interpolation.topterms \ntopterms \n"},{"uri":"/Calcolemus/reference/calcolemus-interpolation.html#uinterpolate","title":"Interpolation.uinterpolate","content":"Interpolation.uinterpolate \nuinterpolate \n"},{"uri":"/Calcolemus/reference/calcolemus-interpolation.html#cinterpolate","title":"Interpolation.cinterpolate","content":"Interpolation.cinterpolate \ncinterpolate \n"},{"uri":"/Calcolemus/reference/calcolemus-interpolation.html#interpolate","title":"Interpolation.interpolate","content":"Interpolation.interpolate \ninterpolate \n"},{"uri":"/Calcolemus/reference/calcolemus-interpolation.html#einterpolate","title":"Interpolation.einterpolate","content":"Interpolation.einterpolate \neinterpolate \n"},{"uri":"/Calcolemus/reference/calcolemus-intro.html","title":"Intro","content":"Intro \nA simple algebraic expressions example to demonstrate the basic \n concepts of abstract syntax tree, symbolic computation, parsing and \n prettyprinting.\n  \nIntro.expression \nexpression \nIntro.simplify1 \nsimplify1 \nIntro.simplify \nsimplify \nIntro.parse_atom \nparse_atom \nIntro.parse_product \nparse_product \nIntro.parse_expression \nparse_expression \nIntro.parse_exp \nparse_exp \nIntro.string_of_exp_naive \nstring_of_exp_naive \nIntro.string_of_exp \nstring_of_exp \nIntro.print_exp \nprint_exp \nIntro.sprint_exp \nsprint_exp"},{"uri":"/Calcolemus/reference/calcolemus-intro.html#simplify1","title":"Intro.simplify1","content":"Intro.simplify1 \nsimplify1 \n\n Simplifies an algebraic expression at the first level.\n  \n\n This is an example of symbolic computation.\n \n It applies the following transformation rules\n \u003Cul\u003E\n  \u003Cli\u003E\n    \u003Cc\u003EConst 0 * Var x\u003C/c\u003E, \u003Cc\u003EVar x * Const 0\u003C/c\u003E \\(\\longrightarrow\\)\n \u003Cc\u003EConst 0\u003C/c\u003E\u003C/li\u003E\n  \u003Cli\u003E\n    \u003Cc\u003EConst 0 \u002B Var x\u003C/c\u003E, \u003Cc\u003EVar x \u002B Const 0\u003C/c\u003E, \u003Cc\u003EConst 1 * Var x\u003C/c\u003E, \n \u003Cc\u003EVar x * Const 1\u003C/c\u003E \\(\\longrightarrow\\) \u003Cc\u003E Var x\u003C/c\u003E\u003C/li\u003E\n  \u003Cli\u003E\n    \u003Cc\u003EConst m \u002B Const n\u003C/c\u003E \\(\\longrightarrow\\) \u003Cc\u003EConst (m\u002Bn)\u003C/c\u003E\u003C/li\u003E\n  \u003Cli\u003E\n    \u003Cc\u003EConst m * Const n\u003C/c\u003E \\(\\longrightarrow\\) \u003Cc\u003EConst (m*n)\u003C/c\u003E\u003C/li\u003E\n\u003C/ul\u003E\n \n This function applies the rules only if they are applicable directly at \n the first level of the expression\u0027s structure. It is an auxiliary \n function used to define the complete function \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-intro.html#simplify\u0022\u003EIntro.simplify\u003C/a\u003E that applies the rules at \n every level of the expression.\n "},{"uri":"/Calcolemus/reference/calcolemus-intro.html#simplify","title":"Intro.simplify","content":"Intro.simplify \nsimplify \n\n Simplifies an algebraic expression completely.\n  \n\n Completes the work of \u003Ca href=\u0022/Calcolemus/reference/calcolemus-intro.html#simplify1\u0022\u003EIntro.simplify1\u003C/a\u003E.\n \n Recursively simplifies any immediate sub-expressions as much as \n possible, then applies \u003Ca href=\u0022/Calcolemus/reference/calcolemus-intro.html#simplify1\u0022\u003EIntro.simplify1\u003C/a\u003E \n to the result.\n "},{"uri":"/Calcolemus/reference/calcolemus-intro.html#parse_atom","title":"Intro.parse_atom","content":"Intro.parse_atom \nparse_atom \n\n Parses an atomic expression.\n  \n\n Implements the atoms part of the expression\u0027s recursive \n descent parsing:\n \n \\begin{eqnarray*} \n  atoms \u0026 \\longrightarrow \u0026 (expression) \\\\\n        \u0026 |               \u0026 constant \\\\\n        \u0026 |               \u0026 variable \n \\end{eqnarray*}\n \n An atomic expression is either a constant, a variable or an arbitrary \n expression enclosed in brackets.\n \n See also: \u003Ca href=\u0022/Calcolemus/reference/calcolemus-intro.html#parse_expression\u0022\u003EIntro.parse_expression\u003C/a\u003E; \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-intro.html#parse_product\u0022\u003EIntro.parse_product\u003C/a\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-intro.html#parse_product","title":"Intro.parse_product","content":"Intro.parse_product \nparse_product \n\n Parses a product expression.\n  \n\n Implements the products part of the expression\u0027s recursive \n descent parsing:\n \n \\begin{eqnarray*} \n  product \u0026 \\longrightarrow \u0026 atom \\\\\n          \u0026 |               \u0026 atom * product \\\\\n \\end{eqnarray*}\n \n A product expression is a sequence of \u0027atomic expressions\u0027 (see \u003Ca href=\u0022/Calcolemus/reference/calcolemus-intro.html#parse_atom\u0022\u003EIntro.parse_atom\u003C/a\u003E) separated by \u003Ccode\u003E*\u003C/code\u003E.\n \n See also: \u003Ca href=\u0022/Calcolemus/reference/calcolemus-intro.html#parse_expression\u0022\u003EIntro.parse_expression\u003C/a\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-intro.html#parse_expression","title":"Intro.parse_expression","content":"Intro.parse_expression \nparse_expression \n\n Parses an expression.\n  \n\n Implements the addition part of the expression\u0027s recursive \n descent parsing:\n \n \\begin{eqnarray*} \n  expression \u0026 \\longrightarrow \u0026 product \\\\\n             \u0026 |               \u0026 product \u002B expression \\\\\n \\end{eqnarray*}\n \n An expression is a sequence of \u0027product expressions\u0027 (see \u003Ca href=\u0022/Calcolemus/reference/calcolemus-intro.html#parse_product\u0022\u003EIntro.parse_product\u003C/a\u003E) separated by \u003Ccode\u003E\u002B\u003C/code\u003E.\n \n See also: \u003Ca href=\u0022/Calcolemus/reference/calcolemus-intro.html#parse_atom\u0022\u003EIntro.parse_atom\u003C/a\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-intro.html#parse_exp","title":"Intro.parse_exp","content":"Intro.parse_exp \nparse_exp \n\n Parses a string into an expression.\n  \n\n See also: \u003Ca href=\u0022/Calcolemus/reference/calcolemus-intro.html#parse_atom\u0022\u003EIntro.parse_atom\u003C/a\u003E; \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-intro.html#parse_product\u0022\u003EIntro.parse_product\u003C/a\u003E; \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-intro.html#parse_expression\u0022\u003EIntro.parse_expression\u003C/a\u003E"},{"uri":"/Calcolemus/reference/calcolemus-intro.html#string_of_exp_naive","title":"Intro.string_of_exp_naive","content":"Intro.string_of_exp_naive \nstring_of_exp_naive \n\n Returns a naive concrete syntax representation of an expression.\n  \n\n Reverses transformation, from abstract to concrete syntax keeping \n brackets. \n \n This is a naive version that puts brackets uniformly round each \n instance of a binary operator, which is perfectly correct but sometimes \n looks cumbersome to a human.\n \n Seealso: \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-intro.html#sprint_exp\u0022\u003EIntro.sprint_exp\u003C/a\u003E; \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-intro.html#print_exp\u0022\u003EIntro.print_exp\u003C/a\u003E;\n for clever versions.\n "},{"uri":"/Calcolemus/reference/calcolemus-intro.html#string_of_exp","title":"Intro.string_of_exp","content":"Intro.string_of_exp \nstring_of_exp \n\n Returns a concrete syntax representation of an expression considering \n the precedence level of the operator of which the expression is an \n immediate sub-expression.\n  \n\n It is an auxiliary function used to define \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-intro.html#sprint_exp\u0022\u003EIntro.sprint_exp\u003C/a\u003E and \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-intro.html#print_exp\u0022\u003EIntro.print_exp\u003C/a\u003E.\n and to calculate whether or not additional brackets can be omitted.\n \n \u003Cp\u003E\n The allocated precedences are as follows:\n \u003C/p\u003E\u003Cul\u003E\n  \u003Cli\u003E2 to addition;\u003C/li\u003E\n  \u003Cli\u003E4 to multiplication;\u003C/li\u003E\n  \u003Cli\u003E0 at the outermost level.\u003C/li\u003E\n\u003C/ul\u003E"},{"uri":"/Calcolemus/reference/calcolemus-intro.html#print_exp","title":"Intro.print_exp","content":"Intro.print_exp \nprint_exp \n\n Prints to the \u003Ccode\u003Estdout\u003C/code\u003E the concrete syntax representation of an \n expression.\n  \n\n Calculates the concrete syntax of an expression \u003Ccode\u003Ee\u003C/code\u003E \n removing unnecessary brackets and writes it to the \u003Ccode\u003Estdout\u003C/code\u003E. \n \n It omits the outermost brackets, and those that are implicit in rules \n for precedence or associativity.\n \n Seealso: \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-intro.html#string_of_exp\u0022\u003EIntro.string_of_exp\u003C/a\u003E;\n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-intro.html#sprint_exp\u0022\u003EIntro.sprint_exp\u003C/a\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-intro.html#sprint_exp","title":"Intro.sprint_exp","content":"Intro.sprint_exp \nsprint_exp \n\n Returns the concrete syntax representation of an expression.\n  \n\n Returns a string of the concrete syntax of an expression \u003Ccode\u003Ee\u003C/code\u003E \n removing unnecessary brackets. It omits the outermost brackets, and \n those that are implicit in rules for precedence or associativity.\n \n Seealso: \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-intro.html#string_of_exp\u0022\u003EIntro.string_of_exp\u003C/a\u003E;\n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-intro.html#print_exp\u0022\u003EIntro.print_exp\u003C/a\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-intro-expression.html","title":"expression","content":"expression \n\n Abstract syntax tree of algebraic expressions.\n  \nexpression.Var \nVar \nexpression.Const \nConst \nexpression.Add \nAdd \nexpression.Mul \nMul"},{"uri":"/Calcolemus/reference/calcolemus-intro-expression.html#Var","title":"expression.Var","content":"expression.Var \nVar \n\n Variable expression.\n "},{"uri":"/Calcolemus/reference/calcolemus-intro-expression.html#Const","title":"expression.Const","content":"expression.Const \nConst \n\n Constant expression.\n "},{"uri":"/Calcolemus/reference/calcolemus-intro-expression.html#Add","title":"expression.Add","content":"expression.Add \nAdd \n\n Addition expression.\n "},{"uri":"/Calcolemus/reference/calcolemus-intro-expression.html#Mul","title":"expression.Mul","content":"expression.Mul \nMul \n\n Product expression.\n "},{"uri":"/Calcolemus/reference/calcolemus-lcf.html","title":"Lcf","content":"Lcf \n\n LCF-style system for first order logic.\n  \n\n Basic first order deductive system.\n \u003Cp\u003E\u003C/p\u003E\n This is based on Tarski\u0027s trick for avoiding use of a substitution  \n primitive. It seems about the simplest possible system we could use.\n  \nLcf.ProofSystem \nProofSystem \nLcf.occurs_in \noccurs_in \nLcf.free_in \nfree_in \nLcf.fprint_thm \nfprint_thm \nLcf.print_thm \nprint_thm \nLcf.sprint_thm \nsprint_thm"},{"uri":"/Calcolemus/reference/calcolemus-lcf.html#occurs_in","title":"Lcf.occurs_in","content":"Lcf.occurs_in \noccurs_in \n\n checks whether a term s occurs as a sub-term of another term t\n"},{"uri":"/Calcolemus/reference/calcolemus-lcf.html#free_in","title":"Lcf.free_in","content":"Lcf.free_in \nfree_in \n\n checks whether a term t occurs free in a formula fm\n"},{"uri":"/Calcolemus/reference/calcolemus-lcf.html#fprint_thm","title":"Lcf.fprint_thm","content":"Lcf.fprint_thm \nfprint_thm \n\n Prints a theorem using a TextWriter.\n"},{"uri":"/Calcolemus/reference/calcolemus-lcf.html#print_thm","title":"Lcf.print_thm","content":"Lcf.print_thm \nprint_thm \n\n A printer for theorems\n"},{"uri":"/Calcolemus/reference/calcolemus-lcf.html#sprint_thm","title":"Lcf.sprint_thm","content":"Lcf.sprint_thm \nsprint_thm \n\n Theorem to string\n"},{"uri":"/Calcolemus/reference/calcolemus-lcf-proofsystem.html","title":"ProofSystem","content":"ProofSystem \n\n The Core LCF proof system\n \n The core proof system is the minimum set of inference rules and/or axioms \n sound and complete with respect to the defined semantics.\n \nProofSystem.thm \nthm \nProofSystem.modusponens \nmodusponens \nProofSystem.gen \ngen \nProofSystem.axiom_addimp \naxiom_addimp \nProofSystem.axiom_distribimp \naxiom_distribimp \nProofSystem.axiom_doubleneg \naxiom_doubleneg \nProofSystem.axiom_allimp \naxiom_allimp \nProofSystem.axiom_impall \naxiom_impall \nProofSystem.axiom_existseq \naxiom_existseq \nProofSystem.axiom_eqrefl \naxiom_eqrefl \nProofSystem.axiom_funcong \naxiom_funcong \nProofSystem.axiom_predcong \naxiom_predcong \nProofSystem.axiom_iffimp1 \naxiom_iffimp1 \nProofSystem.axiom_iffimp2 \naxiom_iffimp2 \nProofSystem.axiom_impiff \naxiom_impiff \nProofSystem.axiom_true \naxiom_true \nProofSystem.axiom_not \naxiom_not \nProofSystem.axiom_and \naxiom_and \nProofSystem.axiom_or \naxiom_or \nProofSystem.axiom_exists \naxiom_exists \nProofSystem.concl \nconcl"},{"uri":"/Calcolemus/reference/calcolemus-lcf-proofsystem.html#modusponens","title":"ProofSystem.modusponens","content":"ProofSystem.modusponens \nmodusponens \n\n modusponens (proper inference rule)\n \n |- p -\u003E q |- p ==\u003E |- q\n"},{"uri":"/Calcolemus/reference/calcolemus-lcf-proofsystem.html#gen","title":"ProofSystem.gen","content":"ProofSystem.gen \ngen \n\n generalization (proper inference rule)\n \n |- p ==\u003E !x. p\n"},{"uri":"/Calcolemus/reference/calcolemus-lcf-proofsystem.html#axiom_addimp","title":"ProofSystem.axiom_addimp","content":"ProofSystem.axiom_addimp \naxiom_addimp \n\n |- p -\u003E (q -\u003E p)\n"},{"uri":"/Calcolemus/reference/calcolemus-lcf-proofsystem.html#axiom_distribimp","title":"ProofSystem.axiom_distribimp","content":"ProofSystem.axiom_distribimp \naxiom_distribimp \n\n |- (p -\u003E q -\u003E r) -\u003E (p -\u003E q) -\u003E (p -\u003E r)\n"},{"uri":"/Calcolemus/reference/calcolemus-lcf-proofsystem.html#axiom_doubleneg","title":"ProofSystem.axiom_doubleneg","content":"ProofSystem.axiom_doubleneg \naxiom_doubleneg \n\n |- ((p -\u003E \u22A5) -\u003E \u22A5) -\u003E p\n"},{"uri":"/Calcolemus/reference/calcolemus-lcf-proofsystem.html#axiom_allimp","title":"ProofSystem.axiom_allimp","content":"ProofSystem.axiom_allimp \naxiom_allimp \n\n |- (!x. p -\u003E q) -\u003E (!x. p) -\u003E (!x. q)\n"},{"uri":"/Calcolemus/reference/calcolemus-lcf-proofsystem.html#axiom_impall","title":"ProofSystem.axiom_impall","content":"ProofSystem.axiom_impall \naxiom_impall \n\n |- p -\u003E !x. p [provided x not in FV(p)]\n"},{"uri":"/Calcolemus/reference/calcolemus-lcf-proofsystem.html#axiom_existseq","title":"ProofSystem.axiom_existseq","content":"ProofSystem.axiom_existseq \naxiom_existseq \n\n |- (?x. x = t) [provided x not in FVT(t)]\n"},{"uri":"/Calcolemus/reference/calcolemus-lcf-proofsystem.html#axiom_eqrefl","title":"ProofSystem.axiom_eqrefl","content":"ProofSystem.axiom_eqrefl \naxiom_eqrefl \n\n |- t = t\n"},{"uri":"/Calcolemus/reference/calcolemus-lcf-proofsystem.html#axiom_funcong","title":"ProofSystem.axiom_funcong","content":"ProofSystem.axiom_funcong \naxiom_funcong \n\n |- s1 = t1 -\u003E ... -\u003E sn = tn -\u003E f(s1, ..., sn) = f(t1, ..., tn)\n"},{"uri":"/Calcolemus/reference/calcolemus-lcf-proofsystem.html#axiom_predcong","title":"ProofSystem.axiom_predcong","content":"ProofSystem.axiom_predcong \naxiom_predcong \n\n |- s1 = t1 -\u003E ... -\u003E sn = tn -\u003E f(s1, ..., sn) = f(t1, ..., tn)\n"},{"uri":"/Calcolemus/reference/calcolemus-lcf-proofsystem.html#axiom_iffimp1","title":"ProofSystem.axiom_iffimp1","content":"ProofSystem.axiom_iffimp1 \naxiom_iffimp1 \n\n |- (p \u003C-\u003E q) -\u003E p -\u003E q\n"},{"uri":"/Calcolemus/reference/calcolemus-lcf-proofsystem.html#axiom_iffimp2","title":"ProofSystem.axiom_iffimp2","content":"ProofSystem.axiom_iffimp2 \naxiom_iffimp2 \n\n |- (p \u003C-\u003E q) -\u003E q -\u003E p\n"},{"uri":"/Calcolemus/reference/calcolemus-lcf-proofsystem.html#axiom_impiff","title":"ProofSystem.axiom_impiff","content":"ProofSystem.axiom_impiff \naxiom_impiff \n\n |- (p -\u003E q) -\u003E (q -\u003E p) -\u003E (p \u003C-\u003E q)\n"},{"uri":"/Calcolemus/reference/calcolemus-lcf-proofsystem.html#axiom_true","title":"ProofSystem.axiom_true","content":"ProofSystem.axiom_true \naxiom_true \n\n |- \u22A4 \u003C-\u003E (\u22A5 -\u003E \u22A5)\n"},{"uri":"/Calcolemus/reference/calcolemus-lcf-proofsystem.html#axiom_not","title":"ProofSystem.axiom_not","content":"ProofSystem.axiom_not \naxiom_not \n\n |- ~p \u003C-\u003E (p -\u003E \u22A5)\n"},{"uri":"/Calcolemus/reference/calcolemus-lcf-proofsystem.html#axiom_and","title":"ProofSystem.axiom_and","content":"ProofSystem.axiom_and \naxiom_and \n\n |- p /\\ q \u003C-\u003E (p -\u003E q -\u003E \u22A5) -\u003E \u22A5\n"},{"uri":"/Calcolemus/reference/calcolemus-lcf-proofsystem.html#axiom_or","title":"ProofSystem.axiom_or","content":"ProofSystem.axiom_or \naxiom_or \n\n |- p \\/ q \u003C-\u003E ~(~p /\\ ~q)\n"},{"uri":"/Calcolemus/reference/calcolemus-lcf-proofsystem.html#axiom_exists","title":"ProofSystem.axiom_exists","content":"ProofSystem.axiom_exists \naxiom_exists \n\n (?x. p) \u003C-\u003E ~(!x. ~p)\n"},{"uri":"/Calcolemus/reference/calcolemus-lcf-proofsystem.html#concl","title":"ProofSystem.concl","content":"ProofSystem.concl \nconcl \n\n maps a theorem back to the formula that it proves\n"},{"uri":"/Calcolemus/reference/calcolemus-lcf-proofsystem-thm.html","title":"thm","content":"thm \n"},{"uri":"/Calcolemus/reference/calcolemus-lcffol.html","title":"Lcffol","content":"Lcffol \n\n LCF implementation of first-order tableaux.\n  \nLcffol.unify_complementsf \nunify_complementsf \nLcffol.use_laterimp \nuse_laterimp \nLcffol.imp_false_rule\u0027 \nimp_false_rule\u0027 \nLcffol.imp_true_rule\u0027 \nimp_true_rule\u0027 \nLcffol.imp_front\u0027 \nimp_front\u0027 \nLcffol.add_assum\u0027 \nadd_assum\u0027 \nLcffol.eliminate_connective\u0027 \neliminate_connective\u0027 \nLcffol.spec\u0027 \nspec\u0027 \nLcffol.ex_falso\u0027 \nex_falso\u0027 \nLcffol.complits\u0027 \ncomplits\u0027 \nLcffol.deskol\u0027 \ndeskol\u0027 \nLcffol.lcftab \nlcftab \nLcffol.quantforms \nquantforms \nLcffol.skolemfuns \nskolemfuns \nLcffol.form_match \nform_match \nLcffol.lcfrefute \nlcfrefute \nLcffol.mk_skol \nmk_skol \nLcffol.simpcont \nsimpcont \nLcffol.elim_skolemvar \nelim_skolemvar \nLcffol.deskolcont \ndeskolcont \nLcffol.lcffol \nlcffol"},{"uri":"/Calcolemus/reference/calcolemus-lcffol.html#unify_complementsf","title":"Lcffol.unify_complementsf","content":"Lcffol.unify_complementsf \nunify_complementsf \n"},{"uri":"/Calcolemus/reference/calcolemus-lcffol.html#use_laterimp","title":"Lcffol.use_laterimp","content":"Lcffol.use_laterimp \nuse_laterimp \n"},{"uri":"/Calcolemus/reference/calcolemus-lcffol.html#imp_false_rule\u0027","title":"Lcffol.imp_false_rule\u0027","content":"Lcffol.imp_false_rule\u0027 \nimp_false_rule\u0027 \n"},{"uri":"/Calcolemus/reference/calcolemus-lcffol.html#imp_true_rule\u0027","title":"Lcffol.imp_true_rule\u0027","content":"Lcffol.imp_true_rule\u0027 \nimp_true_rule\u0027 \n"},{"uri":"/Calcolemus/reference/calcolemus-lcffol.html#imp_front\u0027","title":"Lcffol.imp_front\u0027","content":"Lcffol.imp_front\u0027 \nimp_front\u0027 \n"},{"uri":"/Calcolemus/reference/calcolemus-lcffol.html#add_assum\u0027","title":"Lcffol.add_assum\u0027","content":"Lcffol.add_assum\u0027 \nadd_assum\u0027 \n"},{"uri":"/Calcolemus/reference/calcolemus-lcffol.html#eliminate_connective\u0027","title":"Lcffol.eliminate_connective\u0027","content":"Lcffol.eliminate_connective\u0027 \neliminate_connective\u0027 \n"},{"uri":"/Calcolemus/reference/calcolemus-lcffol.html#spec\u0027","title":"Lcffol.spec\u0027","content":"Lcffol.spec\u0027 \nspec\u0027 \n"},{"uri":"/Calcolemus/reference/calcolemus-lcffol.html#ex_falso\u0027","title":"Lcffol.ex_falso\u0027","content":"Lcffol.ex_falso\u0027 \nex_falso\u0027 \n"},{"uri":"/Calcolemus/reference/calcolemus-lcffol.html#complits\u0027","title":"Lcffol.complits\u0027","content":"Lcffol.complits\u0027 \ncomplits\u0027 \n"},{"uri":"/Calcolemus/reference/calcolemus-lcffol.html#deskol\u0027","title":"Lcffol.deskol\u0027","content":"Lcffol.deskol\u0027 \ndeskol\u0027 \n"},{"uri":"/Calcolemus/reference/calcolemus-lcffol.html#lcftab","title":"Lcffol.lcftab","content":"Lcffol.lcftab \nlcftab \n"},{"uri":"/Calcolemus/reference/calcolemus-lcffol.html#quantforms","title":"Lcffol.quantforms","content":"Lcffol.quantforms \nquantforms \n"},{"uri":"/Calcolemus/reference/calcolemus-lcffol.html#skolemfuns","title":"Lcffol.skolemfuns","content":"Lcffol.skolemfuns \nskolemfuns \n"},{"uri":"/Calcolemus/reference/calcolemus-lcffol.html#form_match","title":"Lcffol.form_match","content":"Lcffol.form_match \nform_match \n"},{"uri":"/Calcolemus/reference/calcolemus-lcffol.html#lcfrefute","title":"Lcffol.lcfrefute","content":"Lcffol.lcfrefute \nlcfrefute \n"},{"uri":"/Calcolemus/reference/calcolemus-lcffol.html#mk_skol","title":"Lcffol.mk_skol","content":"Lcffol.mk_skol \nmk_skol \n"},{"uri":"/Calcolemus/reference/calcolemus-lcffol.html#simpcont","title":"Lcffol.simpcont","content":"Lcffol.simpcont \nsimpcont \n"},{"uri":"/Calcolemus/reference/calcolemus-lcffol.html#elim_skolemvar","title":"Lcffol.elim_skolemvar","content":"Lcffol.elim_skolemvar \nelim_skolemvar \n"},{"uri":"/Calcolemus/reference/calcolemus-lcffol.html#deskolcont","title":"Lcffol.deskolcont","content":"Lcffol.deskolcont \ndeskolcont \n"},{"uri":"/Calcolemus/reference/calcolemus-lcffol.html#lcffol","title":"Lcffol.lcffol","content":"Lcffol.lcffol \nlcffol \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html","title":"Lcfprop","content":"Lcfprop \n\n Propositional logic by inference.\n  \nLcfprop.imp_refl \nimp_refl \nLcfprop.imp_unduplicate \nimp_unduplicate \nLcfprop.negatef \nnegatef \nLcfprop.negativef \nnegativef \nLcfprop.add_assum \nadd_assum \nLcfprop.imp_add_assum \nimp_add_assum \nLcfprop.imp_trans \nimp_trans \nLcfprop.imp_insert \nimp_insert \nLcfprop.imp_swap \nimp_swap \nLcfprop.imp_trans_th \nimp_trans_th \nLcfprop.imp_add_concl \nimp_add_concl \nLcfprop.imp_swap_th \nimp_swap_th \nLcfprop.imp_swap2 \nimp_swap2 \nLcfprop.right_mp \nright_mp \nLcfprop.iff_imp1 \niff_imp1 \nLcfprop.iff_imp2 \niff_imp2 \nLcfprop.imp_antisym \nimp_antisym \nLcfprop.right_doubleneg \nright_doubleneg \nLcfprop.ex_falso \nex_falso \nLcfprop.imp_trans2 \nimp_trans2 \nLcfprop.imp_trans_chain \nimp_trans_chain \nLcfprop.imp_truefalse \nimp_truefalse \nLcfprop.imp_mono_th \nimp_mono_th \nLcfprop.truth \ntruth \nLcfprop.contrapos \ncontrapos \nLcfprop.and_left \nand_left \nLcfprop.and_right \nand_right \nLcfprop.conjths \nconjths \nLcfprop.and_pair \nand_pair \nLcfprop.shunt \nshunt \nLcfprop.unshunt \nunshunt \nLcfprop.iff_def \niff_def \nLcfprop.expand_connective \nexpand_connective \nLcfprop.eliminate_connective \neliminate_connective \nLcfprop.imp_false_conseqs \nimp_false_conseqs \nLcfprop.imp_false_rule \nimp_false_rule \nLcfprop.imp_true_rule \nimp_true_rule \nLcfprop.imp_contr \nimp_contr \nLcfprop.imp_front_th \nimp_front_th \nLcfprop.imp_front \nimp_front \nLcfprop.lcfptab \nlcfptab \nLcfprop.lcftaut \nlcftaut"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#imp_refl","title":"Lcfprop.imp_refl","content":"Lcfprop.imp_refl \nimp_refl \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#imp_unduplicate","title":"Lcfprop.imp_unduplicate","content":"Lcfprop.imp_unduplicate \nimp_unduplicate \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#negatef","title":"Lcfprop.negatef","content":"Lcfprop.negatef \nnegatef \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#negativef","title":"Lcfprop.negativef","content":"Lcfprop.negativef \nnegativef \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#add_assum","title":"Lcfprop.add_assum","content":"Lcfprop.add_assum \nadd_assum \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#imp_add_assum","title":"Lcfprop.imp_add_assum","content":"Lcfprop.imp_add_assum \nimp_add_assum \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#imp_trans","title":"Lcfprop.imp_trans","content":"Lcfprop.imp_trans \nimp_trans \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#imp_insert","title":"Lcfprop.imp_insert","content":"Lcfprop.imp_insert \nimp_insert \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#imp_swap","title":"Lcfprop.imp_swap","content":"Lcfprop.imp_swap \nimp_swap \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#imp_trans_th","title":"Lcfprop.imp_trans_th","content":"Lcfprop.imp_trans_th \nimp_trans_th \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#imp_add_concl","title":"Lcfprop.imp_add_concl","content":"Lcfprop.imp_add_concl \nimp_add_concl \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#imp_swap_th","title":"Lcfprop.imp_swap_th","content":"Lcfprop.imp_swap_th \nimp_swap_th \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#imp_swap2","title":"Lcfprop.imp_swap2","content":"Lcfprop.imp_swap2 \nimp_swap2 \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#right_mp","title":"Lcfprop.right_mp","content":"Lcfprop.right_mp \nright_mp \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#iff_imp1","title":"Lcfprop.iff_imp1","content":"Lcfprop.iff_imp1 \niff_imp1 \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#iff_imp2","title":"Lcfprop.iff_imp2","content":"Lcfprop.iff_imp2 \niff_imp2 \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#imp_antisym","title":"Lcfprop.imp_antisym","content":"Lcfprop.imp_antisym \nimp_antisym \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#right_doubleneg","title":"Lcfprop.right_doubleneg","content":"Lcfprop.right_doubleneg \nright_doubleneg \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#ex_falso","title":"Lcfprop.ex_falso","content":"Lcfprop.ex_falso \nex_falso \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#imp_trans2","title":"Lcfprop.imp_trans2","content":"Lcfprop.imp_trans2 \nimp_trans2 \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#imp_trans_chain","title":"Lcfprop.imp_trans_chain","content":"Lcfprop.imp_trans_chain \nimp_trans_chain \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#imp_truefalse","title":"Lcfprop.imp_truefalse","content":"Lcfprop.imp_truefalse \nimp_truefalse \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#imp_mono_th","title":"Lcfprop.imp_mono_th","content":"Lcfprop.imp_mono_th \nimp_mono_th \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#truth","title":"Lcfprop.truth","content":"Lcfprop.truth \ntruth \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#contrapos","title":"Lcfprop.contrapos","content":"Lcfprop.contrapos \ncontrapos \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#and_left","title":"Lcfprop.and_left","content":"Lcfprop.and_left \nand_left \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#and_right","title":"Lcfprop.and_right","content":"Lcfprop.and_right \nand_right \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#conjths","title":"Lcfprop.conjths","content":"Lcfprop.conjths \nconjths \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#and_pair","title":"Lcfprop.and_pair","content":"Lcfprop.and_pair \nand_pair \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#shunt","title":"Lcfprop.shunt","content":"Lcfprop.shunt \nshunt \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#unshunt","title":"Lcfprop.unshunt","content":"Lcfprop.unshunt \nunshunt \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#iff_def","title":"Lcfprop.iff_def","content":"Lcfprop.iff_def \niff_def \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#expand_connective","title":"Lcfprop.expand_connective","content":"Lcfprop.expand_connective \nexpand_connective \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#eliminate_connective","title":"Lcfprop.eliminate_connective","content":"Lcfprop.eliminate_connective \neliminate_connective \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#imp_false_conseqs","title":"Lcfprop.imp_false_conseqs","content":"Lcfprop.imp_false_conseqs \nimp_false_conseqs \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#imp_false_rule","title":"Lcfprop.imp_false_rule","content":"Lcfprop.imp_false_rule \nimp_false_rule \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#imp_true_rule","title":"Lcfprop.imp_true_rule","content":"Lcfprop.imp_true_rule \nimp_true_rule \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#imp_contr","title":"Lcfprop.imp_contr","content":"Lcfprop.imp_contr \nimp_contr \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#imp_front_th","title":"Lcfprop.imp_front_th","content":"Lcfprop.imp_front_th \nimp_front_th \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#imp_front","title":"Lcfprop.imp_front","content":"Lcfprop.imp_front \nimp_front \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#lcfptab","title":"Lcfprop.lcfptab","content":"Lcfprop.lcfptab \nlcfptab \n"},{"uri":"/Calcolemus/reference/calcolemus-lcfprop.html#lcftaut","title":"Lcfprop.lcftaut","content":"Lcfprop.lcftaut \nlcftaut \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html","title":"Limitations","content":"Limitations \n\n Undecidability.\n  \nLimitations.config \nconfig \nLimitations.direction \ndirection \nLimitations.formulaclass \nformulaclass \nLimitations.symbol \nsymbol \nLimitations.tape \ntape \nLimitations.numeral \nnumeral \nLimitations.number \nnumber \nLimitations.pair \npair \nLimitations.gterm \ngterm \nLimitations.gform \ngform \nLimitations.gnumeral \ngnumeral \nLimitations.diag001 \ndiag001 \nLimitations.phi001 \nphi001 \nLimitations.qdiag001 \nqdiag001 \nLimitations.phi002 \nphi002 \nLimitations.diag002 \ndiag002 \nLimitations.qdiag002 \nqdiag002 \nLimitations.dtermval \ndtermval \nLimitations.dholds \ndholds \nLimitations.dhquant \ndhquant \nLimitations.opp \nopp \nLimitations.classify \nclassify \nLimitations.veref \nveref \nLimitations.verefboundquant \nverefboundquant \nLimitations.sholds \nsholds \nLimitations.first \nfirst \nLimitations.sigma_bound \nsigma_bound \nLimitations.look \nlook \nLimitations.write \nwrite \nLimitations.move \nmove \nLimitations.run \nrun \nLimitations.input_tape \ninput_tape \nLimitations.output_tape \noutput_tape \nLimitations.exec \nexec \nLimitations.robinson \nrobinson \nLimitations.suc_inj \nsuc_inj \nLimitations.num_cases \nnum_cases \nLimitations.mul_suc \nmul_suc \nLimitations.mul_0 \nmul_0 \nLimitations.lt_def \nlt_def \nLimitations.le_def \nle_def \nLimitations.add_suc \nadd_suc \nLimitations.add_0 \nadd_0 \nLimitations.right_spec \nright_spec \nLimitations.right_mp \nright_mp \nLimitations.right_imp_trans \nright_imp_trans \nLimitations.right_sym \nright_sym \nLimitations.right_trans \nright_trans \nLimitations.robop \nrobop \nLimitations.robeval \nrobeval \nLimitations.robinson_consequences \nrobinson_consequences \nLimitations.robinson_thm \nrobinson_thm \nLimitations.suc_inj_false \nsuc_inj_false \nLimitations.suc_0_r \nsuc_0_r \nLimitations.suc_0_l \nsuc_0_l \nLimitations.num_lecases \nnum_lecases \nLimitations.lt_suc \nlt_suc \nLimitations.lt_0 \nlt_0 \nLimitations.le_suc \nle_suc \nLimitations.le_0 \nle_0 \nLimitations.expand_nlt \nexpand_nlt \nLimitations.expand_nle \nexpand_nle \nLimitations.expand_lt \nexpand_lt \nLimitations.expand_le \nexpand_le \nLimitations.rob_eq \nrob_eq \nLimitations.rob_nen \nrob_nen \nLimitations.rob_ne \nrob_ne \nLimitations.introduce_connective \nintroduce_connective \nLimitations.elim_bex \nelim_bex \nLimitations.sigma_elim \nsigma_elim \nLimitations.boundquant_step \nboundquant_step \nLimitations.sigma_prove \nsigma_prove \nLimitations.bounded_prove \nbounded_prove \nLimitations.boundednum_prove \nboundednum_prove"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#numeral","title":"Limitations.numeral","content":"Limitations.numeral \nnumeral \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#number","title":"Limitations.number","content":"Limitations.number \nnumber \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#pair","title":"Limitations.pair","content":"Limitations.pair \npair \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#gterm","title":"Limitations.gterm","content":"Limitations.gterm \ngterm \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#gform","title":"Limitations.gform","content":"Limitations.gform \ngform \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#gnumeral","title":"Limitations.gnumeral","content":"Limitations.gnumeral \ngnumeral \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#diag001","title":"Limitations.diag001","content":"Limitations.diag001 \ndiag001 \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#phi001","title":"Limitations.phi001","content":"Limitations.phi001 \nphi001 \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#qdiag001","title":"Limitations.qdiag001","content":"Limitations.qdiag001 \nqdiag001 \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#phi002","title":"Limitations.phi002","content":"Limitations.phi002 \nphi002 \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#diag002","title":"Limitations.diag002","content":"Limitations.diag002 \ndiag002 \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#qdiag002","title":"Limitations.qdiag002","content":"Limitations.qdiag002 \nqdiag002 \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#dtermval","title":"Limitations.dtermval","content":"Limitations.dtermval \ndtermval \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#dholds","title":"Limitations.dholds","content":"Limitations.dholds \ndholds \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#dhquant","title":"Limitations.dhquant","content":"Limitations.dhquant \ndhquant \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#opp","title":"Limitations.opp","content":"Limitations.opp \nopp \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#classify","title":"Limitations.classify","content":"Limitations.classify \nclassify \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#veref","title":"Limitations.veref","content":"Limitations.veref \nveref \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#verefboundquant","title":"Limitations.verefboundquant","content":"Limitations.verefboundquant \nverefboundquant \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#sholds","title":"Limitations.sholds","content":"Limitations.sholds \nsholds \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#first","title":"Limitations.first","content":"Limitations.first \nfirst \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#sigma_bound","title":"Limitations.sigma_bound","content":"Limitations.sigma_bound \nsigma_bound \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#look","title":"Limitations.look","content":"Limitations.look \nlook \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#write","title":"Limitations.write","content":"Limitations.write \nwrite \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#move","title":"Limitations.move","content":"Limitations.move \nmove \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#run","title":"Limitations.run","content":"Limitations.run \nrun \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#input_tape","title":"Limitations.input_tape","content":"Limitations.input_tape \ninput_tape \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#output_tape","title":"Limitations.output_tape","content":"Limitations.output_tape \noutput_tape \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#exec","title":"Limitations.exec","content":"Limitations.exec \nexec \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#robinson","title":"Limitations.robinson","content":"Limitations.robinson \nrobinson \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#suc_inj","title":"Limitations.suc_inj","content":"Limitations.suc_inj \nsuc_inj \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#num_cases","title":"Limitations.num_cases","content":"Limitations.num_cases \nnum_cases \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#mul_suc","title":"Limitations.mul_suc","content":"Limitations.mul_suc \nmul_suc \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#mul_0","title":"Limitations.mul_0","content":"Limitations.mul_0 \nmul_0 \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#lt_def","title":"Limitations.lt_def","content":"Limitations.lt_def \nlt_def \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#le_def","title":"Limitations.le_def","content":"Limitations.le_def \nle_def \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#add_suc","title":"Limitations.add_suc","content":"Limitations.add_suc \nadd_suc \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#add_0","title":"Limitations.add_0","content":"Limitations.add_0 \nadd_0 \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#right_spec","title":"Limitations.right_spec","content":"Limitations.right_spec \nright_spec \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#right_mp","title":"Limitations.right_mp","content":"Limitations.right_mp \nright_mp \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#right_imp_trans","title":"Limitations.right_imp_trans","content":"Limitations.right_imp_trans \nright_imp_trans \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#right_sym","title":"Limitations.right_sym","content":"Limitations.right_sym \nright_sym \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#right_trans","title":"Limitations.right_trans","content":"Limitations.right_trans \nright_trans \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#robop","title":"Limitations.robop","content":"Limitations.robop \nrobop \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#robeval","title":"Limitations.robeval","content":"Limitations.robeval \nrobeval \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#robinson_consequences","title":"Limitations.robinson_consequences","content":"Limitations.robinson_consequences \nrobinson_consequences \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#robinson_thm","title":"Limitations.robinson_thm","content":"Limitations.robinson_thm \nrobinson_thm \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#suc_inj_false","title":"Limitations.suc_inj_false","content":"Limitations.suc_inj_false \nsuc_inj_false \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#suc_0_r","title":"Limitations.suc_0_r","content":"Limitations.suc_0_r \nsuc_0_r \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#suc_0_l","title":"Limitations.suc_0_l","content":"Limitations.suc_0_l \nsuc_0_l \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#num_lecases","title":"Limitations.num_lecases","content":"Limitations.num_lecases \nnum_lecases \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#lt_suc","title":"Limitations.lt_suc","content":"Limitations.lt_suc \nlt_suc \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#lt_0","title":"Limitations.lt_0","content":"Limitations.lt_0 \nlt_0 \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#le_suc","title":"Limitations.le_suc","content":"Limitations.le_suc \nle_suc \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#le_0","title":"Limitations.le_0","content":"Limitations.le_0 \nle_0 \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#expand_nlt","title":"Limitations.expand_nlt","content":"Limitations.expand_nlt \nexpand_nlt \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#expand_nle","title":"Limitations.expand_nle","content":"Limitations.expand_nle \nexpand_nle \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#expand_lt","title":"Limitations.expand_lt","content":"Limitations.expand_lt \nexpand_lt \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#expand_le","title":"Limitations.expand_le","content":"Limitations.expand_le \nexpand_le \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#rob_eq","title":"Limitations.rob_eq","content":"Limitations.rob_eq \nrob_eq \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#rob_nen","title":"Limitations.rob_nen","content":"Limitations.rob_nen \nrob_nen \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#rob_ne","title":"Limitations.rob_ne","content":"Limitations.rob_ne \nrob_ne \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#introduce_connective","title":"Limitations.introduce_connective","content":"Limitations.introduce_connective \nintroduce_connective \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#elim_bex","title":"Limitations.elim_bex","content":"Limitations.elim_bex \nelim_bex \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#sigma_elim","title":"Limitations.sigma_elim","content":"Limitations.sigma_elim \nsigma_elim \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#boundquant_step","title":"Limitations.boundquant_step","content":"Limitations.boundquant_step \nboundquant_step \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#sigma_prove","title":"Limitations.sigma_prove","content":"Limitations.sigma_prove \nsigma_prove \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#bounded_prove","title":"Limitations.bounded_prove","content":"Limitations.bounded_prove \nbounded_prove \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations.html#boundednum_prove","title":"Limitations.boundednum_prove","content":"Limitations.boundednum_prove \nboundednum_prove \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations-config.html","title":"config","content":"config \n \nconfig.Config \nConfig"},{"uri":"/Calcolemus/reference/calcolemus-limitations-config.html#Config","title":"config.Config","content":"config.Config \nConfig \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations-direction.html","title":"direction","content":"direction \n \ndirection.Left \nLeft \ndirection.Right \nRight \ndirection.Stay \nStay"},{"uri":"/Calcolemus/reference/calcolemus-limitations-direction.html#Left","title":"direction.Left","content":"direction.Left \nLeft \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations-direction.html#Right","title":"direction.Right","content":"direction.Right \nRight \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations-direction.html#Stay","title":"direction.Stay","content":"direction.Stay \nStay \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations-formulaclass.html","title":"formulaclass","content":"formulaclass \n \nformulaclass.Sigma \nSigma \nformulaclass.Pi \nPi \nformulaclass.Delta \nDelta"},{"uri":"/Calcolemus/reference/calcolemus-limitations-formulaclass.html#Sigma","title":"formulaclass.Sigma","content":"formulaclass.Sigma \nSigma \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations-formulaclass.html#Pi","title":"formulaclass.Pi","content":"formulaclass.Pi \nPi \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations-formulaclass.html#Delta","title":"formulaclass.Delta","content":"formulaclass.Delta \nDelta \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations-symbol.html","title":"symbol","content":"symbol \n \nsymbol.Blank \nBlank \nsymbol.One \nOne"},{"uri":"/Calcolemus/reference/calcolemus-limitations-symbol.html#Blank","title":"symbol.Blank","content":"symbol.Blank \nBlank \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations-symbol.html#One","title":"symbol.One","content":"symbol.One \nOne \n"},{"uri":"/Calcolemus/reference/calcolemus-limitations-tape.html","title":"tape","content":"tape \n \ntape.Tape \nTape"},{"uri":"/Calcolemus/reference/calcolemus-limitations-tape.html#Tape","title":"tape.Tape","content":"tape.Tape \nTape \n"},{"uri":"/Calcolemus/reference/calcolemus-meson.html","title":"Meson","content":"Meson \n\n Model Elimination.\n  \nMeson.contrapositives \ncontrapositives \nMeson.mexpand001 \nmexpand001 \nMeson.puremeson001 \npuremeson001 \nMeson.meson001 \nmeson001 \nMeson.equal \nequal \nMeson.expand2 \nexpand2 \nMeson.mexpand002 \nmexpand002 \nMeson.puremeson002 \npuremeson002 \nMeson.meson002 \nmeson002"},{"uri":"/Calcolemus/reference/calcolemus-meson.html#contrapositives","title":"Meson.contrapositives","content":"Meson.contrapositives \ncontrapositives \n"},{"uri":"/Calcolemus/reference/calcolemus-meson.html#mexpand001","title":"Meson.mexpand001","content":"Meson.mexpand001 \nmexpand001 \n"},{"uri":"/Calcolemus/reference/calcolemus-meson.html#puremeson001","title":"Meson.puremeson001","content":"Meson.puremeson001 \npuremeson001 \n"},{"uri":"/Calcolemus/reference/calcolemus-meson.html#meson001","title":"Meson.meson001","content":"Meson.meson001 \nmeson001 \n"},{"uri":"/Calcolemus/reference/calcolemus-meson.html#equal","title":"Meson.equal","content":"Meson.equal \nequal \n"},{"uri":"/Calcolemus/reference/calcolemus-meson.html#expand2","title":"Meson.expand2","content":"Meson.expand2 \nexpand2 \n"},{"uri":"/Calcolemus/reference/calcolemus-meson.html#mexpand002","title":"Meson.mexpand002","content":"Meson.mexpand002 \nmexpand002 \n"},{"uri":"/Calcolemus/reference/calcolemus-meson.html#puremeson002","title":"Meson.puremeson002","content":"Meson.puremeson002 \npuremeson002 \n"},{"uri":"/Calcolemus/reference/calcolemus-meson.html#meson002","title":"Meson.meson002","content":"Meson.meson002 \nmeson002 \n"},{"uri":"/Calcolemus/reference/calcolemus-order.html","title":"Order","content":"Order \n\n Simple term orderings including LPO.\n  \nOrder.termsize \ntermsize \nOrder.lexord \nlexord \nOrder.lpo_gt \nlpo_gt \nOrder.lpo_ge \nlpo_ge \nOrder.weight \nweight"},{"uri":"/Calcolemus/reference/calcolemus-order.html#termsize","title":"Order.termsize","content":"Order.termsize \ntermsize \n"},{"uri":"/Calcolemus/reference/calcolemus-order.html#lexord","title":"Order.lexord","content":"Order.lexord \nlexord \n"},{"uri":"/Calcolemus/reference/calcolemus-order.html#lpo_gt","title":"Order.lpo_gt","content":"Order.lpo_gt \nlpo_gt \n"},{"uri":"/Calcolemus/reference/calcolemus-order.html#lpo_ge","title":"Order.lpo_ge","content":"Order.lpo_ge \nlpo_ge \n"},{"uri":"/Calcolemus/reference/calcolemus-order.html#weight","title":"Order.weight","content":"Order.weight \nweight \n"},{"uri":"/Calcolemus/reference/calcolemus-paramodulation.html","title":"Paramodulation","content":"Paramodulation \n\n Paramodulation.\n  \nParamodulation.overlapl \noverlapl \nParamodulation.overlapc \noverlapc \nParamodulation.paramodulate \nparamodulate \nParamodulation.para_clauses \npara_clauses \nParamodulation.paraloop \nparaloop \nParamodulation.pure_paramodulation \npure_paramodulation \nParamodulation.paramodulation \nparamodulation"},{"uri":"/Calcolemus/reference/calcolemus-paramodulation.html#overlapl","title":"Paramodulation.overlapl","content":"Paramodulation.overlapl \noverlapl \n"},{"uri":"/Calcolemus/reference/calcolemus-paramodulation.html#overlapc","title":"Paramodulation.overlapc","content":"Paramodulation.overlapc \noverlapc \n"},{"uri":"/Calcolemus/reference/calcolemus-paramodulation.html#paramodulate","title":"Paramodulation.paramodulate","content":"Paramodulation.paramodulate \nparamodulate \n"},{"uri":"/Calcolemus/reference/calcolemus-paramodulation.html#para_clauses","title":"Paramodulation.para_clauses","content":"Paramodulation.para_clauses \npara_clauses \n"},{"uri":"/Calcolemus/reference/calcolemus-paramodulation.html#paraloop","title":"Paramodulation.paraloop","content":"Paramodulation.paraloop \nparaloop \n"},{"uri":"/Calcolemus/reference/calcolemus-paramodulation.html#pure_paramodulation","title":"Paramodulation.pure_paramodulation","content":"Paramodulation.pure_paramodulation \npure_paramodulation \n"},{"uri":"/Calcolemus/reference/calcolemus-paramodulation.html#paramodulation","title":"Paramodulation.paramodulation","content":"Paramodulation.paramodulation \nparamodulation \n"},{"uri":"/Calcolemus/reference/calcolemus-pelletier.html","title":"Pelletier","content":"Pelletier \n\n Some Pelletier problems to compare proof procedures.\n  \nPelletier.p19 \np19 \nPelletier.p20 \np20 \nPelletier.p24 \np24 \nPelletier.p36 \np36 \nPelletier.p38 \np38 \nPelletier.p39 \np39 \nPelletier.p42 \np42 \nPelletier.p43 \np43 \nPelletier.p44 \np44 \nPelletier.p45 \np45 \nPelletier.p59 \np59 \nPelletier.p60 \np60"},{"uri":"/Calcolemus/reference/calcolemus-pelletier.html#p19","title":"Pelletier.p19","content":"Pelletier.p19 \np19 \n\n \u00AC\u00AC(\u2203x. \u2200y z. (P(y) \u27F6 Q(z)) \u27F6 (P(x) \u27F6 Q(x)))\n"},{"uri":"/Calcolemus/reference/calcolemus-pelletier.html#p20","title":"Pelletier.p20","content":"Pelletier.p20 \np20 \n\n (\u2200x y. \u2203z. \u2200w. (P(x) \u2227 Q(y) \u27F6 R(z) \u2227 S(w))) \u27F6 (\u2203x y. P(x) \u2227 Q(y)) \u27F6 (\u2203z. R(z))\n"},{"uri":"/Calcolemus/reference/calcolemus-pelletier.html#p24","title":"Pelletier.p24","content":"Pelletier.p24 \np24 \n\n ~(\u2203 x. U(x) \u2227 Q(x)) \u2227 (\u2200 x. P(x) \u27F6 Q(x) \\/ R(x)) \u2227 \n ~(\u2203 x. P(x) \u27F6 (\u2203 x. Q(x))) \u2227 (\u2200 x. Q(x) \u2227 R(x) \u27F6 U(x)) \n \u27F6 (\u2203 x. P(x) \u2227 R(x))\n"},{"uri":"/Calcolemus/reference/calcolemus-pelletier.html#p36","title":"Pelletier.p36","content":"Pelletier.p36 \np36 \n\n (\u2200x. \u2203y. J(x,y)) \u2227 (\u2200x. \u2203y. G(x,y)) \u2227 \n (\u2200x y. J(x,y) \u2228 G(x,y) \u27F6 (\u2200z. J(y,z) \u2228 G(y,z) \u27F6 H(x,z))) \u27F6 (\u2200x. \u2203y. H(x,y))\n"},{"uri":"/Calcolemus/reference/calcolemus-pelletier.html#p38","title":"Pelletier.p38","content":"Pelletier.p38 \np38 \n"},{"uri":"/Calcolemus/reference/calcolemus-pelletier.html#p39","title":"Pelletier.p39","content":"Pelletier.p39 \np39 \n\n \u00AC (\u2203x. \u2200y. P(y,x) \u27F7 (\u00ACP(y,y))\n"},{"uri":"/Calcolemus/reference/calcolemus-pelletier.html#p42","title":"Pelletier.p42","content":"Pelletier.p42 \np42 \n\n \u00AC (\u2203y. \u2200x. P(x,y) \u27F7 (\u2203z. P(x,z) \u2227 P(z,y))\n"},{"uri":"/Calcolemus/reference/calcolemus-pelletier.html#p43","title":"Pelletier.p43","content":"Pelletier.p43 \np43 \n\n (\u2200x y. Q(x,y) \u27F7 \u2200z. P(z,x) \u27F7 P(z,y)) \u27F6 \u2200x y. Q(x,y) \u27F7 Q(y,x)\n"},{"uri":"/Calcolemus/reference/calcolemus-pelletier.html#p44","title":"Pelletier.p44","content":"Pelletier.p44 \np44 \n\n (\u2200x. P(x) \u27F6 (\u2203y. G(y) \u2227 H(x,y) \u2227 \n (\u2203y. G(y) \u2227 ~ H(x,y)))) \u2227 \n (\u2203x. J(x) \u2227 (\u2200y. G(y) \u27F6 H(x,y))) \n \u27F6 (\u2203x. j(x) \u2227 \u00ACf(x))\n"},{"uri":"/Calcolemus/reference/calcolemus-pelletier.html#p45","title":"Pelletier.p45","content":"Pelletier.p45 \np45 \n\n (\u2200 x. P(x) \u2227 (\u2200 y. G(y) \u2227 H(x,y) \u27F6 J(x,y)) \u27F6 (\u2200 y. G(y) \u2227 H(x,y) \u27F6 R(y))) \u2227 \n ~(\u2203 y. L(y) \u2227 R(y)) \u2227 (\u2203 x. P(x) \u2227 (\u2200 y. H(x,y) \u27F6 L(y)) \u2227 \n (\u2200 y. G(y) \u2227 H(x,y) \u27F6 J(x,y))) \u27F6 (\u2203 x. P(x) \u2227 ~(\u2203 y. G(y) \u2227 H(x,y)))\n"},{"uri":"/Calcolemus/reference/calcolemus-pelletier.html#p59","title":"Pelletier.p59","content":"Pelletier.p59 \np59 \n\n (\u2200 x. P(x) \u27F7 ~P(f(x))) \u27F6 (\u2203 x. P(x) \u2227 ~P(f(x)))\n"},{"uri":"/Calcolemus/reference/calcolemus-pelletier.html#p60","title":"Pelletier.p60","content":"Pelletier.p60 \np60 \n\n \u2200x. P(x,f(x)) \u27F7 (\u2203y. (\u2200z. P(z,y) \u27F6 P (z,f(x))) \u2227 P(x,y))\n"},{"uri":"/Calcolemus/reference/calcolemus-prolog.html","title":"Prolog","content":"Prolog \n\n Prolog.\n  \nProlog.renamerule \nrenamerule \nProlog.backchain \nbackchain \nProlog.hornify \nhornify \nProlog.hornprove \nhornprove \nProlog.parserule \nparserule \nProlog.simpleprolog \nsimpleprolog \nProlog.prolog \nprolog"},{"uri":"/Calcolemus/reference/calcolemus-prolog.html#renamerule","title":"Prolog.renamerule","content":"Prolog.renamerule \nrenamerule \n"},{"uri":"/Calcolemus/reference/calcolemus-prolog.html#backchain","title":"Prolog.backchain","content":"Prolog.backchain \nbackchain \n"},{"uri":"/Calcolemus/reference/calcolemus-prolog.html#hornify","title":"Prolog.hornify","content":"Prolog.hornify \nhornify \n"},{"uri":"/Calcolemus/reference/calcolemus-prolog.html#hornprove","title":"Prolog.hornprove","content":"Prolog.hornprove \nhornprove \n"},{"uri":"/Calcolemus/reference/calcolemus-prolog.html#parserule","title":"Prolog.parserule","content":"Prolog.parserule \nparserule \n"},{"uri":"/Calcolemus/reference/calcolemus-prolog.html#simpleprolog","title":"Prolog.simpleprolog","content":"Prolog.simpleprolog \nsimpleprolog \n"},{"uri":"/Calcolemus/reference/calcolemus-prolog.html#prolog","title":"Prolog.prolog","content":"Prolog.prolog \nprolog \n"},{"uri":"/Calcolemus/reference/calcolemus-prop.html","title":"Prop","content":"Prop \n\n Basic stuff for propositional logic: datatype, parsing and prettyprinting, \n syntax and semantics, normal forms.\n  \nProp.prop \nprop \nProp.pname \npname \nProp.parse_propvar \nparse_propvar \nProp.parse_prop_formula \nparse_prop_formula \nProp.(!\u003E) \n(!\u003E) \nProp.fprint_propvar \nfprint_propvar \nProp.print_propvar \nprint_propvar \nProp.sprint_propvar \nsprint_propvar \nProp.fprint_prop_formula \nfprint_prop_formula \nProp.print_prop_formula \nprint_prop_formula \nProp.sprint_prop_formula \nsprint_prop_formula \nProp.eval \neval \nProp.atoms \natoms \nProp.onallvaluations \nonallvaluations \nProp.allvaluations \nallvaluations \nProp.fprint_truthtable \nfprint_truthtable \nProp.print_truthtable \nprint_truthtable \nProp.sprint_truthtable \nsprint_truthtable \nProp.tautology \ntautology \nProp.unsatisfiable \nunsatisfiable \nProp.satisfiable \nsatisfiable \nProp.psubst \npsubst \nProp.dual \ndual \nProp.psimplify1 \npsimplify1 \nProp.psimplify \npsimplify \nProp.negative \nnegative \nProp.positive \npositive \nProp.negate \nnegate \nProp.nnf_naive \nnnf_naive \nProp.nnf \nnnf \nProp.nenf_naive \nnenf_naive \nProp.nenf \nnenf \nProp.list_conj \nlist_conj \nProp.list_disj \nlist_disj \nProp.mk_lits \nmk_lits \nProp.allsatvaluations \nallsatvaluations \nProp.dnf_by_truth_tables \ndnf_by_truth_tables \nProp.distrib_naive \ndistrib_naive \nProp.rawdnf \nrawdnf \nProp.distrib \ndistrib \nProp.purednf \npurednf \nProp.trivial \ntrivial \nProp.simpdnf \nsimpdnf \nProp.dnf \ndnf \nProp.purecnf \npurecnf \nProp.simpcnf \nsimpcnf \nProp.cnf \ncnf"},{"uri":"/Calcolemus/reference/calcolemus-prop.html#pname","title":"Prop.pname","content":"Prop.pname \npname \n\n Returns the name of a propositional variable.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#parse_propvar","title":"Prop.parse_propvar","content":"Prop.parse_propvar \nparse_propvar \n\n Parses atomic propositional variables.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#parse_prop_formula","title":"Prop.parse_prop_formula","content":"Prop.parse_prop_formula \nparse_prop_formula \n\n Parses a string in a propositional formula.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#(!\u003E)","title":"Prop.(!\u003E)","content":"Prop.(!\u003E) \n(!\u003E) \n\n A convenient parsing operator to make it easier to parse prop formulas\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#fprint_propvar","title":"Prop.fprint_propvar","content":"Prop.fprint_propvar \nfprint_propvar \n\n Prints a propositional variable using a TextWriter.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#print_propvar","title":"Prop.print_propvar","content":"Prop.print_propvar \nprint_propvar \n\n Prints a propositional variable.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#sprint_propvar","title":"Prop.sprint_propvar","content":"Prop.sprint_propvar \nsprint_propvar \n\n Returns a string representation of a propositional variable.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#fprint_prop_formula","title":"Prop.fprint_prop_formula","content":"Prop.fprint_prop_formula \nfprint_prop_formula \n\n Prints a propositional formula using a TextWriter.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#print_prop_formula","title":"Prop.print_prop_formula","content":"Prop.print_prop_formula \nprint_prop_formula \n\n Prints a propositional formula.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#sprint_prop_formula","title":"Prop.sprint_prop_formula","content":"Prop.sprint_prop_formula \nsprint_prop_formula \n\n Returns a string representation of a propositional formula instead of \n its abstract syntax tree.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#eval","title":"Prop.eval","content":"Prop.eval \neval \n\n Evaluates the truth-value of a formula given a valuation.\n  \n\n A valuation is a function from the set of atoms to the set of \n truth-values {\u003Ccode\u003Efalse\u003C/code\u003E, \u003Ccode\u003Etrue\u003C/code\u003E} (note that these are elements \n of the metalanguage, in this case F#, that represent the semantic \n concepts of truth-values and are not the same thing as \u003Ccode\u003EFalse\u003C/code\u003E and \n \u003Ccode\u003ETrue\u003C/code\u003E which are element of the object language and so syntactic \n elements).\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#atoms","title":"Prop.atoms","content":"Prop.atoms \natoms \n\n Returns the set of atoms in a formula.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#onallvaluations","title":"Prop.onallvaluations","content":"Prop.onallvaluations \nonallvaluations \n\n Tests whether a function \u003Ccode\u003Esubfn\u003C/code\u003E returns \u003Ccode\u003Etrue\u003C/code\u003E on all \n possible valuations of the atoms \u003Ccode\u003Eats\u003C/code\u003E, using an existing \n valuation \u003Ccode\u003Ev\u003C/code\u003E for all other atoms.\n  \n\n This function is used to define both truth-table (see \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-prop.html#print_truthtable\u0022\u003EProp.print_truthtable\u003C/a\u003E) and \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-prop.html\u0022\u003EProp.tautology\u003C/a\u003E"},{"uri":"/Calcolemus/reference/calcolemus-prop.html#allvaluations","title":"Prop.allvaluations","content":"Prop.allvaluations \nallvaluations \n\n Returns all possible valuations of the atoms in \u003Ccode\u003Efm\u003C/code\u003E.\n  \n\n This function is not part of the handbook\u0027s code and it is added \n here for convenience and exercise.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#fprint_truthtable","title":"Prop.fprint_truthtable","content":"Prop.fprint_truthtable \nfprint_truthtable \n\n Prints the truth table of the prop formula \u003Ccode\u003Efm\u003C/code\u003E to a TextWriter \n \u003Ccode\u003Esw\u003C/code\u003E.\n  \n\n See also \u003Ca href=\u0022/Calcolemus/reference/calcolemus-prop.html#print_truthtable\u0022\u003EProp.print_truthtable\u003C/a\u003E"},{"uri":"/Calcolemus/reference/calcolemus-prop.html#print_truthtable","title":"Prop.print_truthtable","content":"Prop.print_truthtable \nprint_truthtable \n\n Prints the truth table of the prop formula \u003Ccode\u003Efm\u003C/code\u003E to the \n \u003Ccode\u003Estdout\u003C/code\u003E.\n  \n\u003Cp\u003EEach logical connective is interpreted by a corresponding bool \n operator of the metalanguage.\u003C/p\u003E\u003Cp\u003EA truth-table shows how the truth-value assigned to a formula is \n determined by those of its atoms, based on the interpretation of its \n logical connectives.\u003C/p\u003E\n \n For binary connective we have:\n \n \\begin{array}{|c|c||c|c|c|c|}\n \\hline\n p \u0026 q \u0026 p \\land q \u0026 p \\lor q \u0026 p \\Rightarrow q \u0026 p \\Leftrightarrow q \\\\\n \\hline\n false \u0026 false \u0026 false \u0026 false \u0026 true \u0026 true \\\\\n \\hline\n false \u0026 true \u0026 false \u0026 true \u0026 true \u0026 false \\\\\n \\hline\n true \u0026 false \u0026 false \u0026 true \u0026 false \u0026 false \\\\\n \\hline\n true \u0026 true \u0026 true \u0026 true \u0026 true \u0026 true \\\\\n \\hline\n \\end{array}\n \n while for the unary negation:\n \n \\begin{array}{|c||c|}\n \t\\hline\n \tp \u0026 \\neg p \\\\\n \t\\hline\n \tfalse \u0026 true\\\\\n \t\\hline\n \ttrue \u0026 false\\\\\n \t\\hline\n \\end{array} \n \n \u003Cp\u003EA truth table has one column for each propositional variable and one \n final column showing all of the possible results of the logical \n operation that the table represents. Each row of the truth table \n contains one possible configuration of the propositional variables, \n and the result of the operation for those values.\u003C/p\u003E\n \n In particular, truth-tables can be used to show whether (i) a prop \n formula is logically valid (i.e. a tautology: see \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-prop.html\u0022\u003EProp.tautology\u003C/a\u003E that, as this \n function, is based on \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-prop.html\u0022\u003EProp.onallvaluations\u003C/a\u003E) when the result \n column has \u003Ccode\u003Etrue\u003C/code\u003E in each rows of the table; (ii) \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-prop.html\u0022\u003EProp.satisfiable\u003C/a\u003E, when the result colum \n has \u003Ccode\u003Etrue\u003C/code\u003E at least in one row; (iii) \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-prop.html\u0022\u003EProp.unsatisfiable\u003C/a\u003E when has \n \u003Ccode\u003Efalse\u003C/code\u003E in each rows.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#sprint_truthtable","title":"Prop.sprint_truthtable","content":"Prop.sprint_truthtable \nsprint_truthtable \n\n Returns a string representation of the truth table of the prop formula \n \u003Ccode\u003Efm\u003C/code\u003E.\n  \n\n See also \u003Ca href=\u0022/Calcolemus/reference/calcolemus-prop.html#print_truthtable\u0022\u003EProp.print_truthtable\u003C/a\u003E"},{"uri":"/Calcolemus/reference/calcolemus-prop.html#tautology","title":"Prop.tautology","content":"Prop.tautology \ntautology \n\n Checks if a formula is a tautology at the propositional level.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#unsatisfiable","title":"Prop.unsatisfiable","content":"Prop.unsatisfiable \nunsatisfiable \n\n Checks if a formula is unsatisfiable at the propositional level.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#satisfiable","title":"Prop.satisfiable","content":"Prop.satisfiable \nsatisfiable \n\n Checks if a formula is satisfiable at the propositional level.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#psubst","title":"Prop.psubst","content":"Prop.psubst \npsubst \n\n Substitutes atoms in a formula with other formulas based on an fpf.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#dual","title":"Prop.dual","content":"Prop.dual \ndual \n\n Returns the dual of the input formula: i.e. the result of \n systematically exchanging \u003Ccode\u003E/\\\u003C/code\u003E with \u003Ccode\u003E\\/\u003C/code\u003E and also \n \u003Ccode\u003ETrue\u003C/code\u003E with \u003Ccode\u003EFalse\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#psimplify1","title":"Prop.psimplify1","content":"Prop.psimplify1 \npsimplify1 \n\n Performs a propositional simplification routine (but just at the first \n level) of the input formula, eliminating the basic \n propositional constants \u003Ccode\u003EFalse\u003C/code\u003E and \u003Ccode\u003ETrue\u003C/code\u003E and the double \n negations \u003Ccode\u003E~~p\u003C/code\u003E.\n  \n\n This function applies to formulas a simplification routine similar to \n the one \u003Ca href=\u0022/Calcolemus/reference/calcolemus-intro.html#simplify1\u0022\u003EIntro.simplify1\u003C/a\u003E applies on \n algebraic expressions.\n \n It eliminates the basic propositional \n constants \\(\\bot\\) and \\(\\top\\) based on the equivalences similar to \n the following (see the implementation for details):\n \u003Cul\u003E\n  \u003Cli\u003E\\(\\bot \\land p \\Leftrightarrow \\bot\\)\u003C/li\u003E\n  \u003Cli\u003E\\(\\top \\lor p \\Leftrightarrow p\\)\u003C/li\u003E\n  \u003Cli\u003E\\(p \\Rightarrow \\bot \\Leftrightarrow \\neg p\\)\u003C/li\u003E\n  \u003Cli\u003E...\u003C/li\u003E\n\u003C/ul\u003E\n \n At the same time, it also eliminates double negations \\(\\neg \\neg p\\).\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#psimplify","title":"Prop.psimplify","content":"Prop.psimplify \npsimplify \n\n Performs a propositional simplification routine eliminating \n the basic propositional constants \u003Ccode\u003EFalse\u003C/code\u003E and \u003Ccode\u003ETrue\u003C/code\u003E and the \n double negations \u003Ccode\u003E~~p\u003C/code\u003E.\n  \n\n Completes the simplification routine psimplify1 applying it at every \n level of the formula.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#negative","title":"Prop.negative","content":"Prop.negative \nnegative \n\n Checks if a literal is negative.\n  \n\n A literal is an atomic formula or its negation. This function can be \n applied to any kind of formulas but is specifically intended to be used \n on literals.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#positive","title":"Prop.positive","content":"Prop.positive \npositive \n\n Checks if a literal is positive.\n  \n\n A literal is an atomic formula or its negation. This function can be \n applied to any kind of formulas but is specifically intended to be used \n on literals.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#negate","title":"Prop.negate","content":"Prop.negate \nnegate \nChanges a literal into its contrary. \n\n A literal is an atomic formula or its negation. This function can be \n applied to any kind of formulas but is specifically intended to be used \n on literals.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#nnf_naive","title":"Prop.nnf_naive","content":"Prop.nnf_naive \nnnf_naive \n\n Changes a formula into a naive negation normal form.\n  \n\n A formula is in \u003Cem\u003Enegation normal form\u003C/em\u003E (NNF) if it is \n constructed from literals using only the binary connectives \\(\\land\\) \n and \\(\\lor\\), or else is one of the degenerate cases \\(\\top\\) and \n \\(\\bot\\).\n \n \u003Ccode\u003Ennf_naive\u003C/code\u003E implements an incomplete transformation of NNF which \n pushes down negation on atoms and removes the binary connective \n \\(\\Rightarrow\\) and \\(\\Leftrightarrow\\) but keeps \\(\\top\\) and \n \\(\\bot\\) mixed with other formulas.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#nnf","title":"Prop.nnf","content":"Prop.nnf \nnnf \n\n Changes a formula into a naive negation normal form.\n  \n\n A formula is in \u003Cem\u003Enegation normal form\u003C/em\u003E (NNF) if it is \n constructed from literals using only the binary connectives \\(\\land\\) \n and \\(\\lor\\), or else is one of the degenerate cases \\(\\top\\) and \n \\(\\bot\\).\n \u003Cp\u003E\u003C/p\u003E\n It is analogous to the following procedure in ordinary algebra: \n (i) replace subtraction by its definition \\(x - y = x \u002B -y\\) \n and then (ii) systematically push negations down using \n \\(-(x \u002B y) = -x \u002B -y\\), \\(-(xy) = (-x)y\\), \\(-(-x) = x\\).\n \u003Cp\u003E\u003C/p\u003E\u003Ccode\u003Ennf\u003C/code\u003E implements a complete transformation in NNF \n applying \u003Ca href=\u0022/Calcolemus/reference/calcolemus-prop.html\u0022\u003EProp.psimplify\u003C/a\u003E first \n and then \u003Ca href=\u0022/Calcolemus/reference/calcolemus-prop.html\u0022\u003EProp.nnf_naive\u003C/a\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#nenf_naive","title":"Prop.nenf_naive","content":"Prop.nenf_naive \nnenf_naive \n\n Changes a formula into negation normal form but keeps logical \n equivalences and \u003Ccode\u003EFalse\u003C/code\u003E and \u003Ccode\u003ETrue\u003C/code\u003E mixed with other \n formulas.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#nenf","title":"Prop.nenf","content":"Prop.nenf \nnenf \n\n Changes a formula into negation normal form but keeps logical \n equivalences.\n  \n\n Applies \u003Ca href=\u0022/Calcolemus/reference/calcolemus-prop.html\u0022\u003EProp.psimplify\u003C/a\u003E first \n and then \u003Ca href=\u0022/Calcolemus/reference/calcolemus-prop.html\u0022\u003EProp.nenf_naive\u003C/a\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#list_conj","title":"Prop.list_conj","content":"Prop.list_conj \nlist_conj \n\n Constructs a conjunction from a list of formulas.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#list_disj","title":"Prop.list_disj","content":"Prop.list_disj \nlist_disj \n\n Constructs a disjunction from a list of formulas.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#mk_lits","title":"Prop.mk_lits","content":"Prop.mk_lits \nmk_lits \n\n Constructs a conjunction from a list of formulas \u003Ccode\u003Epvs\u003C/code\u003E and their \n negations, according to whether each is satisfied by a valuation \n \u003Ccode\u003Ev\u003C/code\u003E.\n  \n\n As the name suggest, it is intended to be used on literals and \n actually is used just to define \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-prop.html\u0022\u003EProp.dnf_by_truth_tables\u003C/a\u003E"},{"uri":"/Calcolemus/reference/calcolemus-prop.html#allsatvaluations","title":"Prop.allsatvaluations","content":"Prop.allsatvaluations \nallsatvaluations \n\n A close analogue of \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-prop.html\u0022\u003EProp.onallvaluations\u003C/a\u003E that collects \n into a list the valuations for which \u003Ccode\u003Esubfn\u003C/code\u003E holds.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#dnf_by_truth_tables","title":"Prop.dnf_by_truth_tables","content":"Prop.dnf_by_truth_tables \ndnf_by_truth_tables \n\n Transforms a formula \u003Ccode\u003Efm\u003C/code\u003E in disjunctive normal form by the \n valuations satisfying it.\n  \n\n See \u003Ca href=\u0022/Calcolemus/reference/calcolemus-prop.html\u0022\u003EProp.dnf\u003C/a\u003E for a definition of DNF.\n \u003Cp\u003E\u003C/p\u003E\u003Ccode\u003Ednf_by_truth_tables\u003C/code\u003E, from all valuations satisfying the formula, \n generates an equivalent that is the disjunction of the conjunctions of \n the atoms that in each evaluation are mapped to true or their negations \n if they\u0027re mapped to false. Thus, it is based on the same semantic \n process of truth-tables.\n \u003Cp\u003E\u003C/p\u003E\n Note also that since it is based on truth-tables (or more precisely \n on valuations), it generates disjunctions in which each conjunct \n contains every atoms of the original formula, while other dnf functions \n generate more cleaner results.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#distrib_naive","title":"Prop.distrib_naive","content":"Prop.distrib_naive \ndistrib_naive \n\n Applies the distributive laws of \u003Ccode\u003E/\\\u003C/code\u003E and \u003Ccode\u003E\\/\u003C/code\u003E to the input \n formula \u003Ccode\u003Efm\u003C/code\u003E, assuming that its immediate subformulas are in DNF.\n  \n\n The distributive laws are the following:\n \u003Cul\u003E\n  \u003Cli\u003E\n    \u003Cc\u003Ep /\\ (q \\/ r) \u0026lt;=\u0026gt; p /\\ q \\/ p /\\ r\u003C/c\u003E\n  \u003C/li\u003E\n  \u003Cli\u003E\n    \u003Cc\u003E(p \\/ q) /\\ r \u0026lt;=\u0026gt; p /\\ r \\/ q /\\ r\u003C/c\u003E.\u003C/li\u003E\n\u003C/ul\u003E\n Analogous to the following in algebra:\n \u003Cul\u003E\n  \u003Cli\u003E\n    \u003Cc\u003Ex(y \u002B z) = xy \u002B xz\u003C/c\u003E\n  \u003C/li\u003E\n  \u003Cli\u003E\n    \u003Cc\u003E(x \u002B y)z = xz \u002B yz\u003C/c\u003E.\u003C/li\u003E\n\u003C/ul\u003E"},{"uri":"/Calcolemus/reference/calcolemus-prop.html#rawdnf","title":"Prop.rawdnf","content":"Prop.rawdnf \nrawdnf \n\n Transforms an NNF formula in a raw disjunctive normal form.\n  \n\n It is raw because:\n \u003Col\u003E\n  \u003Cli\u003Eit requires the input formula being in NNF;\u003C/li\u003E\n  \u003Cli\u003E\n it\u0027s  hard to read due to mixed associations in iterated conjunctions \n and disjunctions enclosed in parentheses. E.g. \n \u003Cc\u003E(p /\\ q \\/ p /\\ r) \\/ s\u003C/c\u003E instead of \u003Cc\u003Ep /\\ q \\/ p /\\ r \\/ s\u003C/c\u003E;\n \u003C/li\u003E\n  \u003Cli\u003Eit can contain redundant disjuncts equivalent to \u003Cc\u003EFalse\u003C/c\u003E.\u003C/li\u003E\n\u003C/ol\u003E"},{"uri":"/Calcolemus/reference/calcolemus-prop.html#distrib","title":"Prop.distrib","content":"Prop.distrib \ndistrib \n\n Takes two sets of sets and returns the set of the unions of each set in \n the first with sets in the second.\n  \n\n It is used to obtain the distributive laws of \u003Ccode\u003E/\\\u003C/code\u003E and  \n \u003Ccode\u003E\\/\u003C/code\u003E (see \u003Ca href=\u0022/Calcolemus/reference/calcolemus-prop.html\u0022\u003EProp.distrib_naive\u003C/a\u003E) in \n the context of a set of sets representation of dnf (see \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-prop.html\u0022\u003EProp.purednf\u003C/a\u003E)\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#purednf","title":"Prop.purednf","content":"Prop.purednf \npurednf \n\n Transform a formula already in NNF in DNF with a set of sets \n representation form as output (with possible superfluous and subsumed \n disjuncts in the result).\n  \n\n The resulting global set represents the disjunction and the \n subsets the conjunctions: e.g. the set of sets representation of\n \u003Ccode\u003Ep /\\ q \\/ ~ p /\\ r\u003C/code\u003E is \u003Ccode\u003E[[p; q]; [~ p; r]]\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#trivial","title":"Prop.trivial","content":"Prop.trivial \ntrivial \n\n Check if there are complementary literals of the form \u003Ccode\u003Ep\u003C/code\u003E and \n \u003Ccode\u003E~ p\u003C/code\u003E in a list of formulas.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#simpdnf","title":"Prop.simpdnf","content":"Prop.simpdnf \nsimpdnf \n\n Transforms any kind of formula in disjunctive normal form \n returning a set of set representation.\n  \n\n It exploits the list of list representation filtering out trivial \n complementary literals and subsumed ones (with subsumption checking, \n done very naively: quadratic).\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#dnf","title":"Prop.dnf","content":"Prop.dnf \ndnf \n\n Transforms any kind of formula in disjunctive normal form.\n  \n\n A formula is in disjunctive normal form (DNF) if it is an iterated \n disjunction of conjunctions of litterals. \n \u003Cp\u003E\u003C/p\u003E\n It is analogous to a fully expanded \u003Cem\u003Esum of products\u003C/em\u003E expression \n like \\(x^3 \u002B x^2 y \u002B xy \u002B z\\) in algebra.\n \u003Cp\u003E\u003C/p\u003E\n It is not canonical since for example \n \u003Ccode\u003Ep /\\ ~q /\\ r \\/ p /\\ q /\\ ~r \\/ p /\\ q /\\ r\u003C/code\u003E and \n \u003Ccode\u003Ep /\\ q \\/ p /\\ r\u003C/code\u003E are both equivalent DNF.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#purecnf","title":"Prop.purecnf","content":"Prop.purecnf \npurecnf \n\n Transforms any kind of input formulas in conjunctive normal form with a \n set of sets representation form as output, but keeps possible \n superfluous and subsumed conjuncts.\n  \n\n In the cnf context the outer set represents the iterated conjunction \n and the subsets the disjunctions. Thus, \u003Ccode\u003E[[p; q]; [~ p; r]]\u003C/code\u003E \n represents \u003Ccode\u003Ep \\/ q /\\ ~ p \\/ r\u003C/code\u003E"},{"uri":"/Calcolemus/reference/calcolemus-prop.html#simpcnf","title":"Prop.simpcnf","content":"Prop.simpcnf \nsimpcnf \n\n Transforms any kind of input formulas in conjunctive normal form with a \n set of sets representation form as output.\n  \n\n It exploits the list of list representation filtering out trivial \n complementary literals and subsumed ones.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop.html#cnf","title":"Prop.cnf","content":"Prop.cnf \ncnf \n\n Transforms any kind of input formulas in conjunctive normal.\n  \n\n A formula is in conjunctive normal form (CNF) if it is an iterated \n conjunction of disjunctions of litterals. \n \u003Cp\u003E\u003C/p\u003E\n It is analogous to a fully factorized \u003Cem\u003Eproduct of sums\u003C/em\u003E \n expression like \\((x \u002B 1)(y \u002B 2)(z \u002B 3)\\) in algebra.\n "},{"uri":"/Calcolemus/reference/calcolemus-prop-prop.html","title":"prop","content":"prop \n\n Type of propositional variables.\n  \nprop.P \nP"},{"uri":"/Calcolemus/reference/calcolemus-prop-prop.html#P","title":"prop.P","content":"prop.P \nP \n\n Propositional variable.\n "},{"uri":"/Calcolemus/reference/calcolemus-propexamples.html","title":"Propexamples","content":"Propexamples \n\n Some propositional formulas to test, and functions to generate classes.\n  \n\n This module, while showing some applications of propositional \n logic, is used above all to generate interesting classes of problems in \n order to have a stock of non-trivial formulas on which to test the \n efficiency of propositional logic algorithms.\n  \nPropexamples.ramsey \nramsey \nPropexamples.halfsum \nhalfsum \nPropexamples.halfcarry \nhalfcarry \nPropexamples.ha \nha \nPropexamples.carry \ncarry \nPropexamples.sum \nsum \nPropexamples.fa \nfa \nPropexamples.conjoin \nconjoin \nPropexamples.ripplecarry \nripplecarry \nPropexamples.mk_index \nmk_index \nPropexamples.mk_index2 \nmk_index2 \nPropexamples.ripplecarry0 \nripplecarry0 \nPropexamples.ripplecarry1 \nripplecarry1 \nPropexamples.mux \nmux \nPropexamples.offset \noffset \nPropexamples.carryselect \ncarryselect \nPropexamples.mk_adder_test \nmk_adder_test \nPropexamples.rippleshift \nrippleshift \nPropexamples.multiplier \nmultiplier \nPropexamples.bitlength \nbitlength \nPropexamples.bit \nbit \nPropexamples.congruent_to \ncongruent_to \nPropexamples.prime \nprime"},{"uri":"/Calcolemus/reference/calcolemus-propexamples.html#ramsey","title":"Propexamples.ramsey","content":"Propexamples.ramsey \nramsey \n\n Generates an assertion equivalent to R(\u003Ccode\u003Es\u003C/code\u003E,\u003Ccode\u003Et\u003C/code\u003E) \u003C= \n \u003Ccode\u003En\u003C/code\u003E for the Ramsey number R(\u003Ccode\u003Es\u003C/code\u003E,\u003Ccode\u003Et\u003C/code\u003E).\n  \n\n In terms of graph theory, the ramsey number R(\u003Ccode\u003Es\u003C/code\u003E,\u003Ccode\u003Et\u003C/code\u003E) is the \n minimum number x such that all graphs of x vertices have a completely \n connected subgraph of size \u003Ccode\u003Es\u003C/code\u003E or a completely disconnected \n subgraph of size \u003Ccode\u003Et\u003C/code\u003E. The Ramsey\u0027s theorem proves that for every \n pair of \\(s,t \\in \\mathbb{N}\\) such a number exists.\n "},{"uri":"/Calcolemus/reference/calcolemus-propexamples.html#halfsum","title":"Propexamples.halfsum","content":"Propexamples.halfsum \nhalfsum \n\n Sum of an half adder.\n \u003Cbr /\u003E\u003Ccode\u003Ex \u0026lt;=\u0026gt; ~ y\u003C/code\u003E.\n  \n\n The truth-value of the generated propositional formula corresponds to \n the sum of an half adder of two one-bit-numbers \u003Ccode\u003Ex\u003C/code\u003E and \u003Ccode\u003Ey\u003C/code\u003E \n also represented as prop formulas. In this context the truth-values \n \u003Ccode\u003Efalse\u003C/code\u003E and \u003Ccode\u003Etrue\u003C/code\u003E should be read as the two digits of the \n binary system: \u003Ccode\u003E0\u003C/code\u003E and \u003Ccode\u003E1\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-propexamples.html#halfcarry","title":"Propexamples.halfcarry","content":"Propexamples.halfcarry \nhalfcarry \n\n Carry of an half adder.\n \u003Cbr /\u003E\u003Ccode\u003Ex /\\ y\u003C/code\u003E.\n  \n\n The truth-value of the generated propositional formula corresponds to \n the carry of an half adder of two one-bit-numbers \u003Ccode\u003Ex\u003C/code\u003E and \u003Ccode\u003Ey\u003C/code\u003E \n also represented as prop formulas. In this context the truth-values \n \u003Ccode\u003Efalse\u003C/code\u003E and \u003Ccode\u003Etrue\u003C/code\u003E should be read as the two digits of the \n binary system: \u003Ccode\u003E0\u003C/code\u003E and \u003Ccode\u003E1\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-propexamples.html#ha","title":"Propexamples.ha","content":"Propexamples.ha \nha \n\n Half adder function.\n \u003Cbr /\u003E\u003Ccode\u003E(s \u0026lt;=\u0026gt; x \u0026lt;=\u0026gt; ~y) /\\ (c \u0026lt;=\u0026gt; x /\\ y)\u003C/code\u003E.\n  \n\n An half adder calculates the sum and carry for only two \n one-bit-numbers.\n \u003Cp\u003E\u003C/p\u003E\u003Ccode\u003Eha\u003C/code\u003E generates a propositional formula that is true in those \n valuations in which \u003Ccode\u003Es\u003C/code\u003E and \u003Ccode\u003Ec\u003C/code\u003E are, respectively, the sum \n and carry calculated by an half-adder for the sum of \u003Ccode\u003Ex\u003C/code\u003E and \n \u003Ccode\u003Ey\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-propexamples.html#carry","title":"Propexamples.carry","content":"Propexamples.carry \ncarry \n\n Carry of a full adder.\n \u003Cbr /\u003E\u003Ccode\u003E(x /\\ y) \\/ ((x \\/ y) /\\ z)\u003C/code\u003E.\n  \n\n The truth-value of the generated propositional formula corresponds to \n the carry of a full adder of two one-bit-numbers \u003Ccode\u003Ex\u003C/code\u003E and \u003Ccode\u003Ey\u003C/code\u003E \n plus a carry \u003Ccode\u003Ez\u003C/code\u003E from a previous sum also represented as prop \n formulas. In this context the truth-values \u003Ccode\u003Efalse\u003C/code\u003E and \u003Ccode\u003Etrue\u003C/code\u003E \n should be read as the two digits of the binary system: \u003Ccode\u003E0\u003C/code\u003E and \n \u003Ccode\u003E1\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-propexamples.html#sum","title":"Propexamples.sum","content":"Propexamples.sum \nsum \n\n Sum of a full adder.\n \u003Cbr /\u003E\u003Ccode\u003E(x \u0026lt;=\u0026gt; ~ y) \u0026lt;=\u0026gt; ~ z\u003C/code\u003E.\n  \n\n The truth-value of the generated propositional formula corresponds to \n the sum of a full adder of two one-bit-numbers \u003Ccode\u003Ex\u003C/code\u003E and \u003Ccode\u003Ey\u003C/code\u003E \n plus a carry \u003Ccode\u003Ez\u003C/code\u003E from a previous sum also represented as prop \n formulas. In this context the truth-values \u003Ccode\u003Efalse\u003C/code\u003E and \u003Ccode\u003Etrue\u003C/code\u003E \n should be read as the two digits of the binary system: \u003Ccode\u003E0\u003C/code\u003E and \n \u003Ccode\u003E1\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-propexamples.html#fa","title":"Propexamples.fa","content":"Propexamples.fa \nfa \n\n Full adder function.\n \u003Cbr /\u003E\u003Ccode\u003E(s \u0026lt;=\u0026gt; (x \u0026lt;=\u0026gt; ~y) \u0026lt;=\u0026gt; ~z) /\\ (c \u0026lt;=\u0026gt; x /\\ y \\/ (x \\/ y) /\\ z)\u003C/code\u003E \n\n A full adder is a one-bit adder that adds three one-bit-numbers: two \n operands \u003Ccode\u003Ex\u003C/code\u003E and \u003Ccode\u003Ey\u003C/code\u003E plus \u003Ccode\u003Ez\u003C/code\u003E that represent the \n carry from a previous sum.\n \u003Cp\u003E\u003C/p\u003E\u003Ccode\u003Efa\u003C/code\u003E generates a propositional formula that is true in those \n valuations in which \u003Ccode\u003Es\u003C/code\u003E and \u003Ccode\u003Ec\u003C/code\u003E are, respectively, the sum \n and carry calculated by a full-adder for the sum of \u003Ccode\u003Ex\u003C/code\u003E and \n \u003Ccode\u003Ey\u003C/code\u003E plus the carry \u003Ccode\u003Ez\u003C/code\u003E for a previous sum.\n "},{"uri":"/Calcolemus/reference/calcolemus-propexamples.html#conjoin","title":"Propexamples.conjoin","content":"Propexamples.conjoin \nconjoin \n\n Constructs a conjunction of the formulas obtained by applying a \n function (from indexes to formulas) to the elements of a list of \n indexes.\n  \n\n Its intended use, in our context, is to put multiple 1-bit adders \n together into an n-bit adder. Indexes in this case point to the \n n-bit positions of the two n-bit numbers to be added. For example, \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-propexamples.html\u0022\u003EPropexamples.ripplecarry\u003C/a\u003E use this \n function to \u0027conjoin\u0027 n \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-propexamples.html\u0022\u003EPropexamples.fa\u003C/a\u003E\u0027s in order to obtain an \n n-bit adder.\n "},{"uri":"/Calcolemus/reference/calcolemus-propexamples.html#ripplecarry","title":"Propexamples.ripplecarry","content":"Propexamples.ripplecarry \nripplecarry \n\n Ripple carry adder with carry c(0) propagated in and c(n) out.\n \u003Cbr /\u003E\u003Ccode\u003E(s_0 \u0026lt;=\u0026gt; (x_0 \u0026lt;=\u0026gt; ~y_0) \u0026lt;=\u0026gt; ~c_0) /\\ (c_1 \u0026lt;=\u0026gt; x_0 /\\ y_0 \\/ (x_0 \\/ y_0) /\\ c_0) /\\ \n ... /\\ \n (s_n \u0026lt;=\u0026gt; (x_n \u0026lt;=\u0026gt; ~y_n) \u0026lt;=\u0026gt; ~c_n) /\\ (c_(n\u002B1) \u0026lt;=\u0026gt; x_n /\\ y_n \\/ (x_n \\/ y_n) /\\ c_n)\u003C/code\u003E.\n  \n\n Conjoins (see \u003Ca href=\u0022/Calcolemus/reference/calcolemus-propexamples.html\u0022\u003EPropexamples.conjoin\u003C/a\u003E) \n \u003Ccode\u003En\u003C/code\u003E one-bit full adders to obtain an \u003Ccode\u003En\u003C/code\u003E-bit adder.\n \u003Cp\u003E\u003C/p\u003E\n The generated propositional formula represents the correct relations \n between the input and output of a ripple carry adder, just as \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-propexamples.html\u0022\u003EPropexamples.ha\u003C/a\u003E and \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-propexamples.html\u0022\u003EPropexamples.fa\u003C/a\u003E, respectively, \n represent the correct relations between input and output for an \n half-adder and a full-adder.\n \u003Cp\u003E\u003C/p\u003E\n It expects the user to supply functions \u003Ccode\u003Ex\u003C/code\u003E, \u003Ccode\u003Ey\u003C/code\u003E, \u003Ccode\u003Eout\u003C/code\u003E \n and \u003Ccode\u003Ec\u003C/code\u003E that, when given an index, generates an appropriate new \n variable. \u003Ca href=\u0022/Calcolemus/reference/calcolemus-propexamples.html#mk_index\u0022\u003EPropexamples.mk_index\u003C/a\u003E is \n supplied to generate such functions.\n "},{"uri":"/Calcolemus/reference/calcolemus-propexamples.html#mk_index","title":"Propexamples.mk_index","content":"Propexamples.mk_index \nmk_index \n\n Returns indexed propositional variables.\n  \n\n Given a string \u003Ccode\u003E\u0026quot;x\u0026quot;\u003C/code\u003E and an integer \u003Ccode\u003Ei\u003C/code\u003E, generates a \n propositional variable \u003Ccode\u003EAtom (P x_i)\u003C/code\u003E.\n \u003Cp\u003E\u003C/p\u003E\n Its intended use is to generate input for the ripplecarry functions: \n partially applying \u003Ccode\u003Emk_index\u003C/code\u003E, just to the first string argument, \n generates the type of functions (from integers to propositional \n variables) expected by ripplecarry functions.\n "},{"uri":"/Calcolemus/reference/calcolemus-propexamples.html#mk_index2","title":"Propexamples.mk_index2","content":"Propexamples.mk_index2 \nmk_index2 \n\n Returns double indexed propositional variables.\n  \n\n Similar to \u003Ca href=\u0022/Calcolemus/reference/calcolemus-propexamples.html#mk_index\u0022\u003EPropexamples.mk_index\u003C/a\u003E\u003Cp\u003E\u003C/p\u003E\n Given a string \u003Ccode\u003E\u0026quot;x\u0026quot;\u003C/code\u003E and indexes \u003Ccode\u003Ei\u003C/code\u003E and \u003Ccode\u003Ej\u003C/code\u003E, it \n generates a propositional variable \u003Ccode\u003EAtom (P x_i_j)\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-propexamples.html#ripplecarry0","title":"Propexamples.ripplecarry0","content":"Propexamples.ripplecarry0 \nripplecarry0 \n\n Ripple carry adder with carry c(0) forced to 0.\n \u003Cbr /\u003E\u003Ccode\u003E((s_0 \u0026lt;=\u0026gt; x_0 \u0026lt;=\u0026gt; ~y_0) /\\ (c_1 \u0026lt;=\u0026gt; x_0 /\\ y_0)) /\\ ... /\\ (s_n \u0026lt;=\u0026gt; (x_n \u0026lt;=\u0026gt; ~y_n) \u0026lt;=\u0026gt; ~c_n) /\\ (c_(n\u002B1) \u0026lt;=\u0026gt; x_n /\\ y_n \\/ (x_n \\/ y_n) /\\ c_n)\u003C/code\u003E \n\n It can be used when we are not interested in a carry in at the low end.\n "},{"uri":"/Calcolemus/reference/calcolemus-propexamples.html#ripplecarry1","title":"Propexamples.ripplecarry1","content":"Propexamples.ripplecarry1 \nripplecarry1 \n\n Ripple carry adder with carry c(0) forced to 1.\n \u003Cbr /\u003E\u003Ccode\u003E((s_0 \u0026lt;=\u0026gt; ~(x_0 \u0026lt;=\u0026gt; ~y_0)) /\\ (c_1 \u0026lt;=\u0026gt; x_0 /\\ y_0 \\/ x_0 \\/ y_0)) /\\ ... /\\(s_n \u0026lt;=\u0026gt; (x_n \u0026lt;=\u0026gt; ~y_n) \u0026lt;=\u0026gt; ~c_n) /\\ (c_(n\u002B1) \u0026lt;=\u0026gt; x_n /\\ y_n \\/ (x_n \\/ y_n) /\\ c_n)\u003C/code\u003E \n\n Together with \u003Ca href=\u0022/Calcolemus/reference/calcolemus-propexamples.html\u0022\u003EPropexamples.ripplecarry0\u003C/a\u003E \n is used to define \u003Ca href=\u0022/Calcolemus/reference/calcolemus-propexamples.html\u0022\u003EPropexamples.carryselect\u003C/a\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-propexamples.html#mux","title":"Propexamples.mux","content":"Propexamples.mux \nmux \n\n Multiplexer.\n \u003Cbr /\u003E\u003Ccode\u003E~sel /\\ in0 \\/ sel /\\ in1\u003C/code\u003E \n\n Selects between two alternatives: if \u003Ccode\u003Esel\u003C/code\u003E selects \u003Ccode\u003Ein1\u003C/code\u003E, \n otherwise selects \u003Ccode\u003Ein0\u003C/code\u003E.\n \u003Cp\u003E\u003C/p\u003E\n It is used in the the carry-select adder\u0027s implementation to select \n between carry-in of 0 or 1 when we do carry propagation.\n "},{"uri":"/Calcolemus/reference/calcolemus-propexamples.html#offset","title":"Propexamples.offset","content":"Propexamples.offset \noffset \n\n Offsets the indices in an array of bits.\n  \n\n It is used to define the carry-select adder.\n "},{"uri":"/Calcolemus/reference/calcolemus-propexamples.html#carryselect","title":"Propexamples.carryselect","content":"Propexamples.carryselect \ncarryselect \nCarry select adder \n\n The carry select adder is a more efficient adder than the ripplecarry, \n in which the \u003Ccode\u003En\u003C/code\u003E-bit inputs are split into several blocks of \n \u003Ccode\u003Ek\u003C/code\u003E, and corresponding \u003Ccode\u003Ek\u003C/code\u003E-bit blocks are added twice, once \n assuming a carry-in of 0 and once assuming a carry-in of 1.\n \u003Cp\u003E\u003C/p\u003E\n Here it is used as a comparison term for use in \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-propexamples.html#mk_adder_test\u0022\u003EPropexamples.mk_adder_test\u003C/a\u003E  \n which demonstrates how it is possible to verify that the efficiency \n optimization introduced has not made any logical change to the function \n computed (one of the key problems in the design and verification of \n computer systems).\n "},{"uri":"/Calcolemus/reference/calcolemus-propexamples.html#mk_adder_test","title":"Propexamples.mk_adder_test","content":"Propexamples.mk_adder_test \nmk_adder_test \n\n Tests equivalence of ripple carry and carry select.\n  \n\n Generates propositions that state the equivalence of various \n ripplecarry and carryselect circuits based on the input \u003Ccode\u003En\u003C/code\u003E \n (number of bit to be added) and \u003Ccode\u003Ek\u003C/code\u003E (number of blocks in the \n carryselect circuit).\n \u003Cp\u003E\u003C/p\u003E\n If the proposition generated is a tautology, the equivalence between \n the two circuit is proved.\n "},{"uri":"/Calcolemus/reference/calcolemus-propexamples.html#rippleshift","title":"Propexamples.rippleshift","content":"Propexamples.rippleshift \nrippleshift \n\n ripplecarry0 that, in the result, separates the less significant \n bit \u003Ccode\u003Ez\u003C/code\u003E from the other bits \u003Ccode\u003Ew\u003C/code\u003E.\n \u003Cbr /\u003E\u003Ccode\u003E((z \u0026lt;=\u0026gt; u_0 \u0026lt;=\u0026gt; ~v_0) /\\ (c_2 \u0026lt;=\u0026gt; u_0 /\\ v_0)) /\\ (w_0 \u0026lt;=\u0026gt; (u_1 \u0026lt;=\u0026gt; ~v_1) \u0026lt;=\u0026gt; ~c_2) /\\ (w_1 \u0026lt;=\u0026gt; u_1 /\\ v_1 \\/ (u_1 \\/ v_1) /\\ c_2)\u003C/code\u003E"},{"uri":"/Calcolemus/reference/calcolemus-propexamples.html#multiplier","title":"Propexamples.multiplier","content":"Propexamples.multiplier \nmultiplier \n\n Naive multiplier based on repeated ripple carry. \n "},{"uri":"/Calcolemus/reference/calcolemus-propexamples.html#bitlength","title":"Propexamples.bitlength","content":"Propexamples.bitlength \nbitlength \n\n Returns the number of bit needed to represent \u003Ccode\u003Ex\u003C/code\u003E in binary \n notation.\n "},{"uri":"/Calcolemus/reference/calcolemus-propexamples.html#bit","title":"Propexamples.bit","content":"Propexamples.bit \nbit \n\n Extract the \u003Ccode\u003En\u003C/code\u003Eth bit (as a boolean value) of a nonnegative \n integer \u003Ccode\u003Ex\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-propexamples.html#congruent_to","title":"Propexamples.congruent_to","content":"Propexamples.congruent_to \ncongruent_to \n\n Produces a propositional formula asserting that the atoms \u003Ccode\u003Ex\u003C/code\u003E(i) \n encode the bits of a value \u003Ccode\u003Em\u003C/code\u003E, at least modulo 2^\u003Ccode\u003En\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-propexamples.html#prime","title":"Propexamples.prime","content":"Propexamples.prime \nprime \n\n Applied to a positive integer \u003Ccode\u003Ep\u003C/code\u003E generates a propositional \n formula that is a tautology precisely if \u003Ccode\u003Ep\u003C/code\u003E is prime.\n "},{"uri":"/Calcolemus/reference/calcolemus-qelim.html","title":"Qelim","content":"Qelim \n\n Quantifier elimination basics.\n  \nQelim.qelim \nqelim \nQelim.lift_qelim \nlift_qelim \nQelim.cnnf \ncnnf \nQelim.lfn_dlo \nlfn_dlo \nQelim.dlobasic \ndlobasic \nQelim.afn_dlo \nafn_dlo \nQelim.quelim_dlo \nquelim_dlo"},{"uri":"/Calcolemus/reference/calcolemus-qelim.html#qelim","title":"Qelim.qelim","content":"Qelim.qelim \nqelim \n"},{"uri":"/Calcolemus/reference/calcolemus-qelim.html#lift_qelim","title":"Qelim.lift_qelim","content":"Qelim.lift_qelim \nlift_qelim \n"},{"uri":"/Calcolemus/reference/calcolemus-qelim.html#cnnf","title":"Qelim.cnnf","content":"Qelim.cnnf \ncnnf \n"},{"uri":"/Calcolemus/reference/calcolemus-qelim.html#lfn_dlo","title":"Qelim.lfn_dlo","content":"Qelim.lfn_dlo \nlfn_dlo \n"},{"uri":"/Calcolemus/reference/calcolemus-qelim.html#dlobasic","title":"Qelim.dlobasic","content":"Qelim.dlobasic \ndlobasic \n"},{"uri":"/Calcolemus/reference/calcolemus-qelim.html#afn_dlo","title":"Qelim.afn_dlo","content":"Qelim.afn_dlo \nafn_dlo \n"},{"uri":"/Calcolemus/reference/calcolemus-qelim.html#quelim_dlo","title":"Qelim.quelim_dlo","content":"Qelim.quelim_dlo \nquelim_dlo \n"},{"uri":"/Calcolemus/reference/calcolemus-real.html","title":"Real","content":"Real \n\n Real quantifier elimination.\n  \nReal.poly_diffn \npoly_diffn \nReal.poly_diff \npoly_diff \nReal.rel_signs \nrel_signs \nReal.testform \ntestform \nReal.inferpsign \ninferpsign \nReal.condense \ncondense \nReal.inferisign \ninferisign \nReal.dedmatrix \ndedmatrix \nReal.pdivide_pos \npdivide_pos \nReal.split_sign \nsplit_sign \nReal.split_trichotomy \nsplit_trichotomy \nReal.casesplit \ncasesplit \nReal.delconst \ndelconst \nReal.matrix \nmatrix \nReal.basic_real_qelim \nbasic_real_qelim \nReal.real_qelim \nreal_qelim \nReal.grpterm \ngrpterm \nReal.grpform \ngrpform \nReal.real_qelim\u0027 \nreal_qelim\u0027"},{"uri":"/Calcolemus/reference/calcolemus-real.html#poly_diffn","title":"Real.poly_diffn","content":"Real.poly_diffn \npoly_diffn \n"},{"uri":"/Calcolemus/reference/calcolemus-real.html#poly_diff","title":"Real.poly_diff","content":"Real.poly_diff \npoly_diff \n"},{"uri":"/Calcolemus/reference/calcolemus-real.html#rel_signs","title":"Real.rel_signs","content":"Real.rel_signs \nrel_signs \n"},{"uri":"/Calcolemus/reference/calcolemus-real.html#testform","title":"Real.testform","content":"Real.testform \ntestform \n"},{"uri":"/Calcolemus/reference/calcolemus-real.html#inferpsign","title":"Real.inferpsign","content":"Real.inferpsign \ninferpsign \n"},{"uri":"/Calcolemus/reference/calcolemus-real.html#condense","title":"Real.condense","content":"Real.condense \ncondense \n"},{"uri":"/Calcolemus/reference/calcolemus-real.html#inferisign","title":"Real.inferisign","content":"Real.inferisign \ninferisign \n"},{"uri":"/Calcolemus/reference/calcolemus-real.html#dedmatrix","title":"Real.dedmatrix","content":"Real.dedmatrix \ndedmatrix \n"},{"uri":"/Calcolemus/reference/calcolemus-real.html#pdivide_pos","title":"Real.pdivide_pos","content":"Real.pdivide_pos \npdivide_pos \n"},{"uri":"/Calcolemus/reference/calcolemus-real.html#split_sign","title":"Real.split_sign","content":"Real.split_sign \nsplit_sign \n"},{"uri":"/Calcolemus/reference/calcolemus-real.html#split_trichotomy","title":"Real.split_trichotomy","content":"Real.split_trichotomy \nsplit_trichotomy \n"},{"uri":"/Calcolemus/reference/calcolemus-real.html#casesplit","title":"Real.casesplit","content":"Real.casesplit \ncasesplit \n"},{"uri":"/Calcolemus/reference/calcolemus-real.html#delconst","title":"Real.delconst","content":"Real.delconst \ndelconst \n"},{"uri":"/Calcolemus/reference/calcolemus-real.html#matrix","title":"Real.matrix","content":"Real.matrix \nmatrix \n"},{"uri":"/Calcolemus/reference/calcolemus-real.html#basic_real_qelim","title":"Real.basic_real_qelim","content":"Real.basic_real_qelim \nbasic_real_qelim \n"},{"uri":"/Calcolemus/reference/calcolemus-real.html#real_qelim","title":"Real.real_qelim","content":"Real.real_qelim \nreal_qelim \n"},{"uri":"/Calcolemus/reference/calcolemus-real.html#grpterm","title":"Real.grpterm","content":"Real.grpterm \ngrpterm \n"},{"uri":"/Calcolemus/reference/calcolemus-real.html#grpform","title":"Real.grpform","content":"Real.grpform \ngrpform \n"},{"uri":"/Calcolemus/reference/calcolemus-real.html#real_qelim\u0027","title":"Real.real_qelim\u0027","content":"Real.real_qelim\u0027 \nreal_qelim\u0027 \n"},{"uri":"/Calcolemus/reference/calcolemus-resolution.html","title":"Resolution","content":"Resolution \n\n Resolution.\n  \nResolution.barb \nbarb \nResolution.mgu \nmgu \nResolution.unifiable \nunifiable \nResolution.rename \nrename \nResolution.resolvents \nresolvents \nResolution.resolve_clauses \nresolve_clauses \nResolution.resloop001 \nresloop001 \nResolution.pure_resolution001 \npure_resolution001 \nResolution.resolution001 \nresolution001 \nResolution.term_match \nterm_match \nResolution.match_literals \nmatch_literals \nResolution.subsumes_clause \nsubsumes_clause \nResolution.replace \nreplace \nResolution.incorporate \nincorporate \nResolution.resloop002 \nresloop002 \nResolution.pure_resolution002 \npure_resolution002 \nResolution.resolution002 \nresolution002 \nResolution.presolve_clauses \npresolve_clauses \nResolution.presloop \npresloop \nResolution.pure_presolution \npure_presolution \nResolution.presolution \npresolution \nResolution.pure_resolution \npure_resolution \nResolution.resolution003 \nresolution003"},{"uri":"/Calcolemus/reference/calcolemus-resolution.html#barb","title":"Resolution.barb","content":"Resolution.barb \nbarb \n"},{"uri":"/Calcolemus/reference/calcolemus-resolution.html#mgu","title":"Resolution.mgu","content":"Resolution.mgu \nmgu \n"},{"uri":"/Calcolemus/reference/calcolemus-resolution.html#unifiable","title":"Resolution.unifiable","content":"Resolution.unifiable \nunifiable \n"},{"uri":"/Calcolemus/reference/calcolemus-resolution.html#rename","title":"Resolution.rename","content":"Resolution.rename \nrename \n"},{"uri":"/Calcolemus/reference/calcolemus-resolution.html#resolvents","title":"Resolution.resolvents","content":"Resolution.resolvents \nresolvents \n"},{"uri":"/Calcolemus/reference/calcolemus-resolution.html#resolve_clauses","title":"Resolution.resolve_clauses","content":"Resolution.resolve_clauses \nresolve_clauses \n"},{"uri":"/Calcolemus/reference/calcolemus-resolution.html#resloop001","title":"Resolution.resloop001","content":"Resolution.resloop001 \nresloop001 \n"},{"uri":"/Calcolemus/reference/calcolemus-resolution.html#pure_resolution001","title":"Resolution.pure_resolution001","content":"Resolution.pure_resolution001 \npure_resolution001 \n"},{"uri":"/Calcolemus/reference/calcolemus-resolution.html#resolution001","title":"Resolution.resolution001","content":"Resolution.resolution001 \nresolution001 \n"},{"uri":"/Calcolemus/reference/calcolemus-resolution.html#term_match","title":"Resolution.term_match","content":"Resolution.term_match \nterm_match \n"},{"uri":"/Calcolemus/reference/calcolemus-resolution.html#match_literals","title":"Resolution.match_literals","content":"Resolution.match_literals \nmatch_literals \n"},{"uri":"/Calcolemus/reference/calcolemus-resolution.html#subsumes_clause","title":"Resolution.subsumes_clause","content":"Resolution.subsumes_clause \nsubsumes_clause \n"},{"uri":"/Calcolemus/reference/calcolemus-resolution.html#replace","title":"Resolution.replace","content":"Resolution.replace \nreplace \n"},{"uri":"/Calcolemus/reference/calcolemus-resolution.html#incorporate","title":"Resolution.incorporate","content":"Resolution.incorporate \nincorporate \n"},{"uri":"/Calcolemus/reference/calcolemus-resolution.html#resloop002","title":"Resolution.resloop002","content":"Resolution.resloop002 \nresloop002 \n"},{"uri":"/Calcolemus/reference/calcolemus-resolution.html#pure_resolution002","title":"Resolution.pure_resolution002","content":"Resolution.pure_resolution002 \npure_resolution002 \n"},{"uri":"/Calcolemus/reference/calcolemus-resolution.html#resolution002","title":"Resolution.resolution002","content":"Resolution.resolution002 \nresolution002 \n"},{"uri":"/Calcolemus/reference/calcolemus-resolution.html#presolve_clauses","title":"Resolution.presolve_clauses","content":"Resolution.presolve_clauses \npresolve_clauses \n"},{"uri":"/Calcolemus/reference/calcolemus-resolution.html#presloop","title":"Resolution.presloop","content":"Resolution.presloop \npresloop \n"},{"uri":"/Calcolemus/reference/calcolemus-resolution.html#pure_presolution","title":"Resolution.pure_presolution","content":"Resolution.pure_presolution \npure_presolution \n"},{"uri":"/Calcolemus/reference/calcolemus-resolution.html#presolution","title":"Resolution.presolution","content":"Resolution.presolution \npresolution \n"},{"uri":"/Calcolemus/reference/calcolemus-resolution.html#pure_resolution","title":"Resolution.pure_resolution","content":"Resolution.pure_resolution \npure_resolution \n"},{"uri":"/Calcolemus/reference/calcolemus-resolution.html#resolution003","title":"Resolution.resolution003","content":"Resolution.resolution003 \nresolution003 \n"},{"uri":"/Calcolemus/reference/calcolemus-rewrite.html","title":"Rewrite","content":"Rewrite \n\n Rewriting.\n  \nRewrite.rewrite1 \nrewrite1 \nRewrite.rewrite \nrewrite"},{"uri":"/Calcolemus/reference/calcolemus-rewrite.html#rewrite1","title":"Rewrite.rewrite1","content":"Rewrite.rewrite1 \nrewrite1 \n"},{"uri":"/Calcolemus/reference/calcolemus-rewrite.html#rewrite","title":"Rewrite.rewrite","content":"Rewrite.rewrite \nrewrite \n"},{"uri":"/Calcolemus/reference/calcolemus-skolem.html","title":"Skolem","content":"Skolem \n\n Prenex and Skolem normal forms.\n  \nSkolem.simplify1 \nsimplify1 \nSkolem.simplify \nsimplify \nSkolem.nnf \nnnf \nSkolem.pullquants \npullquants \nSkolem.pullq \npullq \nSkolem.prenex \nprenex \nSkolem.pnf \npnf \nSkolem.funcs \nfuncs \nSkolem.functions \nfunctions \nSkolem.skolem \nskolem \nSkolem.skolem2 \nskolem2 \nSkolem.askolemize \naskolemize \nSkolem.specialize \nspecialize \nSkolem.skolemize \nskolemize"},{"uri":"/Calcolemus/reference/calcolemus-skolem.html#simplify1","title":"Skolem.simplify1","content":"Skolem.simplify1 \nsimplify1 \n\n Performs a simplification routine but just at the first level of the input \n formula \u0060fm\u0060. It eliminates the basic propositional constants \u0060False\u0060 and \n \u0060True\u0060 and also the vacuous universal and existential quanti\uFB01ers (those \n applied to variables that does not occur free in the body).\n \n Whenever \u0060False\u0060 and \u0060True\u0060 occur in combination, there is always a a \n tautology justifying the equivalence with a simpler formula, e.g. \u0060False /\\ \n p \u003C=\u003E False\u0060, \u0060True \\/ p \u003C=\u003E p\u0060, \u0060p ==\u003E False \u003C=\u003E ~p\u0060. At he same time, it \n also eliminates double negations \u0060~~p\u0060.\n \n If x not in FV(p) then forall x. p and exists x. p are logically \n equivalent to p.\n \n \u0060simplify1 (parse @\u0022exists x. P(y)\u0022)\u0060 returns \u0060\u003C\u003CP(y)\u003E\u003E\u0060\n \n \u0060simplify1 (parse @\u0022true ==\u003E exists x. P(x)\u0022)\u0060 returns \u0060\u003C\u003Cexists x. P(x)\u003E\u003E\u0060\n"},{"uri":"/Calcolemus/reference/calcolemus-skolem.html#simplify","title":"Skolem.simplify","content":"Skolem.simplify \nsimplify \n\n Performs a simplification routine on the input formula \n \u0060fm\u0060 eliminating the basic propositional constants \u0060False\u0060 and \u0060True\u0060\n and also the vacuous universal and existential quanti\uFB01ers (those \n applied to variables that does not occur free in the body).\n \n Whenever \u0060False\u0060 and \u0060True\u0060 occur in combination, there is always a a \n tautology justifying the equivalence with a simpler formula, e.g. \u0060False /\\ \n p \u003C=\u003E False\u0060, \u0060True \\/ p \u003C=\u003E p\u0060, \u0060p ==\u003E False \u003C=\u003E ~p\u0060. At he same time, it \n also eliminates double negations \u0060~~p\u0060.\n \n If x not in FV(p) then forall x. p and exists x. p are logically \n equivalent to p.\n \n While \u0060simplify1\u0060 performs the transformation just at the first level, \n \u0060simplify\u0060 performs it at every levels in a recursive bottom-up sweep.\n \n \u0060simplify (parse @\u0022true ==\u003E (p \u003C=\u003E (p \u003C=\u003E false))\u0022)\u0060 returns \n \u0060\u003C\u003Cp \u003C=\u003E ~p\u003E\u003E\u0060\n \n \u0060simplify (parse @\u0022exists x y z. P(x) ==\u003E Q(z) ==\u003E false\u0022)\u0060 \n returns \u0060\u003C\u003Cexists x z. P(x) ==\u003E ~Q(z)\u003E\u003E\u0060\n"},{"uri":"/Calcolemus/reference/calcolemus-skolem.html#nnf","title":"Skolem.nnf","content":"Skolem.nnf \nnnf \n\n Transforms the input formula \u0060fm\u0060 in negation normal form.\n \n It eliminates implication and equivalence, and pushes down negations \n through quanti\uFB01ers.\n \n \u0060nnf (parse @\u0022~ exists x. P(x) \u003C=\u003E Q(x)\u0022)\u0060 returns \n \u0060\u003C\u003Cforall x. P(x) /\\ ~Q(x) \\/ ~P(x) /\\ Q(x)\u003E\u003E\u0060\n"},{"uri":"/Calcolemus/reference/calcolemus-skolem.html#pullquants","title":"Skolem.pullquants","content":"Skolem.pullquants \npullquants \n\n It pulls out quantifiers.\n"},{"uri":"/Calcolemus/reference/calcolemus-skolem.html#pullq","title":"Skolem.pullq","content":"Skolem.pullq \npullq \n\n calls the main \u0060pullquants\u0060 functions again on the body to pull up \n further quanti\uFB01ers\n"},{"uri":"/Calcolemus/reference/calcolemus-skolem.html#prenex","title":"Skolem.prenex","content":"Skolem.prenex \nprenex \n\n leaves quanti\uFB01ed formulas alone, and for conjunctions and disjunctions \n recursively prenexes the immediate subformulas and then uses pullquants\n"},{"uri":"/Calcolemus/reference/calcolemus-skolem.html#pnf","title":"Skolem.pnf","content":"Skolem.pnf \npnf \n\n Transforms the input formula \u0060fm\u0060 in prenex normal form and simplifies it.\n \n * simplifies away False, True, vacuous quanti\uFB01cation, etc.;\n * eliminates implication and equivalence, push down negations;\n * pulls out quanti\uFB01ers.\n \n \u0060pnf (parse @\u0022(forall x. P(x) \\/ R(y)) ==\u003E exists y z. Q(y) \\/ ~(exists z. P\n (z) /\\ Q(z))\u0022)\u0060 \n returns \u0060\u003C\u003Cexists x. forall z. ~P(x) /\\ ~R(y) \\/ Q(x) \\/ ~P(z) \\/ ~Q(z)\u003E\u003E\u0060\n"},{"uri":"/Calcolemus/reference/calcolemus-skolem.html#funcs","title":"Skolem.funcs","content":"Skolem.funcs \nfuncs \n\n Returns the functions present in the input term \u0060tm\u0060\n \n \u0060funcs (parset @\u0022x \u002B 1\u0022)\u0060 returns \u0060[(\u0022\u002B\u0022, 2); (\u00221\u0022, 0)]\u0060\n"},{"uri":"/Calcolemus/reference/calcolemus-skolem.html#functions","title":"Skolem.functions","content":"Skolem.functions \nfunctions \n\n Returns the functions present in the input formula \u0060fm\u0060\n \n \u0060functions (parse @\u0022x \u002B 1 \u003E 0 /\\ f(z) \u003E g(z,i)\u0022)\u0060\n returns \u0060[(\u0022\u002B\u0022, 2); (\u00220\u0022, 0); (\u00221\u0022, 0); (\u0022f\u0022, 1); (\u0022g\u0022, 2)]\u0060\n \u0060\n"},{"uri":"/Calcolemus/reference/calcolemus-skolem.html#skolem","title":"Skolem.skolem","content":"Skolem.skolem \nskolem \n\n Core Skolemization function specifically intended to be used on NNF \n formulas. \n \n It simply recursively descends the formula, Skolemizing any existential \n formulas and then proceeding to subformulas using \u0060skolem2\u0060 for binary \n connectives.\n"},{"uri":"/Calcolemus/reference/calcolemus-skolem.html#skolem2","title":"Skolem.skolem2","content":"Skolem.skolem2 \nskolem2 \n\n Auxiliary to \u0060skolem\u0060 when dealing with binary connectives. \n It updates the set of functions to avoid with new Skolem functions \n introduced into one formula before tackling the other.\n"},{"uri":"/Calcolemus/reference/calcolemus-skolem.html#askolemize","title":"Skolem.askolemize","content":"Skolem.askolemize \naskolemize \n\n Overall Skolemization function, intended to be used with any type of \n initial fol formula.\n"},{"uri":"/Calcolemus/reference/calcolemus-skolem.html#specialize","title":"Skolem.specialize","content":"Skolem.specialize \nspecialize \n\n Removes all universale quantifiers from the input formula \u0060p\u0060.\n \n \u0060specialize \u003C\u003Cforall x y. P(x) /\\ P(y)\u003E\u003E\u0060 returns \u0060\u003C\u003CP(x) /\\ P(y)\u003E\u003E\u0060\n"},{"uri":"/Calcolemus/reference/calcolemus-skolem.html#skolemize","title":"Skolem.skolemize","content":"Skolem.skolemize \nskolemize \n\n Puts the input formula \u0060fm\u0060 into skolem normal form \n while also removing all universal quantifiers.\n \n It puts the formula in prenex normal form, substitutes existential \n quantifiers with skolem functions and also removes all universal \n quantifiers.\n \n \u0060skolemize (parse @\u0022forall x. exists y. R(x,y)\u0022)\u0060\n returns \u0060\u003C\u003CR(x,f_y(x))\u003E\u003E\u0060\n"},{"uri":"/Calcolemus/reference/calcolemus-skolems.html","title":"Skolems","content":"Skolems \n\n Skolemizing a set of formulas.\n  \nSkolems.rename_term \nrename_term \nSkolems.rename_form \nrename_form \nSkolems.skolems \nskolems \nSkolems.skolemizes \nskolemizes"},{"uri":"/Calcolemus/reference/calcolemus-skolems.html#rename_term","title":"Skolems.rename_term","content":"Skolems.rename_term \nrename_term \n"},{"uri":"/Calcolemus/reference/calcolemus-skolems.html#rename_form","title":"Skolems.rename_form","content":"Skolems.rename_form \nrename_form \n"},{"uri":"/Calcolemus/reference/calcolemus-skolems.html#skolems","title":"Skolems.skolems","content":"Skolems.skolems \nskolems \n"},{"uri":"/Calcolemus/reference/calcolemus-skolems.html#skolemizes","title":"Skolems.skolemizes","content":"Skolems.skolemizes \nskolemizes \n"},{"uri":"/Calcolemus/reference/calcolemus-stal.html","title":"Stal","content":"Stal \n\n Stalmarck method.\n  \nStal.triplicate \ntriplicate \nStal.atom \natom \nStal.align \nalign \nStal.equate2 \nequate2 \nStal.irredundant \nirredundant \nStal.consequences \nconsequences \nStal.triggers \ntriggers \nStal.trigger \ntrigger \nStal.relevance \nrelevance \nStal.equatecons \nequatecons \nStal.zero_saturate \nzero_saturate \nStal.zero_saturate_and_check \nzero_saturate_and_check \nStal.truefalse \ntruefalse \nStal.equateset \nequateset \nStal.inter \ninter \nStal.reverseq \nreverseq \nStal.stal_intersect \nstal_intersect \nStal.saturate \nsaturate \nStal.splits \nsplits \nStal.saturate_upto \nsaturate_upto \nStal.stalmarck \nstalmarck"},{"uri":"/Calcolemus/reference/calcolemus-stal.html#triplicate","title":"Stal.triplicate","content":"Stal.triplicate \ntriplicate \n"},{"uri":"/Calcolemus/reference/calcolemus-stal.html#atom","title":"Stal.atom","content":"Stal.atom \natom \n"},{"uri":"/Calcolemus/reference/calcolemus-stal.html#align","title":"Stal.align","content":"Stal.align \nalign \n"},{"uri":"/Calcolemus/reference/calcolemus-stal.html#equate2","title":"Stal.equate2","content":"Stal.equate2 \nequate2 \n"},{"uri":"/Calcolemus/reference/calcolemus-stal.html#irredundant","title":"Stal.irredundant","content":"Stal.irredundant \nirredundant \n"},{"uri":"/Calcolemus/reference/calcolemus-stal.html#consequences","title":"Stal.consequences","content":"Stal.consequences \nconsequences \n"},{"uri":"/Calcolemus/reference/calcolemus-stal.html#triggers","title":"Stal.triggers","content":"Stal.triggers \ntriggers \n"},{"uri":"/Calcolemus/reference/calcolemus-stal.html#trigger","title":"Stal.trigger","content":"Stal.trigger \ntrigger \n"},{"uri":"/Calcolemus/reference/calcolemus-stal.html#relevance","title":"Stal.relevance","content":"Stal.relevance \nrelevance \n"},{"uri":"/Calcolemus/reference/calcolemus-stal.html#equatecons","title":"Stal.equatecons","content":"Stal.equatecons \nequatecons \n"},{"uri":"/Calcolemus/reference/calcolemus-stal.html#zero_saturate","title":"Stal.zero_saturate","content":"Stal.zero_saturate \nzero_saturate \n"},{"uri":"/Calcolemus/reference/calcolemus-stal.html#zero_saturate_and_check","title":"Stal.zero_saturate_and_check","content":"Stal.zero_saturate_and_check \nzero_saturate_and_check \n"},{"uri":"/Calcolemus/reference/calcolemus-stal.html#truefalse","title":"Stal.truefalse","content":"Stal.truefalse \ntruefalse \n"},{"uri":"/Calcolemus/reference/calcolemus-stal.html#equateset","title":"Stal.equateset","content":"Stal.equateset \nequateset \n"},{"uri":"/Calcolemus/reference/calcolemus-stal.html#inter","title":"Stal.inter","content":"Stal.inter \ninter \n"},{"uri":"/Calcolemus/reference/calcolemus-stal.html#reverseq","title":"Stal.reverseq","content":"Stal.reverseq \nreverseq \n"},{"uri":"/Calcolemus/reference/calcolemus-stal.html#stal_intersect","title":"Stal.stal_intersect","content":"Stal.stal_intersect \nstal_intersect \n"},{"uri":"/Calcolemus/reference/calcolemus-stal.html#saturate","title":"Stal.saturate","content":"Stal.saturate \nsaturate \n"},{"uri":"/Calcolemus/reference/calcolemus-stal.html#splits","title":"Stal.splits","content":"Stal.splits \nsplits \n"},{"uri":"/Calcolemus/reference/calcolemus-stal.html#saturate_upto","title":"Stal.saturate_upto","content":"Stal.saturate_upto \nsaturate_upto \n"},{"uri":"/Calcolemus/reference/calcolemus-stal.html#stalmarck","title":"Stal.stalmarck","content":"Stal.stalmarck \nstalmarck \n"},{"uri":"/Calcolemus/reference/calcolemus-tableaux.html","title":"Tableaux","content":"Tableaux \n\n Tableaux, seen as an optimized version of a Prawitz-like procedure.\n  \nTableaux.unify_literals \nunify_literals \nTableaux.unify_complements \nunify_complements \nTableaux.prawitz_loop \nprawitz_loop \nTableaux.prawitz \nprawitz \nTableaux.tableau \ntableau \nTableaux.deepen \ndeepen \nTableaux.tabrefute \ntabrefute \nTableaux.tab \ntab \nTableaux.splittab \nsplittab"},{"uri":"/Calcolemus/reference/calcolemus-tableaux.html#unify_literals","title":"Tableaux.unify_literals","content":"Tableaux.unify_literals \nunify_literals \nUnifies an input pair of litterals."},{"uri":"/Calcolemus/reference/calcolemus-tableaux.html#unify_complements","title":"Tableaux.unify_complements","content":"Tableaux.unify_complements \nunify_complements \n"},{"uri":"/Calcolemus/reference/calcolemus-tableaux.html#prawitz_loop","title":"Tableaux.prawitz_loop","content":"Tableaux.prawitz_loop \nprawitz_loop \n"},{"uri":"/Calcolemus/reference/calcolemus-tableaux.html#prawitz","title":"Tableaux.prawitz","content":"Tableaux.prawitz \nprawitz \n"},{"uri":"/Calcolemus/reference/calcolemus-tableaux.html#tableau","title":"Tableaux.tableau","content":"Tableaux.tableau \ntableau \n"},{"uri":"/Calcolemus/reference/calcolemus-tableaux.html#deepen","title":"Tableaux.deepen","content":"Tableaux.deepen \ndeepen \n"},{"uri":"/Calcolemus/reference/calcolemus-tableaux.html#tabrefute","title":"Tableaux.tabrefute","content":"Tableaux.tabrefute \ntabrefute \n"},{"uri":"/Calcolemus/reference/calcolemus-tableaux.html#tab","title":"Tableaux.tab","content":"Tableaux.tab \ntab \n"},{"uri":"/Calcolemus/reference/calcolemus-tableaux.html#splittab","title":"Tableaux.splittab","content":"Tableaux.splittab \nsplittab \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html","title":"Tactics","content":"Tactics \n\n Tactics and Mizar-style proofs.\n  \nTactics.goals \ngoals \nTactics.fprint_goal \nfprint_goal \nTactics.print_goal \nprint_goal \nTactics.sprint_goal \nsprint_goal \nTactics.set_goal \nset_goal \nTactics.extract_thm \nextract_thm \nTactics.tac_proof \ntac_proof \nTactics.prove \nprove \nTactics.conj_intro_tac \nconj_intro_tac \nTactics.jmodify \njmodify \nTactics.gen_right_alpha \ngen_right_alpha \nTactics.forall_intro_tac \nforall_intro_tac \nTactics.right_exists \nright_exists \nTactics.exists_intro_tac \nexists_intro_tac \nTactics.imp_intro_tac \nimp_intro_tac \nTactics.assumptate \nassumptate \nTactics.firstassum \nfirstassum \nTactics.using \nusing \nTactics.assumps \nassumps \nTactics.by \nby \nTactics.justify \njustify \nTactics.proof \nproof \nTactics.at \nat \nTactics.once \nonce \nTactics.auto_tac \nauto_tac \nTactics.lemma_tac \nlemma_tac \nTactics.exists_elim_tac \nexists_elim_tac \nTactics.ante_disj \nante_disj \nTactics.disj_elim_tac \ndisj_elim_tac \nTactics.multishunt \nmultishunt \nTactics.assume \nassume \nTactics.note \nnote \nTactics.have \nhave \nTactics.so \nso \nTactics.fix \nfix \nTactics.consider \nconsider \nTactics.take \ntake \nTactics.cases \ncases \nTactics.conclude \nconclude \nTactics.our \nour \nTactics.thesis \nthesis \nTactics.qed \nqed \nTactics.test001 \ntest001 \nTactics.double_th \ndouble_th \nTactics.testcase \ntestcase \nTactics.test002 \ntest002"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#fprint_goal","title":"Tactics.fprint_goal","content":"Tactics.fprint_goal \nfprint_goal \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#print_goal","title":"Tactics.print_goal","content":"Tactics.print_goal \nprint_goal \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#sprint_goal","title":"Tactics.sprint_goal","content":"Tactics.sprint_goal \nsprint_goal \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#set_goal","title":"Tactics.set_goal","content":"Tactics.set_goal \nset_goal \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#extract_thm","title":"Tactics.extract_thm","content":"Tactics.extract_thm \nextract_thm \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#tac_proof","title":"Tactics.tac_proof","content":"Tactics.tac_proof \ntac_proof \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#prove","title":"Tactics.prove","content":"Tactics.prove \nprove \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#conj_intro_tac","title":"Tactics.conj_intro_tac","content":"Tactics.conj_intro_tac \nconj_intro_tac \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#jmodify","title":"Tactics.jmodify","content":"Tactics.jmodify \njmodify \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#gen_right_alpha","title":"Tactics.gen_right_alpha","content":"Tactics.gen_right_alpha \ngen_right_alpha \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#forall_intro_tac","title":"Tactics.forall_intro_tac","content":"Tactics.forall_intro_tac \nforall_intro_tac \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#right_exists","title":"Tactics.right_exists","content":"Tactics.right_exists \nright_exists \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#exists_intro_tac","title":"Tactics.exists_intro_tac","content":"Tactics.exists_intro_tac \nexists_intro_tac \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#imp_intro_tac","title":"Tactics.imp_intro_tac","content":"Tactics.imp_intro_tac \nimp_intro_tac \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#assumptate","title":"Tactics.assumptate","content":"Tactics.assumptate \nassumptate \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#firstassum","title":"Tactics.firstassum","content":"Tactics.firstassum \nfirstassum \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#using","title":"Tactics.using","content":"Tactics.using \nusing \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#assumps","title":"Tactics.assumps","content":"Tactics.assumps \nassumps \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#by","title":"Tactics.by","content":"Tactics.by \nby \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#justify","title":"Tactics.justify","content":"Tactics.justify \njustify \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#proof","title":"Tactics.proof","content":"Tactics.proof \nproof \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#at","title":"Tactics.at","content":"Tactics.at \nat \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#once","title":"Tactics.once","content":"Tactics.once \nonce \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#auto_tac","title":"Tactics.auto_tac","content":"Tactics.auto_tac \nauto_tac \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#lemma_tac","title":"Tactics.lemma_tac","content":"Tactics.lemma_tac \nlemma_tac \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#exists_elim_tac","title":"Tactics.exists_elim_tac","content":"Tactics.exists_elim_tac \nexists_elim_tac \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#ante_disj","title":"Tactics.ante_disj","content":"Tactics.ante_disj \nante_disj \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#disj_elim_tac","title":"Tactics.disj_elim_tac","content":"Tactics.disj_elim_tac \ndisj_elim_tac \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#multishunt","title":"Tactics.multishunt","content":"Tactics.multishunt \nmultishunt \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#assume","title":"Tactics.assume","content":"Tactics.assume \nassume \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#note","title":"Tactics.note","content":"Tactics.note \nnote \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#have","title":"Tactics.have","content":"Tactics.have \nhave \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#so","title":"Tactics.so","content":"Tactics.so \nso \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#fix","title":"Tactics.fix","content":"Tactics.fix \nfix \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#consider","title":"Tactics.consider","content":"Tactics.consider \nconsider \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#take","title":"Tactics.take","content":"Tactics.take \ntake \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#cases","title":"Tactics.cases","content":"Tactics.cases \ncases \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#conclude","title":"Tactics.conclude","content":"Tactics.conclude \nconclude \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#our","title":"Tactics.our","content":"Tactics.our \nour \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#thesis","title":"Tactics.thesis","content":"Tactics.thesis \nthesis \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#qed","title":"Tactics.qed","content":"Tactics.qed \nqed \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#test001","title":"Tactics.test001","content":"Tactics.test001 \ntest001 \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#double_th","title":"Tactics.double_th","content":"Tactics.double_th \ndouble_th \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#testcase","title":"Tactics.testcase","content":"Tactics.testcase \ntestcase \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics.html#test002","title":"Tactics.test002","content":"Tactics.test002 \ntest002 \n"},{"uri":"/Calcolemus/reference/calcolemus-tactics-goals.html","title":"goals","content":"goals \n \ngoals.Goals \nGoals"},{"uri":"/Calcolemus/reference/calcolemus-tactics-goals.html#Goals","title":"goals.Goals","content":"goals.Goals \nGoals \n"},{"uri":"/Calcolemus/reference/calcolemus-unif.html","title":"Unif","content":"Unif \n\n Unification for first order terms.\n  \nUnif.istriv \nistriv \nUnif.unify \nunify \nUnif.solve \nsolve \nUnif.fullunify \nfullunify \nUnif.unify_and_apply \nunify_and_apply"},{"uri":"/Calcolemus/reference/calcolemus-unif.html#istriv","title":"Unif.istriv","content":"Unif.istriv \nistriv \n\n Checks if the assignment \\(x \\mapsto t\\), added to \u003Ccode\u003Eenv\u003C/code\u003E, \n is trivial or cyclic.\n "},{"uri":"/Calcolemus/reference/calcolemus-unif.html#unify","title":"Unif.unify","content":"Unif.unify \nunify \n\n Main unification procedure.\n  \n\n It applies some transformations to \u003Ccode\u003Eeqs\u003C/code\u003E and incorporates the \n resulting variable-term mappings into \u003Ccode\u003Eenv\u003C/code\u003E.\n \n \u003Ccode\u003Eenv\u003C/code\u003E might contain mappings that could map a variable to a term \n containing other variables that are themselves assigned: for example \n \\(x \\mapsto y\\) and \\(y \\mapsto z\\) instead of just \\(x \\mapsto z\\) \n directly. The call to \u003Ca href=\u0022/Calcolemus/reference/calcolemus-unif.html#istriv\u0022\u003EUnif.istriv\u003C/a\u003E guarantees \n that there is no cycle or detects it and stops immediately the unification \n process with a failure.\n "},{"uri":"/Calcolemus/reference/calcolemus-unif.html#solve","title":"Unif.solve","content":"Unif.solve \nsolve \nRemoves useless mappings from an environment of variable-term \n mappings \u003Ccode\u003Eenv\u003C/code\u003E returned by \u003Ca href=\u0022/Calcolemus/reference/calcolemus-unif.html#unify\u0022\u003EUnif.unify\u003C/a\u003E, \n giving a most general unifier (MGU).\n  \nThe function never fails. However, it would cause a StackOverflow \n crash if called on a cyclic \u003Ccode\u003Eenv\u003C/code\u003E. \u003Ca href=\u0022/Calcolemus/reference/calcolemus-unif.html#unify\u0022\u003EUnif.unify\u003C/a\u003E \n is specifically designed not to produce cyclic mappings."},{"uri":"/Calcolemus/reference/calcolemus-unif.html#fullunify","title":"Unif.fullunify","content":"Unif.fullunify \nfullunify \n\n Returns an MGU for the input list of term-term pairs \u003Ccode\u003Eeqs\u003C/code\u003E, if it is \n actually unifiable.\n "},{"uri":"/Calcolemus/reference/calcolemus-unif.html#unify_and_apply","title":"Unif.unify_and_apply","content":"Unif.unify_and_apply \nunify_and_apply \n\n Finds an MGU for a list of term-term pairs \u003Ccode\u003Eeqs\u003C/code\u003E, if it is \n unifiable, and applies the instantiation to give the unified result.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-fpf.html","title":"Fpf","content":"Fpf \n\n Polymorphic Finite Partial functions via Patricia Trees.\n  \nFpf.func\u003C\u0027a, \u0027b\u003E \nfunc\u003C\u0027a, \u0027b\u003E \nFpf.undefined \nundefined \nFpf.is_undefined \nis_undefined \nFpf.mapf \nmapf \nFpf.foldl \nfoldl \nFpf.graph \ngraph \nFpf.dom \ndom \nFpf.ran \nran \nFpf.applyd \napplyd \nFpf.apply \napply \nFpf.tryapplyd \ntryapplyd \nFpf.tryapplyl \ntryapplyl \nFpf.defined \ndefined \nFpf.undefine \nundefine \nFpf.(|-\u003E) \n(|-\u003E) \nFpf.(|=\u003E) \n(|=\u003E) \nFpf.fpf \nfpf \nFpf.valmod \nvalmod \nFpf.undef \nundef"},{"uri":"/Calcolemus/reference/calcolemus-lib-fpf.html#undefined","title":"Fpf.undefined","content":"Fpf.undefined \nundefined \nThe empty, or everywhere undefined, fpf."},{"uri":"/Calcolemus/reference/calcolemus-lib-fpf.html#is_undefined","title":"Fpf.is_undefined","content":"Fpf.is_undefined \nis_undefined \n\n Returns true if the function is completely undefined, false\n otherwise.\n  \n\n In case of equality comparison worries, better use this.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-fpf.html#mapf","title":"Fpf.mapf","content":"Fpf.mapf \nmapf \n\n Builds a new fpf whose values are the results of applying the given\n function to the values of the input fpf.\n  \n\n It is, for finite partial functions, the same operation that \u003Ca href=\u0022https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-listmodule#Map\u0022\u003EListModule.Map\u003C/a\u003E is for \u003Ca href=\u0022https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-list-1\u0022\u003Elist\u003C/a\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-fpf.html#foldl","title":"Fpf.foldl","content":"Fpf.foldl \nfoldl \n\n Applies a function to the argument and value of an fpf, threading\n an accumulator argument through the computation. Take the second\n argument, and apply the function to it and the first argument and value\n of the fpf. Then feed this result into the function along with the\n second argument and value and so on. Return the final result. If the\n input function is \u003Ccode\u003Ef\u003C/code\u003E and the fpf\u0027s arguments and values are \u003Ccode\u003E\n (i0,j0)...(iN,jN)\u003C/code\u003E then\n computes \u003Ccode\u003Ef (... (f s i0 j0) i1 j1 ...) iN jN\u003C/code\u003E.\n  \n\n It is, for finite partial functions, the same operation that \u003Ca href=\u0022https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-listmodule#Fold\u0022\u003EListModule.Fold\u003C/a\u003E is for \u003Ca href=\u0022https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-list-1\u0022\u003Elist\u003C/a\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-fpf.html#graph","title":"Fpf.graph","content":"Fpf.graph \ngraph \nReturns the graph of the input \u003Ccode\u003Efpf\u003C/code\u003E."},{"uri":"/Calcolemus/reference/calcolemus-lib-fpf.html#dom","title":"Fpf.dom","content":"Fpf.dom \ndom \nReturns the domain of the input \u003Ccode\u003Efpf\u003C/code\u003E."},{"uri":"/Calcolemus/reference/calcolemus-lib-fpf.html#ran","title":"Fpf.ran","content":"Fpf.ran \nran \nReturns the range of the input \u003Ccode\u003Efpf\u003C/code\u003E."},{"uri":"/Calcolemus/reference/calcolemus-lib-fpf.html#applyd","title":"Fpf.applyd","content":"Fpf.applyd \napplyd \n\n Applies \u003Ccode\u003Efpf\u003C/code\u003E to \u003Ccode\u003Ea\u003C/code\u003E and returns the corresponding value, if\n \u003Ccode\u003Efpf\u003C/code\u003E is actually defined for it, otherwise applies \u003Ccode\u003Ed\u003C/code\u003E to\n \u003Ccode\u003Ea\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-fpf.html#apply","title":"Fpf.apply","content":"Fpf.apply \napply \n\n Applies \u003Ccode\u003Efpf\u003C/code\u003E to \u003Ccode\u003Ea\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-fpf.html#tryapplyd","title":"Fpf.tryapplyd","content":"Fpf.tryapplyd \ntryapplyd \n\n Tries to apply \u003Ccode\u003Efpf\u003C/code\u003E to an argument \u003Ccode\u003Ea\u003C/code\u003E, returning \u003Ccode\u003Ed\u003C/code\u003E\n as a default value if it fails.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-fpf.html#tryapplyl","title":"Fpf.tryapplyl","content":"Fpf.tryapplyl \ntryapplyl \n\n Tries to apply an \u003Ccode\u003Efpf\u003C/code\u003E whose values are lists to an argument \n \u003Ccode\u003Ea\u003C/code\u003E,returning \u003Ccode\u003E[]\u003C/code\u003E as a default value if it fails.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-fpf.html#defined","title":"Fpf.defined","content":"Fpf.defined \ndefined \n\n Checks if \u003Ccode\u003Efpf\u003C/code\u003E is defined for the argument \u003Ccode\u003Ea\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-fpf.html#undefine","title":"Fpf.undefine","content":"Fpf.undefine \nundefine \n\n Undefines the \u003Ccode\u003Efpf\u003C/code\u003E for the given argument \u003Ccode\u003Ea\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-fpf.html#(|-\u003E)","title":"Fpf.(|-\u003E)","content":"Fpf.(|-\u003E) \n(|-\u003E) \n\n Updates the \u003Ccode\u003Efpf\u003C/code\u003E with a new mapping \u003Ccode\u003Eargument\u003C/code\u003E-\u003Ccode\u003Evalue\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-fpf.html#(|=\u003E)","title":"Fpf.(|=\u003E)","content":"Fpf.(|=\u003E) \n(|=\u003E) \n\n Creates a point function: a special case of fpf defined only for a\n single argument \u003Ccode\u003Ea\u003C/code\u003E mapped to a value \u003Ccode\u003Eb\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-fpf.html#fpf","title":"Fpf.fpf","content":"Fpf.fpf \nfpf \n\n Creates a new fpf from two lists \u003Ccode\u003Exs\u003C/code\u003E and \u003Ccode\u003Eys\u003C/code\u003E representing\n its domain and range. It associates argument to value based on the\n order of items in the two lists.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-fpf.html#valmod","title":"Fpf.valmod","content":"Fpf.valmod \nvalmod \n\n Updates to \u003Ccode\u003Eb\u003C/code\u003E the value of a normal F# function \u003Ccode\u003Ef\u003C/code\u003E for \n the argument \u003Ccode\u003Ea\u003C/code\u003E, creating, instead, a new mapping \n \u003Ccode\u003Ea\u003C/code\u003E-\u003Ccode\u003Eb\u003C/code\u003E if \u003Ccode\u003Ef\u003C/code\u003E it\u0027s not already defined for \u003Ccode\u003Ea\u003C/code\u003E. \n Then it applies this modified function to the argument \u003Ccode\u003Ex\u003C/code\u003E.\n  \n\n Corresponds to the mathematical notation \\((a \\mapsto b)f\\) and it is \n the same thing of what \u003Ccode\u003E(x |-\u0026gt; y) f\u003C/code\u003E is in the context of the \n finite partial functions.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-fpf.html#undef","title":"Fpf.undef","content":"Fpf.undef \nundef \n\n A function undefined for any argument \u003Ccode\u003Ex\u003C/code\u003E and that always fails.\n  \n\n It is to be the same thing of what \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-lib-fpf.html#undefined\u0022\u003EFpf.undefined\u003C/a\u003E is in the context of \n the finite partial functions.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-fpf-func-2.html","title":"func\u003C\u0027a, \u0027b\u003E","content":"func\u003C\u0027a, \u0027b\u003E \n\n Type of polymorphic finite partial functions represented as a patricia\n tree, \u003Ccode\u003E\u0026#39;a\u003C/code\u003E being the type of the arguments and \u003Ccode\u003E\u0026#39;b\u003C/code\u003E that of\n the values.\n  \nfunc\u003C\u0027a, \u0027b\u003E.Empty \nEmpty \nfunc\u003C\u0027a, \u0027b\u003E.Leaf \nLeaf \nfunc\u003C\u0027a, \u0027b\u003E.Branch \nBranch"},{"uri":"/Calcolemus/reference/calcolemus-lib-fpf-func-2.html#Empty","title":"func\u003C\u0027a, \u0027b\u003E.Empty","content":"func\u003C\u0027a, \u0027b\u003E.Empty \nEmpty \n\n Represents the empty, or everywhere undefined, FPF.\n"},{"uri":"/Calcolemus/reference/calcolemus-lib-fpf-func-2.html#Leaf","title":"func\u003C\u0027a, \u0027b\u003E.Leaf","content":"func\u003C\u0027a, \u0027b\u003E.Leaf \nLeaf \n\n Represents a mapping from an element of the domain to an element of\n the codomain.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-fpf-func-2.html#Branch","title":"func\u003C\u0027a, \u0027b\u003E.Branch","content":"func\u003C\u0027a, \u0027b\u003E.Branch \nBranch \nUsed to store more then one mapping."},{"uri":"/Calcolemus/reference/calcolemus-lib-function.html","title":"Function","content":"Function \nFunctions over predicates and functions. \nFunction.non \nnon \nFunction.check \ncheck \nFunction.funpow \nfunpow \nFunction.can \ncan \nFunction.repeat \nrepeat"},{"uri":"/Calcolemus/reference/calcolemus-lib-function.html#non","title":"Function.non","content":"Function.non \nnon \n\n Applies the inverse of a predicate \u003Ccode\u003Ep\u003C/code\u003E to an argument \u003Ccode\u003Ex\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-function.html#check","title":"Function.check","content":"Function.check \ncheck \n\n Checks if the value \u003Ccode\u003Ex\u003C/code\u003E satisfies the predicate \u003Ccode\u003Ep\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-function.html#funpow","title":"Function.funpow","content":"Function.funpow \nfunpow \n\n Iterates the application of a function \u003Ccode\u003Ef\u003C/code\u003E to an argument \u003Ccode\u003Ex\u003C/code\u003E \n a fixed number \u003Ccode\u003En\u003C/code\u003E of times.\n  \n\u003Ccode\u003Efunpow n f x\u003C/code\u003E applies \u003Ccode\u003Ef\u003C/code\u003E to \u003Ccode\u003Ex\u003C/code\u003E for \u003Ccode\u003En\u003C/code\u003E times, \n giving the result \u003Ccode\u003Ef (f ... (f x)...)\u003C/code\u003E where the number of \n \u003Ccode\u003Ef\u003C/code\u003E\u0027s is \u003Ccode\u003En\u003C/code\u003E. \u003Ccode\u003Efunpow 0 f x\u003C/code\u003E returns \u003Ccode\u003Ex\u003C/code\u003E. If \n \u003Ccode\u003En\u003C/code\u003E is negative, it is treated as \u003Ccode\u003E0\u003C/code\u003E. It fails, if any of \n the \u003Ccode\u003En\u003C/code\u003E applications of \u003Ccode\u003Ef\u003C/code\u003E fail.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-function.html#can","title":"Function.can","content":"Function.can \ncan \n\n Tests if an input function \u003Ccode\u003Ef\u003C/code\u003E can be applied to an argument \n \u003Ccode\u003Ex\u003C/code\u003E without failing.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-function.html#repeat","title":"Function.repeat","content":"Function.repeat \nrepeat \n\n Repeats the application of a function \u003Ccode\u003Ef\u003C/code\u003E to an argument \u003Ccode\u003Ex\u003C/code\u003E \n until it fails.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-lexer.html","title":"Lexer","content":"Lexer \nLexical analysis. \nLexer.matches \nmatches \nLexer.space \nspace \nLexer.punctuation \npunctuation \nLexer.symbolic \nsymbolic \nLexer.numeric \nnumeric \nLexer.alphanumeric \nalphanumeric \nLexer.lexwhile \nlexwhile \nLexer.lex \nlex"},{"uri":"/Calcolemus/reference/calcolemus-lib-lexer.html#matches","title":"Lexer.matches","content":"Lexer.matches \nmatches \n\n Creates a pattern matching function based on the input string \u003Ccode\u003Es\u003C/code\u003E \n as the pattern.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-lexer.html#space","title":"Lexer.space","content":"Lexer.space \nspace \n\n Classifies single character strings as spaces.\n  \n\n Tabs and new lines are also considered spaces.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-lexer.html#punctuation","title":"Lexer.punctuation","content":"Lexer.punctuation \npunctuation \n\n Classifies single character strings as punctuation symbols: \n \u003Ccode\u003E()[]{},\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-lexer.html#symbolic","title":"Lexer.symbolic","content":"Lexer.symbolic \nsymbolic \n\n Classifies single character strings as symbolic: \n \u003Ccode\u003E~\u0060!@#$%^\u0026amp;*-\u002B=|\\\\:;\u0026lt;\u0026gt;.?/\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-lexer.html#numeric","title":"Lexer.numeric","content":"Lexer.numeric \nnumeric \n\n Classifies single character strings as numeric.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-lexer.html#alphanumeric","title":"Lexer.alphanumeric","content":"Lexer.alphanumeric \nalphanumeric \n\n Classifies single character strings as alphanumeric.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-lexer.html#lexwhile","title":"Lexer.lexwhile","content":"Lexer.lexwhile \nlexwhile \n\n Takes a property \u003Ccode\u003Eprop\u003C/code\u003E of characters (such as one of the \n classifying predicates: \u003Ca href=\u0022/Calcolemus/reference/calcolemus-lib-lexer.html#space\u0022\u003ELexer.space\u003C/a\u003E, \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-lib-lexer.html#punctuation\u0022\u003ELexer.punctuation\u003C/a\u003E, \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-lib-lexer.html#symbolic\u0022\u003ELexer.symbolic\u003C/a\u003E, \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-lib-lexer.html#numeric\u0022\u003ELexer.numeric\u003C/a\u003E, \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-lib-lexer.html#alphanumeric\u0022\u003ELexer.alphanumeric\u003C/a\u003E) and a list of \n single character strings \u003Ccode\u003Einp\u003C/code\u003E, separating off as a string \n the longest initial sequence of that list of characters \n satisfying \u003Ccode\u003Eprop\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-lexer.html#lex","title":"Lexer.lex","content":"Lexer.lex \nlex \n\n Lexical analyser. \n  \n\n It maps a list of input characters \u003Ccode\u003Einp\u003C/code\u003E into a \n list of token strings.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-list.html","title":"List","content":"List \n\n Handy functions for list manipulation.\n  \nList.last \nlast \nList.butlast \nbutlast \nList.allpairs \nallpairs \nList.distinctpairs \ndistinctpairs \nList.chop_list \nchop_list \nList.insertat \ninsertat \nList.index \nindex \nList.earlier \nearlier \nList.assoc \nassoc \nList.rev_assoc \nrev_assoc"},{"uri":"/Calcolemus/reference/calcolemus-lib-list.html#last","title":"List.last","content":"List.last \nlast \n\n Returns the last element of the list. \n "},{"uri":"/Calcolemus/reference/calcolemus-lib-list.html#butlast","title":"List.butlast","content":"List.butlast \nbutlast \n\n Computes the sub-list of a list consisting of all but the last element.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-list.html#allpairs","title":"List.allpairs","content":"List.allpairs \nallpairs \n\n Computes the list of all results from applying the function \u003Ccode\u003Ef\u003C/code\u003E to \n pairs from the two input lists \u003Ccode\u003El1\u003C/code\u003E and \u003Ccode\u003El2\u003C/code\u003E.\n  \n\u003Ccode\u003Eallpairs f [x1;...;xm] [y1;...;yn]\u003C/code\u003E returns the list of results \n \u003Ccode\u003E[f x1 y1; f x1 y2; ... ; f x1 yn; f x2 y1 ; f x2 y2 ...; f xm y1; \n f xm y2 ...; f xm yn]\u003C/code\u003E"},{"uri":"/Calcolemus/reference/calcolemus-lib-list.html#distinctpairs","title":"List.distinctpairs","content":"List.distinctpairs \ndistinctpairs \n\n Produces all pairs of distinct elements from a single list.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-list.html#chop_list","title":"List.chop_list","content":"List.chop_list \nchop_list \n\n Chops a list \u003Ccode\u003El\u003C/code\u003E into two parts at the specified index \u003Ccode\u003En\u003C/code\u003E.\n  \n\u003Ccode\u003Echop_list i [x1;...;xn]\u003C/code\u003E returns \n \u003Ccode\u003E([x0;...;xi-1],[xi;...;xn])\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-list.html#insertat","title":"List.insertat","content":"List.insertat \ninsertat \n\n Return a new list with a new item inserted before the given index.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-list.html#index","title":"List.index","content":"List.index \nindex \n\n Returns the index of the first element in the list \u003Ccode\u003Exs\u003C/code\u003E that \n equals \u003Ccode\u003Ex\u003C/code\u003E. Raises \u003Ccode\u003EKeyNotFoundException\u003C/code\u003E if no such element \n exists. \n "},{"uri":"/Calcolemus/reference/calcolemus-lib-list.html#earlier","title":"List.earlier","content":"List.earlier \nearlier \n\n Checks if \u003Ccode\u003Ex\u003C/code\u003E comes earlier than \u003Ccode\u003Ey\u003C/code\u003E in list \u003Ccode\u003El\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-list.html#assoc","title":"List.assoc","content":"List.assoc \nassoc \n\n Searches a list of pairs \u003Ccode\u003El\u003C/code\u003E for a pair whose first component \n equals a specified value \u003Ccode\u003Ea\u003C/code\u003E, failing if no matching is found.\n  \n\u003Ccode\u003Eassoc a [(a1,b1);...;(an,bn)]\u003C/code\u003E returns the first \u003Ccode\u003Ebi\u003C/code\u003E in the \n list such that \u003Ccode\u003Eai\u003C/code\u003E equals \u003Ccode\u003Ea\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-list.html#rev_assoc","title":"List.rev_assoc","content":"List.rev_assoc \nrev_assoc \n\n Searches a list of pairs \u003Ccode\u003El\u003C/code\u003E for a pair whose second component \n equals a specified value \u003Ccode\u003Eb\u003C/code\u003E, failing if no matching is found.\n  \n\u003Ccode\u003Erev_assoc b [(a1,b1);...;(an,bn)]\u003C/code\u003E returns the first \u003Ccode\u003Eai\u003C/code\u003E in \n the list such that \u003Ccode\u003Ebi\u003C/code\u003E equals \u003Ccode\u003Eb\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-parser.html","title":"Parser","content":"Parser \nGeneric functions for parsing. \nParser.make_parser \nmake_parser \nParser.parse_ginfix \nparse_ginfix \nParser.parse_left_infix \nparse_left_infix \nParser.parse_right_infix \nparse_right_infix \nParser.parse_list \nparse_list \nParser.papply \npapply \nParser.nextin \nnextin \nParser.parse_bracketed \nparse_bracketed"},{"uri":"/Calcolemus/reference/calcolemus-lib-parser.html#make_parser","title":"Parser.make_parser","content":"Parser.make_parser \nmake_parser \n\n Generic function to impose lexing and exhaustion checking on a parser. \n  \n\n A wrapper function that explodes the input string, lexically analyzes \n it, parses the sequence of tokens and then internally checks that no \n input remains unparsed.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-parser.html#parse_ginfix","title":"Parser.parse_ginfix","content":"Parser.parse_ginfix \nparse_ginfix \n\n General parsing of iterated infixes.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-parser.html#parse_left_infix","title":"Parser.parse_left_infix","content":"Parser.parse_left_infix \nparse_left_infix \n\n Parses left infix.\n"},{"uri":"/Calcolemus/reference/calcolemus-lib-parser.html#parse_right_infix","title":"Parser.parse_right_infix","content":"Parser.parse_right_infix \nparse_right_infix \n\n Parses right infix.\n"},{"uri":"/Calcolemus/reference/calcolemus-lib-parser.html#parse_list","title":"Parser.parse_list","content":"Parser.parse_list \nparse_list \n\n Parses a list: used to parse the list of arguments to a function.\n"},{"uri":"/Calcolemus/reference/calcolemus-lib-parser.html#papply","title":"Parser.papply","content":"Parser.papply \npapply \n\n Applies a function to the first element of a pair, the idea being to \n modify the returned abstract syntax tree while leaving the \u0027unparsed \n input\u0027 alone.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-parser.html#nextin","title":"Parser.nextin","content":"Parser.nextin \nnextin \n\n Checks if the head of a list (typically the list of unparsed input) is some \n particular item, but also ?rst checks that the list is nonempty before \n looking at its head.\n"},{"uri":"/Calcolemus/reference/calcolemus-lib-parser.html#parse_bracketed","title":"Parser.parse_bracketed","content":"Parser.parse_bracketed \nparse_bracketed \n\n Deals with the common situation of syntactic items enclosed in brackets. It \n simply calls the subparser and then checks and eliminates the closing \n bracket. In principle, the terminating character can be anything, so this \n function could equally be used for other purposes, but we will always use \n \u0027)\u0027 for the cbra (\u0027closing bracket\u0027) argument.\n"},{"uri":"/Calcolemus/reference/calcolemus-lib-partition.html","title":"Partition","content":"Partition \n\n Equivalence relations (or partitions, equivalence classes) on finite sets.\n  \n\n See also \u003Ca target=\u0022_blank\u0022 href=\u0022https://en.wikipedia.org/wiki/Disjoint-set_data_structure\u0022\u003EDisjoint set/Union Find data structure\u003C/a\u003E \n on Wikipedia.\n  \nPartition.partition\u003C\u0027a\u003E \npartition\u003C\u0027a\u003E \nPartition.pnode\u003C\u0027a\u003E \npnode\u003C\u0027a\u003E \nPartition.unequal \nunequal \nPartition.equated \nequated \nPartition.terminus \nterminus \nPartition.tryterminus \ntryterminus \nPartition.canonize \ncanonize \nPartition.equivalent \nequivalent \nPartition.equate \nequate"},{"uri":"/Calcolemus/reference/calcolemus-lib-partition.html#unequal","title":"Partition.unequal","content":"Partition.unequal \nunequal \nThe empty partition: used to define new partitions."},{"uri":"/Calcolemus/reference/calcolemus-lib-partition.html#equated","title":"Partition.equated","content":"Partition.equated \nequated \n\n Returns the domain of the partition \u003Ccode\u003Eptn\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-partition.html#terminus","title":"Partition.terminus","content":"Partition.terminus \nterminus \n\n Searches for the canonical representative of the \u003Ccode\u003Eptn\u003C/code\u003E-equivalence \n class containing \u003Ccode\u003Ea\u003C/code\u003E, failing if \u003Ccode\u003Ea\u003C/code\u003E does not belong to the \n domain of the partition.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-partition.html#tryterminus","title":"Partition.tryterminus","content":"Partition.tryterminus \ntryterminus \n\n Searches for the canonical representative of the \u003Ccode\u003Eptn\u003C/code\u003E-equivalence \n class containing \u003Ccode\u003Ea\u003C/code\u003E, returning the input element \u003Ccode\u003Ea\u003C/code\u003E itself \n if it does not belong to the domain of the partition.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-partition.html#canonize","title":"Partition.canonize","content":"Partition.canonize \ncanonize \n\n Returns the canonical representative of the \u003Ccode\u003Eptn\u003C/code\u003E-equivalence \n class containing \u003Ccode\u003Ea\u003C/code\u003E, if \u003Ccode\u003Ea\u003C/code\u003E is in the domain of the \n partition. Otherwise it returns just \u003Ccode\u003Ea\u003C/code\u003E itself.\n  \n\n Corresponds to the find method in the union-find algorithm.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-partition.html#equivalent","title":"Partition.equivalent","content":"Partition.equivalent \nequivalent \n\n Tests if \u003Ccode\u003Ea\u003C/code\u003E and \u003Ccode\u003Eb\u003C/code\u003E are equivalent w.r.t. \u003Ccode\u003Eptn\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-partition.html#equate","title":"Partition.equate","content":"Partition.equate \nequate \n\n Creates a new partition that results from merging the \u003Ccode\u003Ea\u003C/code\u003E and \n \u003Ccode\u003Eb\u003C/code\u003E classes in \u003Ccode\u003Eptn\u003C/code\u003E, i.e. the smallest equivalence relation \n containing \u003Ccode\u003Eptn\u003C/code\u003E such that \u003Ccode\u003Ea\u003C/code\u003E and \u003Ccode\u003Eb\u003C/code\u003E are equivalent.\n  \n\n Corresponds to the union method in the union-find algorithm.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-partition-partition-1.html","title":"partition\u003C\u0027a\u003E","content":"partition\u003C\u0027a\u003E \n\n Union-Find datatype to represent equivalence relations (partitions) on \n finite sets.\n  \npartition\u003C\u0027a\u003E.Partition \nPartition"},{"uri":"/Calcolemus/reference/calcolemus-lib-partition-partition-1.html#Partition","title":"partition\u003C\u0027a\u003E.Partition","content":"partition\u003C\u0027a\u003E.Partition \nPartition \n\n Represents the partitions (or equivalence classes) of the domain \n through an fpf (see \u003Ca href=\u0022/Calcolemus/reference/calcolemus-lib-fpf-func-2.html\u0022\u003Efunc\u003C/a\u003E) that \n maps an element of the domain to a \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-lib-partition-pnode-1.html\u0022\u003Epnode\u003C/a\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-partition-pnode-1.html","title":"pnode\u003C\u0027a\u003E","content":"pnode\u003C\u0027a\u003E \n\n Type of polymorphic \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-lib-partition-partition-1.html\u0022\u003Epartition\u003C/a\u003E\n node.\n  \npnode\u003C\u0027a\u003E.Nonterminal \nNonterminal \npnode\u003C\u0027a\u003E.Terminal \nTerminal"},{"uri":"/Calcolemus/reference/calcolemus-lib-partition-pnode-1.html#Nonterminal","title":"pnode\u003C\u0027a\u003E.Nonterminal","content":"pnode\u003C\u0027a\u003E.Nonterminal \nNonterminal \n\n Nonterminal node: associated to non canonical elements.\n  \n\u003Ccode\u003ENonterminal 1\u003C/code\u003E is the node that would be associated to an \n element that is **not** the representative, or the canonical \n element, of its equivalence class and in fact in this case the \n representative would be \u003Ccode\u003E1\u003C/code\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-partition-pnode-1.html#Terminal","title":"pnode\u003C\u0027a\u003E.Terminal","content":"pnode\u003C\u0027a\u003E.Terminal \nTerminal \n\n Terminal node: associated to canonical elements.\n  \n\u003Ccode\u003ETerminal (1, 4)\u003C/code\u003E is the node that would be associated to\n \u003Ccode\u003E1\u003C/code\u003E when \u003Ccode\u003E1\u003C/code\u003E is the representative, or the canonical \n element, of its equivalence class and the equivalence class has 4 \n elements.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-search.html","title":"Search","content":"Search \n\n Searching functions.\n  \nSearch.tryfind \ntryfind \nSearch.mapfilter \nmapfilter \nSearch.optimize \noptimize \nSearch.maximize \nmaximize \nSearch.minimize \nminimize"},{"uri":"/Calcolemus/reference/calcolemus-lib-search.html#tryfind","title":"Search.tryfind","content":"Search.tryfind \ntryfind \n\n Returns the result of the first successful application of a function to \n the elements of a list.\n  \n\u003Ccode\u003Etryfind f [x1;...;xn]\u003C/code\u003E returns \u003Ccode\u003Ef xi\u003C/code\u003E for the first \n \u003Ccode\u003Exi\u003C/code\u003E in the list for which application of \u003Ccode\u003Ef\u003C/code\u003E succeeds.\n \n \u003Cp\u003EFails with tryfind if the application of the function fails for all \n elements in the list. This will always be the case if the list is empty.\n \u003C/p\u003E"},{"uri":"/Calcolemus/reference/calcolemus-lib-search.html#mapfilter","title":"Search.mapfilter","content":"Search.mapfilter \nmapfilter \n\n Applies a function to every element of a list, returning a list of \n results for those elements for which application succeeds.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-search.html#optimize","title":"Search.optimize","content":"Search.optimize \noptimize \n\n Finds the element of a list \u003Ccode\u003El\u003C/code\u003E that maximizes or minimizes \n (based on the given \u003Ccode\u003Eord\u003C/code\u003E) a function \u003Ccode\u003Ef\u003C/code\u003E. \n  \n\n Used to define maximize and minimize.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-search.html#maximize","title":"Search.maximize","content":"Search.maximize \nmaximize \n\n Finds the element of a list \u003Ccode\u003El\u003C/code\u003E that maximizes a function \n \u003Ccode\u003Ef\u003C/code\u003E. \n "},{"uri":"/Calcolemus/reference/calcolemus-lib-search.html#minimize","title":"Search.minimize","content":"Search.minimize \nminimize \n\n Finds the element of a list \u003Ccode\u003El\u003C/code\u003E that minimizes a function \n \u003Ccode\u003Ef\u003C/code\u003E. \n "},{"uri":"/Calcolemus/reference/calcolemus-lib-set.html","title":"Set","content":"Set \n\n Set represented as ordered lists and related operations.\n  \nSet.setify \nsetify \nSet.union \nunion \nSet.intersect \nintersect \nSet.subtract \nsubtract \nSet.subset \nsubset \nSet.psubset \npsubset \nSet.set_eq \nset_eq \nSet.insert \ninsert \nSet.image \nimage \nSet.unions \nunions \nSet.mem \nmem \nSet.allsets \nallsets \nSet.allsubsets \nallsubsets \nSet.allnonemptysubsets \nallnonemptysubsets"},{"uri":"/Calcolemus/reference/calcolemus-lib-set.html#setify","title":"Set.setify","content":"Set.setify \nsetify \n\n Removes repeated elements from a list, making a list into a \u0027set\u0027.\n  \n\n Returns a sorted list that contains no duplicate entries according to \n generic hash and equality comparisons on the entries. If an element \n occurs multiple times in the list then the later occurrences are \n discarded. \n "},{"uri":"/Calcolemus/reference/calcolemus-lib-set.html#union","title":"Set.union","content":"Set.union \nunion \n\n Computes the union of two \u0060sets\u0027.\n  \n\u003Ccode\u003Eunion l1 l2\u003C/code\u003E returns a list consisting of the elements of \n \u003Ccode\u003El1\u003C/code\u003E not already in \u003Ccode\u003El2\u003C/code\u003E concatenated with \u003Ccode\u003El2\u003C/code\u003E . \n If \u003Ccode\u003El1\u003C/code\u003E  and \u003Ccode\u003El2\u003C/code\u003E  are initially free from duplicates, \n this gives a set-theoretic union operation. \n "},{"uri":"/Calcolemus/reference/calcolemus-lib-set.html#intersect","title":"Set.intersect","content":"Set.intersect \nintersect \n\n Computes the intersection of two \u0027sets\u0027.\n  \n\u003Ccode\u003Eintersect l1 l2\u003C/code\u003E returns a list consisting of those elements of \n \u003Ccode\u003El1\u003C/code\u003E that also appear in \u003Ccode\u003El1\u003C/code\u003E. If both sets are free of \n repetitions, this can be considered a set-theoretic intersection \n operation. \n "},{"uri":"/Calcolemus/reference/calcolemus-lib-set.html#subtract","title":"Set.subtract","content":"Set.subtract \nsubtract \n\n Computes the set-theoretic difference of two \u0027sets\u0027.\n  \n\u003Ccode\u003Esubtract l1 l2\u003C/code\u003E returns a list consisting of those elements of \n \u003Ccode\u003El1\u003C/code\u003E that do not appear in \u003Ccode\u003El2\u003C/code\u003E. If both lists are initially \n free of repetitions, this can be considered a set difference operation.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-set.html#subset","title":"Set.subset","content":"Set.subset \nsubset \n\n Evaluates to \u003Ccode\u003Etrue\u003C/code\u003E if all elements of the first list are in the second.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-set.html#psubset","title":"Set.psubset","content":"Set.psubset \npsubset \n\n Evaluates to \u003Ccode\u003Etrue\u003C/code\u003E if all elements of the first list are in the \n second, and at least one element of the second is not in the first.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-set.html#set_eq","title":"Set.set_eq","content":"Set.set_eq \nset_eq \n\n Tests two \u0027sets\u0027 for equality.\n  \n\u003Ccode\u003Eset_eq l1 l2\u003C/code\u003E returns \u003Ccode\u003Etrue\u003C/code\u003E if every element of \u003Ccode\u003El1\u003C/code\u003E \n appears in \u003Ccode\u003El2\u003C/code\u003E and every element of \u003Ccode\u003El2\u003C/code\u003E appears in \n \u003Ccode\u003El1\u003C/code\u003E. Otherwise it returns false. \n \n \u003Cp\u003EIn other words, it tests if the lists are the same considered as \n sets, i.e. ignoring duplicates.\u003C/p\u003E"},{"uri":"/Calcolemus/reference/calcolemus-lib-set.html#insert","title":"Set.insert","content":"Set.insert \ninsert \n\n Returns a new set with an element added to the set. No exception is \n raised if the set already contains the given element.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-set.html#image","title":"Set.image","content":"Set.image \nimage \n\n The image of \u003Ccode\u003Es\u003C/code\u003E under \u003Ccode\u003Ef\u003C/code\u003E.\n  \n\n Returns a new collection containing the results of applying the\n given function to each element of the input \u0027set\u0027.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-set.html#unions","title":"Set.unions","content":"Set.unions \nunions \nComputes the union of a sequence of \u0027sets\u0027."},{"uri":"/Calcolemus/reference/calcolemus-lib-set.html#mem","title":"Set.mem","content":"Set.mem \nmem \nTests if the list contains the specified element."},{"uri":"/Calcolemus/reference/calcolemus-lib-set.html#allsets","title":"Set.allsets","content":"Set.allsets \nallsets \n\n Returns all subsets of the given size.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-set.html#allsubsets","title":"Set.allsubsets","content":"Set.allsubsets \nallsubsets \n\n Returns all the subsets of the input \u0027set\u0027.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-set.html#allnonemptysubsets","title":"Set.allnonemptysubsets","content":"Set.allnonemptysubsets \nallnonemptysubsets \n\n Returns all nonempty subsets of the input \u0027set\u0027.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-sort.html","title":"Sort","content":"Sort \n\n Sorting functions.\n  \nSort.merge \nmerge \nSort.sort \nsort \nSort.increasing \nincreasing \nSort.decreasing \ndecreasing"},{"uri":"/Calcolemus/reference/calcolemus-lib-sort.html#merge","title":"Sort.merge","content":"Sort.merge \nmerge \n\n Merges together two sorted lists with respect to a given ordering.\n  \n\n If two lists \u003Ccode\u003El1\u003C/code\u003E and \u003Ccode\u003El2\u003C/code\u003E are sorted with respect to the \n given ordering \u003Ccode\u003Eord\u003C/code\u003E, then \u003Ccode\u003Emerge ord l1 l2\u003C/code\u003E will merge \n them into a sorted list of all the elements. The merge keeps any \n duplicates; it is not a set operation.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-sort.html#sort","title":"Sort.sort","content":"Sort.sort \nsort \n\n Sorts a list using a given transitive \u0027ordering\u0027 relation.\n  \n\n The call \u003Ccode\u003Esort op list\u003C/code\u003E where \u003Ccode\u003Eop\u003C/code\u003E is a transitive relation \n on the elements of \u003Ccode\u003Elist\u003C/code\u003E, will topologically sort the list, i.e. \n will permute it such that if \u003Ccode\u003Ex op y\u003C/code\u003E but \u003Ccode\u003Enot y op x\u003C/code\u003E then \n \u003Ccode\u003Ex\u003C/code\u003E will occur to the left of \u003Ccode\u003Ey\u003C/code\u003E in the sorted list. \n In particular if \u003Ccode\u003Eop\u003C/code\u003E is a total order, the list will be sorted in \n the usual sense of the word.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-sort.html#increasing","title":"Sort.increasing","content":"Sort.increasing \nincreasing \n\n Checks whether \u003Ccode\u003Ex\u003C/code\u003E is less than \u003Ccode\u003Ey\u003C/code\u003E based on \u003Ccode\u003Ef\u003C/code\u003E.\n  \n\n increasing predicate to use with \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-lib-sort.html\u0022\u003ESort.sort\u003C/a\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-sort.html#decreasing","title":"Sort.decreasing","content":"Sort.decreasing \ndecreasing \n\n Checks whether \u003Ccode\u003Ex\u003C/code\u003E is greater than \u003Ccode\u003Ey\u003C/code\u003E based on \u003Ccode\u003Ef\u003C/code\u003E.\n  \n\n decreasing predicate to use with \n \u003Ca href=\u0022/Calcolemus/reference/calcolemus-lib-sort.html\u0022\u003ESort.sort\u003C/a\u003E.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-string.html","title":"String","content":"String \n\n Explosion and implosion of strings.\n  \nString.explode \nexplode \nString.implode \nimplode \nString.writeToString \nwriteToString"},{"uri":"/Calcolemus/reference/calcolemus-lib-string.html#explode","title":"String.explode","content":"String.explode \nexplode \n\n Converts a string into a list of single-character strings.\n  \n\u003Ccode\u003Eexplode s\u003C/code\u003E returns the list of single-character strings that make \n up \u003Ccode\u003Es\u003C/code\u003E, in the order in which they appear in \u003Ccode\u003Es\u003C/code\u003E. If \u003Ccode\u003Es\u003C/code\u003E \n is the empty string, then an empty list is returned.\n "},{"uri":"/Calcolemus/reference/calcolemus-lib-string.html#implode","title":"String.implode","content":"String.implode \nimplode \n\n Concatenates a list of strings into one string.\n  \n\u003Ccode\u003Eimplode [s1;...;sn]\u003C/code\u003E returns the string formed by concatenating \n the strings \u003Ccode\u003Es1\u003C/code\u003E ... \u003Ccode\u003Esn\u003C/code\u003E. If n is zero (the list is empty), \n then the empty string is returned.\n \n \u003Cp\u003E\n Never fails and accepts empty or multi-character component strings.\n \u003C/p\u003E"},{"uri":"/Calcolemus/reference/calcolemus-lib-string.html#writeToString","title":"String.writeToString","content":"String.writeToString \nwriteToString \n\n Write from a StringWriter to a string\n"},{"uri":"/Calcolemus/reference/calcolemus-lib-time.html","title":"Time","content":"Time \n\n Timing: useful for documentation but not logically necessary.\n  \nTime.time \ntime"},{"uri":"/Calcolemus/reference/calcolemus-lib-time.html#time","title":"Time.time","content":"Time.time \ntime \n\n Report CPU time taken by a function.\n  \n\n A call \u003Ccode\u003Etime f x\u003C/code\u003E will evaluate \u003Ccode\u003Ef x\u003C/code\u003E as usual, but will also \n print the CPU time taken by that function evaluation.\n \u003Cp\u003E\u003C/p\u003E\n Never fails in itself, though it propagates any exception generated by \n the call \u003Ccode\u003Ef x\u003C/code\u003E itself.\n "},{"uri":"/Calcolemus/index.html","title":"Calcolemus Library Documentation\n","content":"# Calcolemus Library Documentation\n\nThis site contains the documentation for the Calcolemus library.\n\nThe library provides lexer, parsing and printing for propositional and first order logic together with a wide range of theorem proving techniques both automated and with interaction human-machine.\n\nIt is a porting in F# of the code from John Harrison\u0027s book [Handbook of Practical Logic and Automated Reasoning](https://www.cl.cam.ac.uk/~jrh13/atp/index.html) written in OCaml and it is based on a [previous F# porting](https://github.com/jack-pappas/fsharp-logic-examples) by [Jack Pappas](https://github.com/jack-pappas), [Eric Taucher](https://github.com/EricGT), [Anh-Dung Phan](https://github.com/dungpa).\n\nThe following namespaces are available:\n\n* [Calcolemus](./reference/Calcolemus.html) - The main namespace with the specific thematics.\n\n* [Calcolemus.Lib](./reference/Calcolemus-lib.html) - The library with basic functions for general implementation.\n\n\n"}]